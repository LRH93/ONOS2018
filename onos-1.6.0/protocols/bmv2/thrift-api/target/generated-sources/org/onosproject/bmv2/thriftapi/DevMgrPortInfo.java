/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.onosproject.bmv2.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-14")
public class DevMgrPortInfo implements org.apache.thrift.TBase<DevMgrPortInfo, DevMgrPortInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DevMgrPortInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DevMgrPortInfo");

  private static final org.apache.thrift.protocol.TField PORT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("port_num", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("iface_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("is_up", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DevMgrPortInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DevMgrPortInfoTupleSchemeFactory());
  }

  public int port_num; // required
  public String iface_name; // required
  public boolean is_up; // required
  public Map<String,String> extra; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PORT_NUM((short)1, "port_num"),
    IFACE_NAME((short)2, "iface_name"),
    IS_UP((short)3, "is_up"),
    EXTRA((short)4, "extra");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PORT_NUM
          return PORT_NUM;
        case 2: // IFACE_NAME
          return IFACE_NAME;
        case 3: // IS_UP
          return IS_UP;
        case 4: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_NUM_ISSET_ID = 0;
  private static final int __IS_UP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PORT_NUM, new org.apache.thrift.meta_data.FieldMetaData("port_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("iface_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_UP, new org.apache.thrift.meta_data.FieldMetaData("is_up", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DevMgrPortInfo.class, metaDataMap);
  }

  public DevMgrPortInfo() {
  }

  public DevMgrPortInfo(
    int port_num,
    String iface_name,
    boolean is_up,
    Map<String,String> extra)
  {
    this();
    this.port_num = port_num;
    setPort_numIsSet(true);
    this.iface_name = iface_name;
    this.is_up = is_up;
    setIs_upIsSet(true);
    this.extra = extra;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DevMgrPortInfo(DevMgrPortInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.port_num = other.port_num;
    if (other.isSetIface_name()) {
      this.iface_name = other.iface_name;
    }
    this.is_up = other.is_up;
    if (other.isSetExtra()) {
      Map<String,String> __this__extra = new HashMap<String,String>(other.extra);
      this.extra = __this__extra;
    }
  }

  public DevMgrPortInfo deepCopy() {
    return new DevMgrPortInfo(this);
  }

  @Override
  public void clear() {
    setPort_numIsSet(false);
    this.port_num = 0;
    this.iface_name = null;
    setIs_upIsSet(false);
    this.is_up = false;
    this.extra = null;
  }

  public int getPort_num() {
    return this.port_num;
  }

  public DevMgrPortInfo setPort_num(int port_num) {
    this.port_num = port_num;
    setPort_numIsSet(true);
    return this;
  }

  public void unsetPort_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_NUM_ISSET_ID);
  }

  /** Returns true if field port_num is set (has been assigned a value) and false otherwise */
  public boolean isSetPort_num() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_NUM_ISSET_ID);
  }

  public void setPort_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_NUM_ISSET_ID, value);
  }

  public String getIface_name() {
    return this.iface_name;
  }

  public DevMgrPortInfo setIface_name(String iface_name) {
    this.iface_name = iface_name;
    return this;
  }

  public void unsetIface_name() {
    this.iface_name = null;
  }

  /** Returns true if field iface_name is set (has been assigned a value) and false otherwise */
  public boolean isSetIface_name() {
    return this.iface_name != null;
  }

  public void setIface_nameIsSet(boolean value) {
    if (!value) {
      this.iface_name = null;
    }
  }

  public boolean isIs_up() {
    return this.is_up;
  }

  public DevMgrPortInfo setIs_up(boolean is_up) {
    this.is_up = is_up;
    setIs_upIsSet(true);
    return this;
  }

  public void unsetIs_up() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_UP_ISSET_ID);
  }

  /** Returns true if field is_up is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_up() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_UP_ISSET_ID);
  }

  public void setIs_upIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_UP_ISSET_ID, value);
  }

  public int getExtraSize() {
    return (this.extra == null) ? 0 : this.extra.size();
  }

  public void putToExtra(String key, String val) {
    if (this.extra == null) {
      this.extra = new HashMap<String,String>();
    }
    this.extra.put(key, val);
  }

  public Map<String,String> getExtra() {
    return this.extra;
  }

  public DevMgrPortInfo setExtra(Map<String,String> extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PORT_NUM:
      if (value == null) {
        unsetPort_num();
      } else {
        setPort_num((Integer)value);
      }
      break;

    case IFACE_NAME:
      if (value == null) {
        unsetIface_name();
      } else {
        setIface_name((String)value);
      }
      break;

    case IS_UP:
      if (value == null) {
        unsetIs_up();
      } else {
        setIs_up((Boolean)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PORT_NUM:
      return getPort_num();

    case IFACE_NAME:
      return getIface_name();

    case IS_UP:
      return isIs_up();

    case EXTRA:
      return getExtra();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PORT_NUM:
      return isSetPort_num();
    case IFACE_NAME:
      return isSetIface_name();
    case IS_UP:
      return isSetIs_up();
    case EXTRA:
      return isSetExtra();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DevMgrPortInfo)
      return this.equals((DevMgrPortInfo)that);
    return false;
  }

  public boolean equals(DevMgrPortInfo that) {
    if (that == null)
      return false;

    boolean this_present_port_num = true;
    boolean that_present_port_num = true;
    if (this_present_port_num || that_present_port_num) {
      if (!(this_present_port_num && that_present_port_num))
        return false;
      if (this.port_num != that.port_num)
        return false;
    }

    boolean this_present_iface_name = true && this.isSetIface_name();
    boolean that_present_iface_name = true && that.isSetIface_name();
    if (this_present_iface_name || that_present_iface_name) {
      if (!(this_present_iface_name && that_present_iface_name))
        return false;
      if (!this.iface_name.equals(that.iface_name))
        return false;
    }

    boolean this_present_is_up = true;
    boolean that_present_is_up = true;
    if (this_present_is_up || that_present_is_up) {
      if (!(this_present_is_up && that_present_is_up))
        return false;
      if (this.is_up != that.is_up)
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_port_num = true;
    list.add(present_port_num);
    if (present_port_num)
      list.add(port_num);

    boolean present_iface_name = true && (isSetIface_name());
    list.add(present_iface_name);
    if (present_iface_name)
      list.add(iface_name);

    boolean present_is_up = true;
    list.add(present_is_up);
    if (present_is_up)
      list.add(is_up);

    boolean present_extra = true && (isSetExtra());
    list.add(present_extra);
    if (present_extra)
      list.add(extra);

    return list.hashCode();
  }

  @Override
  public int compareTo(DevMgrPortInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPort_num()).compareTo(other.isSetPort_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_num, other.port_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIface_name()).compareTo(other.isSetIface_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIface_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iface_name, other.iface_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_up()).compareTo(other.isSetIs_up());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_up()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_up, other.is_up);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DevMgrPortInfo(");
    boolean first = true;

    sb.append("port_num:");
    sb.append(this.port_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iface_name:");
    if (this.iface_name == null) {
      sb.append("null");
    } else {
      sb.append(this.iface_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_up:");
    sb.append(this.is_up);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extra:");
    if (this.extra == null) {
      sb.append("null");
    } else {
      sb.append(this.extra);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DevMgrPortInfoStandardSchemeFactory implements SchemeFactory {
    public DevMgrPortInfoStandardScheme getScheme() {
      return new DevMgrPortInfoStandardScheme();
    }
  }

  private static class DevMgrPortInfoStandardScheme extends StandardScheme<DevMgrPortInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DevMgrPortInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PORT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port_num = iprot.readI32();
              struct.setPort_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IFACE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iface_name = iprot.readString();
              struct.setIface_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_up = iprot.readBool();
              struct.setIs_upIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.extra = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.extra.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DevMgrPortInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PORT_NUM_FIELD_DESC);
      oprot.writeI32(struct.port_num);
      oprot.writeFieldEnd();
      if (struct.iface_name != null) {
        oprot.writeFieldBegin(IFACE_NAME_FIELD_DESC);
        oprot.writeString(struct.iface_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_UP_FIELD_DESC);
      oprot.writeBool(struct.is_up);
      oprot.writeFieldEnd();
      if (struct.extra != null) {
        oprot.writeFieldBegin(EXTRA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra.size()));
          for (Map.Entry<String, String> _iter4 : struct.extra.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DevMgrPortInfoTupleSchemeFactory implements SchemeFactory {
    public DevMgrPortInfoTupleScheme getScheme() {
      return new DevMgrPortInfoTupleScheme();
    }
  }

  private static class DevMgrPortInfoTupleScheme extends TupleScheme<DevMgrPortInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DevMgrPortInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPort_num()) {
        optionals.set(0);
      }
      if (struct.isSetIface_name()) {
        optionals.set(1);
      }
      if (struct.isSetIs_up()) {
        optionals.set(2);
      }
      if (struct.isSetExtra()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPort_num()) {
        oprot.writeI32(struct.port_num);
      }
      if (struct.isSetIface_name()) {
        oprot.writeString(struct.iface_name);
      }
      if (struct.isSetIs_up()) {
        oprot.writeBool(struct.is_up);
      }
      if (struct.isSetExtra()) {
        {
          oprot.writeI32(struct.extra.size());
          for (Map.Entry<String, String> _iter5 : struct.extra.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DevMgrPortInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.port_num = iprot.readI32();
        struct.setPort_numIsSet(true);
      }
      if (incoming.get(1)) {
        struct.iface_name = iprot.readString();
        struct.setIface_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_up = iprot.readBool();
        struct.setIs_upIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extra = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.extra.put(_key7, _val8);
          }
        }
        struct.setExtraIsSet(true);
      }
    }
  }

}

