/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.onosproject.bmv2.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-14")
public class Standard {

  public interface Iface {

    public long bm_mt_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, String action_name, List<ByteBuffer> action_data, BmAddEntryOptions options) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_set_default_action(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_delete_entry(int cxt_id, String table_name, long entry_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_modify_entry(int cxt_id, String table_name, long entry_handle, String action_name, List<ByteBuffer> action_data) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms) throws InvalidTableOperation, org.apache.thrift.TException;

    public int bm_mt_indirect_add_member(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_delete_member(int cxt_id, String table_name, int mbr_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_modify_member(int cxt_id, String table_name, int mbr_handle, String action_name, List<ByteBuffer> action_data) throws InvalidTableOperation, org.apache.thrift.TException;

    public long bm_mt_indirect_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int mbr_handle, BmAddEntryOptions options) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_modify_entry(int cxt_id, String table_name, long entry_handle, int mbr_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_delete_entry(int cxt_id, String table_name, long entry_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_set_default_member(int cxt_id, String table_name, int mbr_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public int bm_mt_indirect_ws_create_group(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_ws_delete_group(int cxt_id, String table_name, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_ws_add_member_to_group(int cxt_id, String table_name, int mbr_handle, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_ws_remove_member_from_group(int cxt_id, String table_name, int mbr_handle, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public long bm_mt_indirect_ws_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int grp_handle, BmAddEntryOptions options) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_ws_modify_entry(int cxt_id, String table_name, long entry_handle, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_indirect_ws_set_default_group(int cxt_id, String table_name, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public BmCounterValue bm_mt_read_counter(int cxt_id, String table_name, long entry_handle) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_reset_counters(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_write_counter(int cxt_id, String table_name, long entry_handle, BmCounterValue value) throws InvalidTableOperation, org.apache.thrift.TException;

    public void bm_mt_set_meter_rates(int cxt_id, String table_name, long entry_handle, List<BmMeterRateConfig> rates) throws InvalidTableOperation, org.apache.thrift.TException;

    public List<BmMtEntry> bm_mt_get_entries(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException;

    public BmActionEntry bm_mt_get_default_entry(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException;

    public List<BmMtIndirectMember> bm_mt_indirect_get_members(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException;

    public List<BmMtIndirectWsGroup> bm_mt_indirect_ws_get_groups(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException;

    public BmCounterValue bm_counter_read(int cxt_id, String counter_name, int index) throws InvalidCounterOperation, org.apache.thrift.TException;

    public void bm_counter_reset_all(int cxt_id, String counter_name) throws InvalidCounterOperation, org.apache.thrift.TException;

    public void bm_counter_write(int cxt_id, String counter_name, int index, BmCounterValue value) throws InvalidCounterOperation, org.apache.thrift.TException;

    public void bm_learning_ack(int cxt_id, int list_id, long buffer_id, List<Integer> sample_ids) throws InvalidLearnOperation, org.apache.thrift.TException;

    public void bm_learning_ack_buffer(int cxt_id, int list_id, long buffer_id) throws InvalidLearnOperation, org.apache.thrift.TException;

    public void bm_learning_set_timeout(int cxt_id, int list_id, int timeout_ms) throws InvalidLearnOperation, org.apache.thrift.TException;

    public void bm_learning_set_buffer_size(int cxt_id, int list_id, int nb_samples) throws InvalidLearnOperation, org.apache.thrift.TException;

    public void bm_load_new_config(String config_str) throws InvalidSwapOperation, org.apache.thrift.TException;

    public void bm_swap_configs() throws InvalidSwapOperation, org.apache.thrift.TException;

    public void bm_meter_array_set_rates(int cxt_id, String meter_array_name, List<BmMeterRateConfig> rates) throws InvalidMeterOperation, org.apache.thrift.TException;

    public void bm_meter_set_rates(int cxt_id, String meter_array_name, int index, List<BmMeterRateConfig> rates) throws InvalidMeterOperation, org.apache.thrift.TException;

    public long bm_register_read(int cxt_id, String register_array_name, int idx) throws InvalidRegisterOperation, org.apache.thrift.TException;

    public void bm_register_write(int cxt_id, String register_array_name, int index, long value) throws InvalidRegisterOperation, org.apache.thrift.TException;

    public void bm_register_write_range(int cxt_id, String register_array_name, int start_index, int end_index, long value) throws InvalidRegisterOperation, org.apache.thrift.TException;

    public void bm_register_reset(int cxt_id, String register_array_name) throws InvalidRegisterOperation, org.apache.thrift.TException;

    public void bm_dev_mgr_add_port(String iface_name, int port_num, String pcap_path) throws InvalidDevMgrOperation, org.apache.thrift.TException;

    public void bm_dev_mgr_remove_port(int port_num) throws InvalidDevMgrOperation, org.apache.thrift.TException;

    public List<DevMgrPortInfo> bm_dev_mgr_show_ports() throws InvalidDevMgrOperation, org.apache.thrift.TException;

    public BmConfig bm_mgmt_get_info() throws org.apache.thrift.TException;

    public void bm_set_crc16_custom_parameters(int cxt_id, String calc_name, BmCrc16Config crc16_config) throws InvalidCrcOperation, org.apache.thrift.TException;

    public void bm_set_crc32_custom_parameters(int cxt_id, String calc_name, BmCrc32Config crc32_config) throws InvalidCrcOperation, org.apache.thrift.TException;

    public void bm_reset_state() throws org.apache.thrift.TException;

    public String bm_get_config() throws org.apache.thrift.TException;

    public String bm_get_config_md5() throws org.apache.thrift.TException;

    public String bm_serialize_state() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void bm_mt_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, String action_name, List<ByteBuffer> action_data, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_set_default_action(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_delete_entry(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_modify_entry(int cxt_id, String table_name, long entry_handle, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_add_member(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_delete_member(int cxt_id, String table_name, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_modify_member(int cxt_id, String table_name, int mbr_handle, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int mbr_handle, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_modify_entry(int cxt_id, String table_name, long entry_handle, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_delete_entry(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_set_default_member(int cxt_id, String table_name, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_ws_create_group(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_ws_delete_group(int cxt_id, String table_name, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_ws_add_member_to_group(int cxt_id, String table_name, int mbr_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_ws_remove_member_from_group(int cxt_id, String table_name, int mbr_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_ws_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int grp_handle, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_ws_modify_entry(int cxt_id, String table_name, long entry_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_ws_set_default_group(int cxt_id, String table_name, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_read_counter(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_reset_counters(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_write_counter(int cxt_id, String table_name, long entry_handle, BmCounterValue value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_set_meter_rates(int cxt_id, String table_name, long entry_handle, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_get_entries(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_get_default_entry(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_get_members(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mt_indirect_ws_get_groups(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_counter_read(int cxt_id, String counter_name, int index, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_counter_reset_all(int cxt_id, String counter_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_counter_write(int cxt_id, String counter_name, int index, BmCounterValue value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_learning_ack(int cxt_id, int list_id, long buffer_id, List<Integer> sample_ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_learning_ack_buffer(int cxt_id, int list_id, long buffer_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_learning_set_timeout(int cxt_id, int list_id, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_learning_set_buffer_size(int cxt_id, int list_id, int nb_samples, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_load_new_config(String config_str, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_swap_configs(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_meter_array_set_rates(int cxt_id, String meter_array_name, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_meter_set_rates(int cxt_id, String meter_array_name, int index, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_register_read(int cxt_id, String register_array_name, int idx, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_register_write(int cxt_id, String register_array_name, int index, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_register_write_range(int cxt_id, String register_array_name, int start_index, int end_index, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_register_reset(int cxt_id, String register_array_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_dev_mgr_add_port(String iface_name, int port_num, String pcap_path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_dev_mgr_remove_port(int port_num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_dev_mgr_show_ports(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mgmt_get_info(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_set_crc16_custom_parameters(int cxt_id, String calc_name, BmCrc16Config crc16_config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_set_crc32_custom_parameters(int cxt_id, String calc_name, BmCrc32Config crc32_config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_reset_state(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_get_config(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_get_config_md5(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_serialize_state(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long bm_mt_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, String action_name, List<ByteBuffer> action_data, BmAddEntryOptions options) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_add_entry(cxt_id, table_name, match_key, action_name, action_data, options);
      return recv_bm_mt_add_entry();
    }

    public void send_bm_mt_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, String action_name, List<ByteBuffer> action_data, BmAddEntryOptions options) throws org.apache.thrift.TException
    {
      bm_mt_add_entry_args args = new bm_mt_add_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setMatch_key(match_key);
      args.setAction_name(action_name);
      args.setAction_data(action_data);
      args.setOptions(options);
      sendBase("bm_mt_add_entry", args);
    }

    public long recv_bm_mt_add_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_add_entry_result result = new bm_mt_add_entry_result();
      receiveBase(result, "bm_mt_add_entry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_add_entry failed: unknown result");
    }

    public void bm_mt_set_default_action(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_set_default_action(cxt_id, table_name, action_name, action_data);
      recv_bm_mt_set_default_action();
    }

    public void send_bm_mt_set_default_action(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data) throws org.apache.thrift.TException
    {
      bm_mt_set_default_action_args args = new bm_mt_set_default_action_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setAction_name(action_name);
      args.setAction_data(action_data);
      sendBase("bm_mt_set_default_action", args);
    }

    public void recv_bm_mt_set_default_action() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_set_default_action_result result = new bm_mt_set_default_action_result();
      receiveBase(result, "bm_mt_set_default_action");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_delete_entry(int cxt_id, String table_name, long entry_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_delete_entry(cxt_id, table_name, entry_handle);
      recv_bm_mt_delete_entry();
    }

    public void send_bm_mt_delete_entry(int cxt_id, String table_name, long entry_handle) throws org.apache.thrift.TException
    {
      bm_mt_delete_entry_args args = new bm_mt_delete_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      sendBase("bm_mt_delete_entry", args);
    }

    public void recv_bm_mt_delete_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_delete_entry_result result = new bm_mt_delete_entry_result();
      receiveBase(result, "bm_mt_delete_entry");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_modify_entry(int cxt_id, String table_name, long entry_handle, String action_name, List<ByteBuffer> action_data) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_modify_entry(cxt_id, table_name, entry_handle, action_name, action_data);
      recv_bm_mt_modify_entry();
    }

    public void send_bm_mt_modify_entry(int cxt_id, String table_name, long entry_handle, String action_name, List<ByteBuffer> action_data) throws org.apache.thrift.TException
    {
      bm_mt_modify_entry_args args = new bm_mt_modify_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      args.setAction_name(action_name);
      args.setAction_data(action_data);
      sendBase("bm_mt_modify_entry", args);
    }

    public void recv_bm_mt_modify_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_modify_entry_result result = new bm_mt_modify_entry_result();
      receiveBase(result, "bm_mt_modify_entry");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_set_entry_ttl(cxt_id, table_name, entry_handle, timeout_ms);
      recv_bm_mt_set_entry_ttl();
    }

    public void send_bm_mt_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms) throws org.apache.thrift.TException
    {
      bm_mt_set_entry_ttl_args args = new bm_mt_set_entry_ttl_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      args.setTimeout_ms(timeout_ms);
      sendBase("bm_mt_set_entry_ttl", args);
    }

    public void recv_bm_mt_set_entry_ttl() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_set_entry_ttl_result result = new bm_mt_set_entry_ttl_result();
      receiveBase(result, "bm_mt_set_entry_ttl");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public int bm_mt_indirect_add_member(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_add_member(cxt_id, table_name, action_name, action_data);
      return recv_bm_mt_indirect_add_member();
    }

    public void send_bm_mt_indirect_add_member(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data) throws org.apache.thrift.TException
    {
      bm_mt_indirect_add_member_args args = new bm_mt_indirect_add_member_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setAction_name(action_name);
      args.setAction_data(action_data);
      sendBase("bm_mt_indirect_add_member", args);
    }

    public int recv_bm_mt_indirect_add_member() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_add_member_result result = new bm_mt_indirect_add_member_result();
      receiveBase(result, "bm_mt_indirect_add_member");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_indirect_add_member failed: unknown result");
    }

    public void bm_mt_indirect_delete_member(int cxt_id, String table_name, int mbr_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_delete_member(cxt_id, table_name, mbr_handle);
      recv_bm_mt_indirect_delete_member();
    }

    public void send_bm_mt_indirect_delete_member(int cxt_id, String table_name, int mbr_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_delete_member_args args = new bm_mt_indirect_delete_member_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setMbr_handle(mbr_handle);
      sendBase("bm_mt_indirect_delete_member", args);
    }

    public void recv_bm_mt_indirect_delete_member() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_delete_member_result result = new bm_mt_indirect_delete_member_result();
      receiveBase(result, "bm_mt_indirect_delete_member");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_indirect_modify_member(int cxt_id, String table_name, int mbr_handle, String action_name, List<ByteBuffer> action_data) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_modify_member(cxt_id, table_name, mbr_handle, action_name, action_data);
      recv_bm_mt_indirect_modify_member();
    }

    public void send_bm_mt_indirect_modify_member(int cxt_id, String table_name, int mbr_handle, String action_name, List<ByteBuffer> action_data) throws org.apache.thrift.TException
    {
      bm_mt_indirect_modify_member_args args = new bm_mt_indirect_modify_member_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setMbr_handle(mbr_handle);
      args.setAction_name(action_name);
      args.setAction_data(action_data);
      sendBase("bm_mt_indirect_modify_member", args);
    }

    public void recv_bm_mt_indirect_modify_member() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_modify_member_result result = new bm_mt_indirect_modify_member_result();
      receiveBase(result, "bm_mt_indirect_modify_member");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public long bm_mt_indirect_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int mbr_handle, BmAddEntryOptions options) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_add_entry(cxt_id, table_name, match_key, mbr_handle, options);
      return recv_bm_mt_indirect_add_entry();
    }

    public void send_bm_mt_indirect_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int mbr_handle, BmAddEntryOptions options) throws org.apache.thrift.TException
    {
      bm_mt_indirect_add_entry_args args = new bm_mt_indirect_add_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setMatch_key(match_key);
      args.setMbr_handle(mbr_handle);
      args.setOptions(options);
      sendBase("bm_mt_indirect_add_entry", args);
    }

    public long recv_bm_mt_indirect_add_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_add_entry_result result = new bm_mt_indirect_add_entry_result();
      receiveBase(result, "bm_mt_indirect_add_entry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_indirect_add_entry failed: unknown result");
    }

    public void bm_mt_indirect_modify_entry(int cxt_id, String table_name, long entry_handle, int mbr_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_modify_entry(cxt_id, table_name, entry_handle, mbr_handle);
      recv_bm_mt_indirect_modify_entry();
    }

    public void send_bm_mt_indirect_modify_entry(int cxt_id, String table_name, long entry_handle, int mbr_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_modify_entry_args args = new bm_mt_indirect_modify_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      args.setMbr_handle(mbr_handle);
      sendBase("bm_mt_indirect_modify_entry", args);
    }

    public void recv_bm_mt_indirect_modify_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_modify_entry_result result = new bm_mt_indirect_modify_entry_result();
      receiveBase(result, "bm_mt_indirect_modify_entry");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_indirect_delete_entry(int cxt_id, String table_name, long entry_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_delete_entry(cxt_id, table_name, entry_handle);
      recv_bm_mt_indirect_delete_entry();
    }

    public void send_bm_mt_indirect_delete_entry(int cxt_id, String table_name, long entry_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_delete_entry_args args = new bm_mt_indirect_delete_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      sendBase("bm_mt_indirect_delete_entry", args);
    }

    public void recv_bm_mt_indirect_delete_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_delete_entry_result result = new bm_mt_indirect_delete_entry_result();
      receiveBase(result, "bm_mt_indirect_delete_entry");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_indirect_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_set_entry_ttl(cxt_id, table_name, entry_handle, timeout_ms);
      recv_bm_mt_indirect_set_entry_ttl();
    }

    public void send_bm_mt_indirect_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms) throws org.apache.thrift.TException
    {
      bm_mt_indirect_set_entry_ttl_args args = new bm_mt_indirect_set_entry_ttl_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      args.setTimeout_ms(timeout_ms);
      sendBase("bm_mt_indirect_set_entry_ttl", args);
    }

    public void recv_bm_mt_indirect_set_entry_ttl() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_set_entry_ttl_result result = new bm_mt_indirect_set_entry_ttl_result();
      receiveBase(result, "bm_mt_indirect_set_entry_ttl");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_indirect_set_default_member(int cxt_id, String table_name, int mbr_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_set_default_member(cxt_id, table_name, mbr_handle);
      recv_bm_mt_indirect_set_default_member();
    }

    public void send_bm_mt_indirect_set_default_member(int cxt_id, String table_name, int mbr_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_set_default_member_args args = new bm_mt_indirect_set_default_member_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setMbr_handle(mbr_handle);
      sendBase("bm_mt_indirect_set_default_member", args);
    }

    public void recv_bm_mt_indirect_set_default_member() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_set_default_member_result result = new bm_mt_indirect_set_default_member_result();
      receiveBase(result, "bm_mt_indirect_set_default_member");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public int bm_mt_indirect_ws_create_group(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_ws_create_group(cxt_id, table_name);
      return recv_bm_mt_indirect_ws_create_group();
    }

    public void send_bm_mt_indirect_ws_create_group(int cxt_id, String table_name) throws org.apache.thrift.TException
    {
      bm_mt_indirect_ws_create_group_args args = new bm_mt_indirect_ws_create_group_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      sendBase("bm_mt_indirect_ws_create_group", args);
    }

    public int recv_bm_mt_indirect_ws_create_group() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_ws_create_group_result result = new bm_mt_indirect_ws_create_group_result();
      receiveBase(result, "bm_mt_indirect_ws_create_group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_indirect_ws_create_group failed: unknown result");
    }

    public void bm_mt_indirect_ws_delete_group(int cxt_id, String table_name, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_ws_delete_group(cxt_id, table_name, grp_handle);
      recv_bm_mt_indirect_ws_delete_group();
    }

    public void send_bm_mt_indirect_ws_delete_group(int cxt_id, String table_name, int grp_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_ws_delete_group_args args = new bm_mt_indirect_ws_delete_group_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setGrp_handle(grp_handle);
      sendBase("bm_mt_indirect_ws_delete_group", args);
    }

    public void recv_bm_mt_indirect_ws_delete_group() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_ws_delete_group_result result = new bm_mt_indirect_ws_delete_group_result();
      receiveBase(result, "bm_mt_indirect_ws_delete_group");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_indirect_ws_add_member_to_group(int cxt_id, String table_name, int mbr_handle, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_ws_add_member_to_group(cxt_id, table_name, mbr_handle, grp_handle);
      recv_bm_mt_indirect_ws_add_member_to_group();
    }

    public void send_bm_mt_indirect_ws_add_member_to_group(int cxt_id, String table_name, int mbr_handle, int grp_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_ws_add_member_to_group_args args = new bm_mt_indirect_ws_add_member_to_group_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setMbr_handle(mbr_handle);
      args.setGrp_handle(grp_handle);
      sendBase("bm_mt_indirect_ws_add_member_to_group", args);
    }

    public void recv_bm_mt_indirect_ws_add_member_to_group() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_ws_add_member_to_group_result result = new bm_mt_indirect_ws_add_member_to_group_result();
      receiveBase(result, "bm_mt_indirect_ws_add_member_to_group");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_indirect_ws_remove_member_from_group(int cxt_id, String table_name, int mbr_handle, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_ws_remove_member_from_group(cxt_id, table_name, mbr_handle, grp_handle);
      recv_bm_mt_indirect_ws_remove_member_from_group();
    }

    public void send_bm_mt_indirect_ws_remove_member_from_group(int cxt_id, String table_name, int mbr_handle, int grp_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_ws_remove_member_from_group_args args = new bm_mt_indirect_ws_remove_member_from_group_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setMbr_handle(mbr_handle);
      args.setGrp_handle(grp_handle);
      sendBase("bm_mt_indirect_ws_remove_member_from_group", args);
    }

    public void recv_bm_mt_indirect_ws_remove_member_from_group() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_ws_remove_member_from_group_result result = new bm_mt_indirect_ws_remove_member_from_group_result();
      receiveBase(result, "bm_mt_indirect_ws_remove_member_from_group");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public long bm_mt_indirect_ws_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int grp_handle, BmAddEntryOptions options) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_ws_add_entry(cxt_id, table_name, match_key, grp_handle, options);
      return recv_bm_mt_indirect_ws_add_entry();
    }

    public void send_bm_mt_indirect_ws_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int grp_handle, BmAddEntryOptions options) throws org.apache.thrift.TException
    {
      bm_mt_indirect_ws_add_entry_args args = new bm_mt_indirect_ws_add_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setMatch_key(match_key);
      args.setGrp_handle(grp_handle);
      args.setOptions(options);
      sendBase("bm_mt_indirect_ws_add_entry", args);
    }

    public long recv_bm_mt_indirect_ws_add_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_ws_add_entry_result result = new bm_mt_indirect_ws_add_entry_result();
      receiveBase(result, "bm_mt_indirect_ws_add_entry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_indirect_ws_add_entry failed: unknown result");
    }

    public void bm_mt_indirect_ws_modify_entry(int cxt_id, String table_name, long entry_handle, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_ws_modify_entry(cxt_id, table_name, entry_handle, grp_handle);
      recv_bm_mt_indirect_ws_modify_entry();
    }

    public void send_bm_mt_indirect_ws_modify_entry(int cxt_id, String table_name, long entry_handle, int grp_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_ws_modify_entry_args args = new bm_mt_indirect_ws_modify_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      args.setGrp_handle(grp_handle);
      sendBase("bm_mt_indirect_ws_modify_entry", args);
    }

    public void recv_bm_mt_indirect_ws_modify_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_ws_modify_entry_result result = new bm_mt_indirect_ws_modify_entry_result();
      receiveBase(result, "bm_mt_indirect_ws_modify_entry");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_indirect_ws_set_default_group(int cxt_id, String table_name, int grp_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_ws_set_default_group(cxt_id, table_name, grp_handle);
      recv_bm_mt_indirect_ws_set_default_group();
    }

    public void send_bm_mt_indirect_ws_set_default_group(int cxt_id, String table_name, int grp_handle) throws org.apache.thrift.TException
    {
      bm_mt_indirect_ws_set_default_group_args args = new bm_mt_indirect_ws_set_default_group_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setGrp_handle(grp_handle);
      sendBase("bm_mt_indirect_ws_set_default_group", args);
    }

    public void recv_bm_mt_indirect_ws_set_default_group() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_ws_set_default_group_result result = new bm_mt_indirect_ws_set_default_group_result();
      receiveBase(result, "bm_mt_indirect_ws_set_default_group");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public BmCounterValue bm_mt_read_counter(int cxt_id, String table_name, long entry_handle) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_read_counter(cxt_id, table_name, entry_handle);
      return recv_bm_mt_read_counter();
    }

    public void send_bm_mt_read_counter(int cxt_id, String table_name, long entry_handle) throws org.apache.thrift.TException
    {
      bm_mt_read_counter_args args = new bm_mt_read_counter_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      sendBase("bm_mt_read_counter", args);
    }

    public BmCounterValue recv_bm_mt_read_counter() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_read_counter_result result = new bm_mt_read_counter_result();
      receiveBase(result, "bm_mt_read_counter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_read_counter failed: unknown result");
    }

    public void bm_mt_reset_counters(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_reset_counters(cxt_id, table_name);
      recv_bm_mt_reset_counters();
    }

    public void send_bm_mt_reset_counters(int cxt_id, String table_name) throws org.apache.thrift.TException
    {
      bm_mt_reset_counters_args args = new bm_mt_reset_counters_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      sendBase("bm_mt_reset_counters", args);
    }

    public void recv_bm_mt_reset_counters() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_reset_counters_result result = new bm_mt_reset_counters_result();
      receiveBase(result, "bm_mt_reset_counters");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_write_counter(int cxt_id, String table_name, long entry_handle, BmCounterValue value) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_write_counter(cxt_id, table_name, entry_handle, value);
      recv_bm_mt_write_counter();
    }

    public void send_bm_mt_write_counter(int cxt_id, String table_name, long entry_handle, BmCounterValue value) throws org.apache.thrift.TException
    {
      bm_mt_write_counter_args args = new bm_mt_write_counter_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      args.setValue(value);
      sendBase("bm_mt_write_counter", args);
    }

    public void recv_bm_mt_write_counter() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_write_counter_result result = new bm_mt_write_counter_result();
      receiveBase(result, "bm_mt_write_counter");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mt_set_meter_rates(int cxt_id, String table_name, long entry_handle, List<BmMeterRateConfig> rates) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_set_meter_rates(cxt_id, table_name, entry_handle, rates);
      recv_bm_mt_set_meter_rates();
    }

    public void send_bm_mt_set_meter_rates(int cxt_id, String table_name, long entry_handle, List<BmMeterRateConfig> rates) throws org.apache.thrift.TException
    {
      bm_mt_set_meter_rates_args args = new bm_mt_set_meter_rates_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      args.setEntry_handle(entry_handle);
      args.setRates(rates);
      sendBase("bm_mt_set_meter_rates", args);
    }

    public void recv_bm_mt_set_meter_rates() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_set_meter_rates_result result = new bm_mt_set_meter_rates_result();
      receiveBase(result, "bm_mt_set_meter_rates");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public List<BmMtEntry> bm_mt_get_entries(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_get_entries(cxt_id, table_name);
      return recv_bm_mt_get_entries();
    }

    public void send_bm_mt_get_entries(int cxt_id, String table_name) throws org.apache.thrift.TException
    {
      bm_mt_get_entries_args args = new bm_mt_get_entries_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      sendBase("bm_mt_get_entries", args);
    }

    public List<BmMtEntry> recv_bm_mt_get_entries() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_get_entries_result result = new bm_mt_get_entries_result();
      receiveBase(result, "bm_mt_get_entries");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_get_entries failed: unknown result");
    }

    public BmActionEntry bm_mt_get_default_entry(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_get_default_entry(cxt_id, table_name);
      return recv_bm_mt_get_default_entry();
    }

    public void send_bm_mt_get_default_entry(int cxt_id, String table_name) throws org.apache.thrift.TException
    {
      bm_mt_get_default_entry_args args = new bm_mt_get_default_entry_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      sendBase("bm_mt_get_default_entry", args);
    }

    public BmActionEntry recv_bm_mt_get_default_entry() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_get_default_entry_result result = new bm_mt_get_default_entry_result();
      receiveBase(result, "bm_mt_get_default_entry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_get_default_entry failed: unknown result");
    }

    public List<BmMtIndirectMember> bm_mt_indirect_get_members(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_get_members(cxt_id, table_name);
      return recv_bm_mt_indirect_get_members();
    }

    public void send_bm_mt_indirect_get_members(int cxt_id, String table_name) throws org.apache.thrift.TException
    {
      bm_mt_indirect_get_members_args args = new bm_mt_indirect_get_members_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      sendBase("bm_mt_indirect_get_members", args);
    }

    public List<BmMtIndirectMember> recv_bm_mt_indirect_get_members() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_get_members_result result = new bm_mt_indirect_get_members_result();
      receiveBase(result, "bm_mt_indirect_get_members");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_indirect_get_members failed: unknown result");
    }

    public List<BmMtIndirectWsGroup> bm_mt_indirect_ws_get_groups(int cxt_id, String table_name) throws InvalidTableOperation, org.apache.thrift.TException
    {
      send_bm_mt_indirect_ws_get_groups(cxt_id, table_name);
      return recv_bm_mt_indirect_ws_get_groups();
    }

    public void send_bm_mt_indirect_ws_get_groups(int cxt_id, String table_name) throws org.apache.thrift.TException
    {
      bm_mt_indirect_ws_get_groups_args args = new bm_mt_indirect_ws_get_groups_args();
      args.setCxt_id(cxt_id);
      args.setTable_name(table_name);
      sendBase("bm_mt_indirect_ws_get_groups", args);
    }

    public List<BmMtIndirectWsGroup> recv_bm_mt_indirect_ws_get_groups() throws InvalidTableOperation, org.apache.thrift.TException
    {
      bm_mt_indirect_ws_get_groups_result result = new bm_mt_indirect_ws_get_groups_result();
      receiveBase(result, "bm_mt_indirect_ws_get_groups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mt_indirect_ws_get_groups failed: unknown result");
    }

    public BmCounterValue bm_counter_read(int cxt_id, String counter_name, int index) throws InvalidCounterOperation, org.apache.thrift.TException
    {
      send_bm_counter_read(cxt_id, counter_name, index);
      return recv_bm_counter_read();
    }

    public void send_bm_counter_read(int cxt_id, String counter_name, int index) throws org.apache.thrift.TException
    {
      bm_counter_read_args args = new bm_counter_read_args();
      args.setCxt_id(cxt_id);
      args.setCounter_name(counter_name);
      args.setIndex(index);
      sendBase("bm_counter_read", args);
    }

    public BmCounterValue recv_bm_counter_read() throws InvalidCounterOperation, org.apache.thrift.TException
    {
      bm_counter_read_result result = new bm_counter_read_result();
      receiveBase(result, "bm_counter_read");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_counter_read failed: unknown result");
    }

    public void bm_counter_reset_all(int cxt_id, String counter_name) throws InvalidCounterOperation, org.apache.thrift.TException
    {
      send_bm_counter_reset_all(cxt_id, counter_name);
      recv_bm_counter_reset_all();
    }

    public void send_bm_counter_reset_all(int cxt_id, String counter_name) throws org.apache.thrift.TException
    {
      bm_counter_reset_all_args args = new bm_counter_reset_all_args();
      args.setCxt_id(cxt_id);
      args.setCounter_name(counter_name);
      sendBase("bm_counter_reset_all", args);
    }

    public void recv_bm_counter_reset_all() throws InvalidCounterOperation, org.apache.thrift.TException
    {
      bm_counter_reset_all_result result = new bm_counter_reset_all_result();
      receiveBase(result, "bm_counter_reset_all");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_counter_write(int cxt_id, String counter_name, int index, BmCounterValue value) throws InvalidCounterOperation, org.apache.thrift.TException
    {
      send_bm_counter_write(cxt_id, counter_name, index, value);
      recv_bm_counter_write();
    }

    public void send_bm_counter_write(int cxt_id, String counter_name, int index, BmCounterValue value) throws org.apache.thrift.TException
    {
      bm_counter_write_args args = new bm_counter_write_args();
      args.setCxt_id(cxt_id);
      args.setCounter_name(counter_name);
      args.setIndex(index);
      args.setValue(value);
      sendBase("bm_counter_write", args);
    }

    public void recv_bm_counter_write() throws InvalidCounterOperation, org.apache.thrift.TException
    {
      bm_counter_write_result result = new bm_counter_write_result();
      receiveBase(result, "bm_counter_write");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_learning_ack(int cxt_id, int list_id, long buffer_id, List<Integer> sample_ids) throws InvalidLearnOperation, org.apache.thrift.TException
    {
      send_bm_learning_ack(cxt_id, list_id, buffer_id, sample_ids);
      recv_bm_learning_ack();
    }

    public void send_bm_learning_ack(int cxt_id, int list_id, long buffer_id, List<Integer> sample_ids) throws org.apache.thrift.TException
    {
      bm_learning_ack_args args = new bm_learning_ack_args();
      args.setCxt_id(cxt_id);
      args.setList_id(list_id);
      args.setBuffer_id(buffer_id);
      args.setSample_ids(sample_ids);
      sendBase("bm_learning_ack", args);
    }

    public void recv_bm_learning_ack() throws InvalidLearnOperation, org.apache.thrift.TException
    {
      bm_learning_ack_result result = new bm_learning_ack_result();
      receiveBase(result, "bm_learning_ack");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_learning_ack_buffer(int cxt_id, int list_id, long buffer_id) throws InvalidLearnOperation, org.apache.thrift.TException
    {
      send_bm_learning_ack_buffer(cxt_id, list_id, buffer_id);
      recv_bm_learning_ack_buffer();
    }

    public void send_bm_learning_ack_buffer(int cxt_id, int list_id, long buffer_id) throws org.apache.thrift.TException
    {
      bm_learning_ack_buffer_args args = new bm_learning_ack_buffer_args();
      args.setCxt_id(cxt_id);
      args.setList_id(list_id);
      args.setBuffer_id(buffer_id);
      sendBase("bm_learning_ack_buffer", args);
    }

    public void recv_bm_learning_ack_buffer() throws InvalidLearnOperation, org.apache.thrift.TException
    {
      bm_learning_ack_buffer_result result = new bm_learning_ack_buffer_result();
      receiveBase(result, "bm_learning_ack_buffer");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_learning_set_timeout(int cxt_id, int list_id, int timeout_ms) throws InvalidLearnOperation, org.apache.thrift.TException
    {
      send_bm_learning_set_timeout(cxt_id, list_id, timeout_ms);
      recv_bm_learning_set_timeout();
    }

    public void send_bm_learning_set_timeout(int cxt_id, int list_id, int timeout_ms) throws org.apache.thrift.TException
    {
      bm_learning_set_timeout_args args = new bm_learning_set_timeout_args();
      args.setCxt_id(cxt_id);
      args.setList_id(list_id);
      args.setTimeout_ms(timeout_ms);
      sendBase("bm_learning_set_timeout", args);
    }

    public void recv_bm_learning_set_timeout() throws InvalidLearnOperation, org.apache.thrift.TException
    {
      bm_learning_set_timeout_result result = new bm_learning_set_timeout_result();
      receiveBase(result, "bm_learning_set_timeout");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_learning_set_buffer_size(int cxt_id, int list_id, int nb_samples) throws InvalidLearnOperation, org.apache.thrift.TException
    {
      send_bm_learning_set_buffer_size(cxt_id, list_id, nb_samples);
      recv_bm_learning_set_buffer_size();
    }

    public void send_bm_learning_set_buffer_size(int cxt_id, int list_id, int nb_samples) throws org.apache.thrift.TException
    {
      bm_learning_set_buffer_size_args args = new bm_learning_set_buffer_size_args();
      args.setCxt_id(cxt_id);
      args.setList_id(list_id);
      args.setNb_samples(nb_samples);
      sendBase("bm_learning_set_buffer_size", args);
    }

    public void recv_bm_learning_set_buffer_size() throws InvalidLearnOperation, org.apache.thrift.TException
    {
      bm_learning_set_buffer_size_result result = new bm_learning_set_buffer_size_result();
      receiveBase(result, "bm_learning_set_buffer_size");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_load_new_config(String config_str) throws InvalidSwapOperation, org.apache.thrift.TException
    {
      send_bm_load_new_config(config_str);
      recv_bm_load_new_config();
    }

    public void send_bm_load_new_config(String config_str) throws org.apache.thrift.TException
    {
      bm_load_new_config_args args = new bm_load_new_config_args();
      args.setConfig_str(config_str);
      sendBase("bm_load_new_config", args);
    }

    public void recv_bm_load_new_config() throws InvalidSwapOperation, org.apache.thrift.TException
    {
      bm_load_new_config_result result = new bm_load_new_config_result();
      receiveBase(result, "bm_load_new_config");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_swap_configs() throws InvalidSwapOperation, org.apache.thrift.TException
    {
      send_bm_swap_configs();
      recv_bm_swap_configs();
    }

    public void send_bm_swap_configs() throws org.apache.thrift.TException
    {
      bm_swap_configs_args args = new bm_swap_configs_args();
      sendBase("bm_swap_configs", args);
    }

    public void recv_bm_swap_configs() throws InvalidSwapOperation, org.apache.thrift.TException
    {
      bm_swap_configs_result result = new bm_swap_configs_result();
      receiveBase(result, "bm_swap_configs");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_meter_array_set_rates(int cxt_id, String meter_array_name, List<BmMeterRateConfig> rates) throws InvalidMeterOperation, org.apache.thrift.TException
    {
      send_bm_meter_array_set_rates(cxt_id, meter_array_name, rates);
      recv_bm_meter_array_set_rates();
    }

    public void send_bm_meter_array_set_rates(int cxt_id, String meter_array_name, List<BmMeterRateConfig> rates) throws org.apache.thrift.TException
    {
      bm_meter_array_set_rates_args args = new bm_meter_array_set_rates_args();
      args.setCxt_id(cxt_id);
      args.setMeter_array_name(meter_array_name);
      args.setRates(rates);
      sendBase("bm_meter_array_set_rates", args);
    }

    public void recv_bm_meter_array_set_rates() throws InvalidMeterOperation, org.apache.thrift.TException
    {
      bm_meter_array_set_rates_result result = new bm_meter_array_set_rates_result();
      receiveBase(result, "bm_meter_array_set_rates");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_meter_set_rates(int cxt_id, String meter_array_name, int index, List<BmMeterRateConfig> rates) throws InvalidMeterOperation, org.apache.thrift.TException
    {
      send_bm_meter_set_rates(cxt_id, meter_array_name, index, rates);
      recv_bm_meter_set_rates();
    }

    public void send_bm_meter_set_rates(int cxt_id, String meter_array_name, int index, List<BmMeterRateConfig> rates) throws org.apache.thrift.TException
    {
      bm_meter_set_rates_args args = new bm_meter_set_rates_args();
      args.setCxt_id(cxt_id);
      args.setMeter_array_name(meter_array_name);
      args.setIndex(index);
      args.setRates(rates);
      sendBase("bm_meter_set_rates", args);
    }

    public void recv_bm_meter_set_rates() throws InvalidMeterOperation, org.apache.thrift.TException
    {
      bm_meter_set_rates_result result = new bm_meter_set_rates_result();
      receiveBase(result, "bm_meter_set_rates");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public long bm_register_read(int cxt_id, String register_array_name, int idx) throws InvalidRegisterOperation, org.apache.thrift.TException
    {
      send_bm_register_read(cxt_id, register_array_name, idx);
      return recv_bm_register_read();
    }

    public void send_bm_register_read(int cxt_id, String register_array_name, int idx) throws org.apache.thrift.TException
    {
      bm_register_read_args args = new bm_register_read_args();
      args.setCxt_id(cxt_id);
      args.setRegister_array_name(register_array_name);
      args.setIdx(idx);
      sendBase("bm_register_read", args);
    }

    public long recv_bm_register_read() throws InvalidRegisterOperation, org.apache.thrift.TException
    {
      bm_register_read_result result = new bm_register_read_result();
      receiveBase(result, "bm_register_read");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_register_read failed: unknown result");
    }

    public void bm_register_write(int cxt_id, String register_array_name, int index, long value) throws InvalidRegisterOperation, org.apache.thrift.TException
    {
      send_bm_register_write(cxt_id, register_array_name, index, value);
      recv_bm_register_write();
    }

    public void send_bm_register_write(int cxt_id, String register_array_name, int index, long value) throws org.apache.thrift.TException
    {
      bm_register_write_args args = new bm_register_write_args();
      args.setCxt_id(cxt_id);
      args.setRegister_array_name(register_array_name);
      args.setIndex(index);
      args.setValue(value);
      sendBase("bm_register_write", args);
    }

    public void recv_bm_register_write() throws InvalidRegisterOperation, org.apache.thrift.TException
    {
      bm_register_write_result result = new bm_register_write_result();
      receiveBase(result, "bm_register_write");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_register_write_range(int cxt_id, String register_array_name, int start_index, int end_index, long value) throws InvalidRegisterOperation, org.apache.thrift.TException
    {
      send_bm_register_write_range(cxt_id, register_array_name, start_index, end_index, value);
      recv_bm_register_write_range();
    }

    public void send_bm_register_write_range(int cxt_id, String register_array_name, int start_index, int end_index, long value) throws org.apache.thrift.TException
    {
      bm_register_write_range_args args = new bm_register_write_range_args();
      args.setCxt_id(cxt_id);
      args.setRegister_array_name(register_array_name);
      args.setStart_index(start_index);
      args.setEnd_index(end_index);
      args.setValue(value);
      sendBase("bm_register_write_range", args);
    }

    public void recv_bm_register_write_range() throws InvalidRegisterOperation, org.apache.thrift.TException
    {
      bm_register_write_range_result result = new bm_register_write_range_result();
      receiveBase(result, "bm_register_write_range");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_register_reset(int cxt_id, String register_array_name) throws InvalidRegisterOperation, org.apache.thrift.TException
    {
      send_bm_register_reset(cxt_id, register_array_name);
      recv_bm_register_reset();
    }

    public void send_bm_register_reset(int cxt_id, String register_array_name) throws org.apache.thrift.TException
    {
      bm_register_reset_args args = new bm_register_reset_args();
      args.setCxt_id(cxt_id);
      args.setRegister_array_name(register_array_name);
      sendBase("bm_register_reset", args);
    }

    public void recv_bm_register_reset() throws InvalidRegisterOperation, org.apache.thrift.TException
    {
      bm_register_reset_result result = new bm_register_reset_result();
      receiveBase(result, "bm_register_reset");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_dev_mgr_add_port(String iface_name, int port_num, String pcap_path) throws InvalidDevMgrOperation, org.apache.thrift.TException
    {
      send_bm_dev_mgr_add_port(iface_name, port_num, pcap_path);
      recv_bm_dev_mgr_add_port();
    }

    public void send_bm_dev_mgr_add_port(String iface_name, int port_num, String pcap_path) throws org.apache.thrift.TException
    {
      bm_dev_mgr_add_port_args args = new bm_dev_mgr_add_port_args();
      args.setIface_name(iface_name);
      args.setPort_num(port_num);
      args.setPcap_path(pcap_path);
      sendBase("bm_dev_mgr_add_port", args);
    }

    public void recv_bm_dev_mgr_add_port() throws InvalidDevMgrOperation, org.apache.thrift.TException
    {
      bm_dev_mgr_add_port_result result = new bm_dev_mgr_add_port_result();
      receiveBase(result, "bm_dev_mgr_add_port");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_dev_mgr_remove_port(int port_num) throws InvalidDevMgrOperation, org.apache.thrift.TException
    {
      send_bm_dev_mgr_remove_port(port_num);
      recv_bm_dev_mgr_remove_port();
    }

    public void send_bm_dev_mgr_remove_port(int port_num) throws org.apache.thrift.TException
    {
      bm_dev_mgr_remove_port_args args = new bm_dev_mgr_remove_port_args();
      args.setPort_num(port_num);
      sendBase("bm_dev_mgr_remove_port", args);
    }

    public void recv_bm_dev_mgr_remove_port() throws InvalidDevMgrOperation, org.apache.thrift.TException
    {
      bm_dev_mgr_remove_port_result result = new bm_dev_mgr_remove_port_result();
      receiveBase(result, "bm_dev_mgr_remove_port");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public List<DevMgrPortInfo> bm_dev_mgr_show_ports() throws InvalidDevMgrOperation, org.apache.thrift.TException
    {
      send_bm_dev_mgr_show_ports();
      return recv_bm_dev_mgr_show_ports();
    }

    public void send_bm_dev_mgr_show_ports() throws org.apache.thrift.TException
    {
      bm_dev_mgr_show_ports_args args = new bm_dev_mgr_show_ports_args();
      sendBase("bm_dev_mgr_show_ports", args);
    }

    public List<DevMgrPortInfo> recv_bm_dev_mgr_show_ports() throws InvalidDevMgrOperation, org.apache.thrift.TException
    {
      bm_dev_mgr_show_ports_result result = new bm_dev_mgr_show_ports_result();
      receiveBase(result, "bm_dev_mgr_show_ports");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_dev_mgr_show_ports failed: unknown result");
    }

    public BmConfig bm_mgmt_get_info() throws org.apache.thrift.TException
    {
      send_bm_mgmt_get_info();
      return recv_bm_mgmt_get_info();
    }

    public void send_bm_mgmt_get_info() throws org.apache.thrift.TException
    {
      bm_mgmt_get_info_args args = new bm_mgmt_get_info_args();
      sendBase("bm_mgmt_get_info", args);
    }

    public BmConfig recv_bm_mgmt_get_info() throws org.apache.thrift.TException
    {
      bm_mgmt_get_info_result result = new bm_mgmt_get_info_result();
      receiveBase(result, "bm_mgmt_get_info");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mgmt_get_info failed: unknown result");
    }

    public void bm_set_crc16_custom_parameters(int cxt_id, String calc_name, BmCrc16Config crc16_config) throws InvalidCrcOperation, org.apache.thrift.TException
    {
      send_bm_set_crc16_custom_parameters(cxt_id, calc_name, crc16_config);
      recv_bm_set_crc16_custom_parameters();
    }

    public void send_bm_set_crc16_custom_parameters(int cxt_id, String calc_name, BmCrc16Config crc16_config) throws org.apache.thrift.TException
    {
      bm_set_crc16_custom_parameters_args args = new bm_set_crc16_custom_parameters_args();
      args.setCxt_id(cxt_id);
      args.setCalc_name(calc_name);
      args.setCrc16_config(crc16_config);
      sendBase("bm_set_crc16_custom_parameters", args);
    }

    public void recv_bm_set_crc16_custom_parameters() throws InvalidCrcOperation, org.apache.thrift.TException
    {
      bm_set_crc16_custom_parameters_result result = new bm_set_crc16_custom_parameters_result();
      receiveBase(result, "bm_set_crc16_custom_parameters");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_set_crc32_custom_parameters(int cxt_id, String calc_name, BmCrc32Config crc32_config) throws InvalidCrcOperation, org.apache.thrift.TException
    {
      send_bm_set_crc32_custom_parameters(cxt_id, calc_name, crc32_config);
      recv_bm_set_crc32_custom_parameters();
    }

    public void send_bm_set_crc32_custom_parameters(int cxt_id, String calc_name, BmCrc32Config crc32_config) throws org.apache.thrift.TException
    {
      bm_set_crc32_custom_parameters_args args = new bm_set_crc32_custom_parameters_args();
      args.setCxt_id(cxt_id);
      args.setCalc_name(calc_name);
      args.setCrc32_config(crc32_config);
      sendBase("bm_set_crc32_custom_parameters", args);
    }

    public void recv_bm_set_crc32_custom_parameters() throws InvalidCrcOperation, org.apache.thrift.TException
    {
      bm_set_crc32_custom_parameters_result result = new bm_set_crc32_custom_parameters_result();
      receiveBase(result, "bm_set_crc32_custom_parameters");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_reset_state() throws org.apache.thrift.TException
    {
      send_bm_reset_state();
      recv_bm_reset_state();
    }

    public void send_bm_reset_state() throws org.apache.thrift.TException
    {
      bm_reset_state_args args = new bm_reset_state_args();
      sendBase("bm_reset_state", args);
    }

    public void recv_bm_reset_state() throws org.apache.thrift.TException
    {
      bm_reset_state_result result = new bm_reset_state_result();
      receiveBase(result, "bm_reset_state");
      return;
    }

    public String bm_get_config() throws org.apache.thrift.TException
    {
      send_bm_get_config();
      return recv_bm_get_config();
    }

    public void send_bm_get_config() throws org.apache.thrift.TException
    {
      bm_get_config_args args = new bm_get_config_args();
      sendBase("bm_get_config", args);
    }

    public String recv_bm_get_config() throws org.apache.thrift.TException
    {
      bm_get_config_result result = new bm_get_config_result();
      receiveBase(result, "bm_get_config");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_get_config failed: unknown result");
    }

    public String bm_get_config_md5() throws org.apache.thrift.TException
    {
      send_bm_get_config_md5();
      return recv_bm_get_config_md5();
    }

    public void send_bm_get_config_md5() throws org.apache.thrift.TException
    {
      bm_get_config_md5_args args = new bm_get_config_md5_args();
      sendBase("bm_get_config_md5", args);
    }

    public String recv_bm_get_config_md5() throws org.apache.thrift.TException
    {
      bm_get_config_md5_result result = new bm_get_config_md5_result();
      receiveBase(result, "bm_get_config_md5");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_get_config_md5 failed: unknown result");
    }

    public String bm_serialize_state() throws org.apache.thrift.TException
    {
      send_bm_serialize_state();
      return recv_bm_serialize_state();
    }

    public void send_bm_serialize_state() throws org.apache.thrift.TException
    {
      bm_serialize_state_args args = new bm_serialize_state_args();
      sendBase("bm_serialize_state", args);
    }

    public String recv_bm_serialize_state() throws org.apache.thrift.TException
    {
      bm_serialize_state_result result = new bm_serialize_state_result();
      receiveBase(result, "bm_serialize_state");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_serialize_state failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void bm_mt_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, String action_name, List<ByteBuffer> action_data, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_add_entry_call method_call = new bm_mt_add_entry_call(cxt_id, table_name, match_key, action_name, action_data, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_add_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private List<BmMatchParam> match_key;
      private String action_name;
      private List<ByteBuffer> action_data;
      private BmAddEntryOptions options;
      public bm_mt_add_entry_call(int cxt_id, String table_name, List<BmMatchParam> match_key, String action_name, List<ByteBuffer> action_data, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.match_key = match_key;
        this.action_name = action_name;
        this.action_data = action_data;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_add_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_add_entry_args args = new bm_mt_add_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setMatch_key(match_key);
        args.setAction_name(action_name);
        args.setAction_data(action_data);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_add_entry();
      }
    }

    public void bm_mt_set_default_action(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_set_default_action_call method_call = new bm_mt_set_default_action_call(cxt_id, table_name, action_name, action_data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_set_default_action_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private String action_name;
      private List<ByteBuffer> action_data;
      public bm_mt_set_default_action_call(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.action_name = action_name;
        this.action_data = action_data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_set_default_action", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_set_default_action_args args = new bm_mt_set_default_action_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setAction_name(action_name);
        args.setAction_data(action_data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_set_default_action();
      }
    }

    public void bm_mt_delete_entry(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_delete_entry_call method_call = new bm_mt_delete_entry_call(cxt_id, table_name, entry_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_delete_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      public bm_mt_delete_entry_call(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_delete_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_delete_entry_args args = new bm_mt_delete_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_delete_entry();
      }
    }

    public void bm_mt_modify_entry(int cxt_id, String table_name, long entry_handle, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_modify_entry_call method_call = new bm_mt_modify_entry_call(cxt_id, table_name, entry_handle, action_name, action_data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_modify_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      private String action_name;
      private List<ByteBuffer> action_data;
      public bm_mt_modify_entry_call(int cxt_id, String table_name, long entry_handle, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
        this.action_name = action_name;
        this.action_data = action_data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_modify_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_modify_entry_args args = new bm_mt_modify_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.setAction_name(action_name);
        args.setAction_data(action_data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_modify_entry();
      }
    }

    public void bm_mt_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_set_entry_ttl_call method_call = new bm_mt_set_entry_ttl_call(cxt_id, table_name, entry_handle, timeout_ms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_set_entry_ttl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      private int timeout_ms;
      public bm_mt_set_entry_ttl_call(int cxt_id, String table_name, long entry_handle, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
        this.timeout_ms = timeout_ms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_set_entry_ttl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_set_entry_ttl_args args = new bm_mt_set_entry_ttl_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.setTimeout_ms(timeout_ms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_set_entry_ttl();
      }
    }

    public void bm_mt_indirect_add_member(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_add_member_call method_call = new bm_mt_indirect_add_member_call(cxt_id, table_name, action_name, action_data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_add_member_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private String action_name;
      private List<ByteBuffer> action_data;
      public bm_mt_indirect_add_member_call(int cxt_id, String table_name, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.action_name = action_name;
        this.action_data = action_data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_add_member", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_add_member_args args = new bm_mt_indirect_add_member_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setAction_name(action_name);
        args.setAction_data(action_data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_indirect_add_member();
      }
    }

    public void bm_mt_indirect_delete_member(int cxt_id, String table_name, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_delete_member_call method_call = new bm_mt_indirect_delete_member_call(cxt_id, table_name, mbr_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_delete_member_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private int mbr_handle;
      public bm_mt_indirect_delete_member_call(int cxt_id, String table_name, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.mbr_handle = mbr_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_delete_member", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_delete_member_args args = new bm_mt_indirect_delete_member_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setMbr_handle(mbr_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_delete_member();
      }
    }

    public void bm_mt_indirect_modify_member(int cxt_id, String table_name, int mbr_handle, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_modify_member_call method_call = new bm_mt_indirect_modify_member_call(cxt_id, table_name, mbr_handle, action_name, action_data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_modify_member_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private int mbr_handle;
      private String action_name;
      private List<ByteBuffer> action_data;
      public bm_mt_indirect_modify_member_call(int cxt_id, String table_name, int mbr_handle, String action_name, List<ByteBuffer> action_data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.mbr_handle = mbr_handle;
        this.action_name = action_name;
        this.action_data = action_data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_modify_member", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_modify_member_args args = new bm_mt_indirect_modify_member_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setMbr_handle(mbr_handle);
        args.setAction_name(action_name);
        args.setAction_data(action_data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_modify_member();
      }
    }

    public void bm_mt_indirect_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int mbr_handle, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_add_entry_call method_call = new bm_mt_indirect_add_entry_call(cxt_id, table_name, match_key, mbr_handle, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_add_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private List<BmMatchParam> match_key;
      private int mbr_handle;
      private BmAddEntryOptions options;
      public bm_mt_indirect_add_entry_call(int cxt_id, String table_name, List<BmMatchParam> match_key, int mbr_handle, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.match_key = match_key;
        this.mbr_handle = mbr_handle;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_add_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_add_entry_args args = new bm_mt_indirect_add_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setMatch_key(match_key);
        args.setMbr_handle(mbr_handle);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_indirect_add_entry();
      }
    }

    public void bm_mt_indirect_modify_entry(int cxt_id, String table_name, long entry_handle, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_modify_entry_call method_call = new bm_mt_indirect_modify_entry_call(cxt_id, table_name, entry_handle, mbr_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_modify_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      private int mbr_handle;
      public bm_mt_indirect_modify_entry_call(int cxt_id, String table_name, long entry_handle, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
        this.mbr_handle = mbr_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_modify_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_modify_entry_args args = new bm_mt_indirect_modify_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.setMbr_handle(mbr_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_modify_entry();
      }
    }

    public void bm_mt_indirect_delete_entry(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_delete_entry_call method_call = new bm_mt_indirect_delete_entry_call(cxt_id, table_name, entry_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_delete_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      public bm_mt_indirect_delete_entry_call(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_delete_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_delete_entry_args args = new bm_mt_indirect_delete_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_delete_entry();
      }
    }

    public void bm_mt_indirect_set_entry_ttl(int cxt_id, String table_name, long entry_handle, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_set_entry_ttl_call method_call = new bm_mt_indirect_set_entry_ttl_call(cxt_id, table_name, entry_handle, timeout_ms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_set_entry_ttl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      private int timeout_ms;
      public bm_mt_indirect_set_entry_ttl_call(int cxt_id, String table_name, long entry_handle, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
        this.timeout_ms = timeout_ms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_set_entry_ttl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_set_entry_ttl_args args = new bm_mt_indirect_set_entry_ttl_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.setTimeout_ms(timeout_ms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_set_entry_ttl();
      }
    }

    public void bm_mt_indirect_set_default_member(int cxt_id, String table_name, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_set_default_member_call method_call = new bm_mt_indirect_set_default_member_call(cxt_id, table_name, mbr_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_set_default_member_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private int mbr_handle;
      public bm_mt_indirect_set_default_member_call(int cxt_id, String table_name, int mbr_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.mbr_handle = mbr_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_set_default_member", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_set_default_member_args args = new bm_mt_indirect_set_default_member_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setMbr_handle(mbr_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_set_default_member();
      }
    }

    public void bm_mt_indirect_ws_create_group(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_ws_create_group_call method_call = new bm_mt_indirect_ws_create_group_call(cxt_id, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_ws_create_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      public bm_mt_indirect_ws_create_group_call(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_ws_create_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_ws_create_group_args args = new bm_mt_indirect_ws_create_group_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_indirect_ws_create_group();
      }
    }

    public void bm_mt_indirect_ws_delete_group(int cxt_id, String table_name, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_ws_delete_group_call method_call = new bm_mt_indirect_ws_delete_group_call(cxt_id, table_name, grp_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_ws_delete_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private int grp_handle;
      public bm_mt_indirect_ws_delete_group_call(int cxt_id, String table_name, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.grp_handle = grp_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_ws_delete_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_ws_delete_group_args args = new bm_mt_indirect_ws_delete_group_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setGrp_handle(grp_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_ws_delete_group();
      }
    }

    public void bm_mt_indirect_ws_add_member_to_group(int cxt_id, String table_name, int mbr_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_ws_add_member_to_group_call method_call = new bm_mt_indirect_ws_add_member_to_group_call(cxt_id, table_name, mbr_handle, grp_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_ws_add_member_to_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private int mbr_handle;
      private int grp_handle;
      public bm_mt_indirect_ws_add_member_to_group_call(int cxt_id, String table_name, int mbr_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.mbr_handle = mbr_handle;
        this.grp_handle = grp_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_ws_add_member_to_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_ws_add_member_to_group_args args = new bm_mt_indirect_ws_add_member_to_group_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setMbr_handle(mbr_handle);
        args.setGrp_handle(grp_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_ws_add_member_to_group();
      }
    }

    public void bm_mt_indirect_ws_remove_member_from_group(int cxt_id, String table_name, int mbr_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_ws_remove_member_from_group_call method_call = new bm_mt_indirect_ws_remove_member_from_group_call(cxt_id, table_name, mbr_handle, grp_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_ws_remove_member_from_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private int mbr_handle;
      private int grp_handle;
      public bm_mt_indirect_ws_remove_member_from_group_call(int cxt_id, String table_name, int mbr_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.mbr_handle = mbr_handle;
        this.grp_handle = grp_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_ws_remove_member_from_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_ws_remove_member_from_group_args args = new bm_mt_indirect_ws_remove_member_from_group_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setMbr_handle(mbr_handle);
        args.setGrp_handle(grp_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_ws_remove_member_from_group();
      }
    }

    public void bm_mt_indirect_ws_add_entry(int cxt_id, String table_name, List<BmMatchParam> match_key, int grp_handle, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_ws_add_entry_call method_call = new bm_mt_indirect_ws_add_entry_call(cxt_id, table_name, match_key, grp_handle, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_ws_add_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private List<BmMatchParam> match_key;
      private int grp_handle;
      private BmAddEntryOptions options;
      public bm_mt_indirect_ws_add_entry_call(int cxt_id, String table_name, List<BmMatchParam> match_key, int grp_handle, BmAddEntryOptions options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.match_key = match_key;
        this.grp_handle = grp_handle;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_ws_add_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_ws_add_entry_args args = new bm_mt_indirect_ws_add_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setMatch_key(match_key);
        args.setGrp_handle(grp_handle);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_indirect_ws_add_entry();
      }
    }

    public void bm_mt_indirect_ws_modify_entry(int cxt_id, String table_name, long entry_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_ws_modify_entry_call method_call = new bm_mt_indirect_ws_modify_entry_call(cxt_id, table_name, entry_handle, grp_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_ws_modify_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      private int grp_handle;
      public bm_mt_indirect_ws_modify_entry_call(int cxt_id, String table_name, long entry_handle, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
        this.grp_handle = grp_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_ws_modify_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_ws_modify_entry_args args = new bm_mt_indirect_ws_modify_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.setGrp_handle(grp_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_ws_modify_entry();
      }
    }

    public void bm_mt_indirect_ws_set_default_group(int cxt_id, String table_name, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_ws_set_default_group_call method_call = new bm_mt_indirect_ws_set_default_group_call(cxt_id, table_name, grp_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_ws_set_default_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private int grp_handle;
      public bm_mt_indirect_ws_set_default_group_call(int cxt_id, String table_name, int grp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.grp_handle = grp_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_ws_set_default_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_ws_set_default_group_args args = new bm_mt_indirect_ws_set_default_group_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setGrp_handle(grp_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_indirect_ws_set_default_group();
      }
    }

    public void bm_mt_read_counter(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_read_counter_call method_call = new bm_mt_read_counter_call(cxt_id, table_name, entry_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_read_counter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      public bm_mt_read_counter_call(int cxt_id, String table_name, long entry_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_read_counter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_read_counter_args args = new bm_mt_read_counter_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BmCounterValue getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_read_counter();
      }
    }

    public void bm_mt_reset_counters(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_reset_counters_call method_call = new bm_mt_reset_counters_call(cxt_id, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_reset_counters_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      public bm_mt_reset_counters_call(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_reset_counters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_reset_counters_args args = new bm_mt_reset_counters_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_reset_counters();
      }
    }

    public void bm_mt_write_counter(int cxt_id, String table_name, long entry_handle, BmCounterValue value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_write_counter_call method_call = new bm_mt_write_counter_call(cxt_id, table_name, entry_handle, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_write_counter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      private BmCounterValue value;
      public bm_mt_write_counter_call(int cxt_id, String table_name, long entry_handle, BmCounterValue value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_write_counter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_write_counter_args args = new bm_mt_write_counter_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_write_counter();
      }
    }

    public void bm_mt_set_meter_rates(int cxt_id, String table_name, long entry_handle, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_set_meter_rates_call method_call = new bm_mt_set_meter_rates_call(cxt_id, table_name, entry_handle, rates, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_set_meter_rates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      private long entry_handle;
      private List<BmMeterRateConfig> rates;
      public bm_mt_set_meter_rates_call(int cxt_id, String table_name, long entry_handle, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
        this.entry_handle = entry_handle;
        this.rates = rates;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_set_meter_rates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_set_meter_rates_args args = new bm_mt_set_meter_rates_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.setEntry_handle(entry_handle);
        args.setRates(rates);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mt_set_meter_rates();
      }
    }

    public void bm_mt_get_entries(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_get_entries_call method_call = new bm_mt_get_entries_call(cxt_id, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_get_entries_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      public bm_mt_get_entries_call(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_get_entries", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_get_entries_args args = new bm_mt_get_entries_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BmMtEntry> getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_get_entries();
      }
    }

    public void bm_mt_get_default_entry(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_get_default_entry_call method_call = new bm_mt_get_default_entry_call(cxt_id, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_get_default_entry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      public bm_mt_get_default_entry_call(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_get_default_entry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_get_default_entry_args args = new bm_mt_get_default_entry_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BmActionEntry getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_get_default_entry();
      }
    }

    public void bm_mt_indirect_get_members(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_get_members_call method_call = new bm_mt_indirect_get_members_call(cxt_id, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_get_members_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      public bm_mt_indirect_get_members_call(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_get_members", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_get_members_args args = new bm_mt_indirect_get_members_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BmMtIndirectMember> getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_indirect_get_members();
      }
    }

    public void bm_mt_indirect_ws_get_groups(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mt_indirect_ws_get_groups_call method_call = new bm_mt_indirect_ws_get_groups_call(cxt_id, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mt_indirect_ws_get_groups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String table_name;
      public bm_mt_indirect_ws_get_groups_call(int cxt_id, String table_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mt_indirect_ws_get_groups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mt_indirect_ws_get_groups_args args = new bm_mt_indirect_ws_get_groups_args();
        args.setCxt_id(cxt_id);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BmMtIndirectWsGroup> getResult() throws InvalidTableOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mt_indirect_ws_get_groups();
      }
    }

    public void bm_counter_read(int cxt_id, String counter_name, int index, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_counter_read_call method_call = new bm_counter_read_call(cxt_id, counter_name, index, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_counter_read_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String counter_name;
      private int index;
      public bm_counter_read_call(int cxt_id, String counter_name, int index, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.counter_name = counter_name;
        this.index = index;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_counter_read", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_counter_read_args args = new bm_counter_read_args();
        args.setCxt_id(cxt_id);
        args.setCounter_name(counter_name);
        args.setIndex(index);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BmCounterValue getResult() throws InvalidCounterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_counter_read();
      }
    }

    public void bm_counter_reset_all(int cxt_id, String counter_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_counter_reset_all_call method_call = new bm_counter_reset_all_call(cxt_id, counter_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_counter_reset_all_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String counter_name;
      public bm_counter_reset_all_call(int cxt_id, String counter_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.counter_name = counter_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_counter_reset_all", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_counter_reset_all_args args = new bm_counter_reset_all_args();
        args.setCxt_id(cxt_id);
        args.setCounter_name(counter_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidCounterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_counter_reset_all();
      }
    }

    public void bm_counter_write(int cxt_id, String counter_name, int index, BmCounterValue value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_counter_write_call method_call = new bm_counter_write_call(cxt_id, counter_name, index, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_counter_write_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String counter_name;
      private int index;
      private BmCounterValue value;
      public bm_counter_write_call(int cxt_id, String counter_name, int index, BmCounterValue value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.counter_name = counter_name;
        this.index = index;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_counter_write", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_counter_write_args args = new bm_counter_write_args();
        args.setCxt_id(cxt_id);
        args.setCounter_name(counter_name);
        args.setIndex(index);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidCounterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_counter_write();
      }
    }

    public void bm_learning_ack(int cxt_id, int list_id, long buffer_id, List<Integer> sample_ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_learning_ack_call method_call = new bm_learning_ack_call(cxt_id, list_id, buffer_id, sample_ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_learning_ack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int list_id;
      private long buffer_id;
      private List<Integer> sample_ids;
      public bm_learning_ack_call(int cxt_id, int list_id, long buffer_id, List<Integer> sample_ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.list_id = list_id;
        this.buffer_id = buffer_id;
        this.sample_ids = sample_ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_learning_ack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_learning_ack_args args = new bm_learning_ack_args();
        args.setCxt_id(cxt_id);
        args.setList_id(list_id);
        args.setBuffer_id(buffer_id);
        args.setSample_ids(sample_ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidLearnOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_learning_ack();
      }
    }

    public void bm_learning_ack_buffer(int cxt_id, int list_id, long buffer_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_learning_ack_buffer_call method_call = new bm_learning_ack_buffer_call(cxt_id, list_id, buffer_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_learning_ack_buffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int list_id;
      private long buffer_id;
      public bm_learning_ack_buffer_call(int cxt_id, int list_id, long buffer_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.list_id = list_id;
        this.buffer_id = buffer_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_learning_ack_buffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_learning_ack_buffer_args args = new bm_learning_ack_buffer_args();
        args.setCxt_id(cxt_id);
        args.setList_id(list_id);
        args.setBuffer_id(buffer_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidLearnOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_learning_ack_buffer();
      }
    }

    public void bm_learning_set_timeout(int cxt_id, int list_id, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_learning_set_timeout_call method_call = new bm_learning_set_timeout_call(cxt_id, list_id, timeout_ms, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_learning_set_timeout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int list_id;
      private int timeout_ms;
      public bm_learning_set_timeout_call(int cxt_id, int list_id, int timeout_ms, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.list_id = list_id;
        this.timeout_ms = timeout_ms;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_learning_set_timeout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_learning_set_timeout_args args = new bm_learning_set_timeout_args();
        args.setCxt_id(cxt_id);
        args.setList_id(list_id);
        args.setTimeout_ms(timeout_ms);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidLearnOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_learning_set_timeout();
      }
    }

    public void bm_learning_set_buffer_size(int cxt_id, int list_id, int nb_samples, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_learning_set_buffer_size_call method_call = new bm_learning_set_buffer_size_call(cxt_id, list_id, nb_samples, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_learning_set_buffer_size_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int list_id;
      private int nb_samples;
      public bm_learning_set_buffer_size_call(int cxt_id, int list_id, int nb_samples, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.list_id = list_id;
        this.nb_samples = nb_samples;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_learning_set_buffer_size", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_learning_set_buffer_size_args args = new bm_learning_set_buffer_size_args();
        args.setCxt_id(cxt_id);
        args.setList_id(list_id);
        args.setNb_samples(nb_samples);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidLearnOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_learning_set_buffer_size();
      }
    }

    public void bm_load_new_config(String config_str, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_load_new_config_call method_call = new bm_load_new_config_call(config_str, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_load_new_config_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String config_str;
      public bm_load_new_config_call(String config_str, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.config_str = config_str;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_load_new_config", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_load_new_config_args args = new bm_load_new_config_args();
        args.setConfig_str(config_str);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidSwapOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_load_new_config();
      }
    }

    public void bm_swap_configs(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_swap_configs_call method_call = new bm_swap_configs_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_swap_configs_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bm_swap_configs_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_swap_configs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_swap_configs_args args = new bm_swap_configs_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidSwapOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_swap_configs();
      }
    }

    public void bm_meter_array_set_rates(int cxt_id, String meter_array_name, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_meter_array_set_rates_call method_call = new bm_meter_array_set_rates_call(cxt_id, meter_array_name, rates, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_meter_array_set_rates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String meter_array_name;
      private List<BmMeterRateConfig> rates;
      public bm_meter_array_set_rates_call(int cxt_id, String meter_array_name, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.meter_array_name = meter_array_name;
        this.rates = rates;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_meter_array_set_rates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_meter_array_set_rates_args args = new bm_meter_array_set_rates_args();
        args.setCxt_id(cxt_id);
        args.setMeter_array_name(meter_array_name);
        args.setRates(rates);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidMeterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_meter_array_set_rates();
      }
    }

    public void bm_meter_set_rates(int cxt_id, String meter_array_name, int index, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_meter_set_rates_call method_call = new bm_meter_set_rates_call(cxt_id, meter_array_name, index, rates, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_meter_set_rates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String meter_array_name;
      private int index;
      private List<BmMeterRateConfig> rates;
      public bm_meter_set_rates_call(int cxt_id, String meter_array_name, int index, List<BmMeterRateConfig> rates, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.meter_array_name = meter_array_name;
        this.index = index;
        this.rates = rates;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_meter_set_rates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_meter_set_rates_args args = new bm_meter_set_rates_args();
        args.setCxt_id(cxt_id);
        args.setMeter_array_name(meter_array_name);
        args.setIndex(index);
        args.setRates(rates);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidMeterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_meter_set_rates();
      }
    }

    public void bm_register_read(int cxt_id, String register_array_name, int idx, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_register_read_call method_call = new bm_register_read_call(cxt_id, register_array_name, idx, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_register_read_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String register_array_name;
      private int idx;
      public bm_register_read_call(int cxt_id, String register_array_name, int idx, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.register_array_name = register_array_name;
        this.idx = idx;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_register_read", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_register_read_args args = new bm_register_read_args();
        args.setCxt_id(cxt_id);
        args.setRegister_array_name(register_array_name);
        args.setIdx(idx);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws InvalidRegisterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_register_read();
      }
    }

    public void bm_register_write(int cxt_id, String register_array_name, int index, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_register_write_call method_call = new bm_register_write_call(cxt_id, register_array_name, index, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_register_write_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String register_array_name;
      private int index;
      private long value;
      public bm_register_write_call(int cxt_id, String register_array_name, int index, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.register_array_name = register_array_name;
        this.index = index;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_register_write", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_register_write_args args = new bm_register_write_args();
        args.setCxt_id(cxt_id);
        args.setRegister_array_name(register_array_name);
        args.setIndex(index);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidRegisterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_register_write();
      }
    }

    public void bm_register_write_range(int cxt_id, String register_array_name, int start_index, int end_index, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_register_write_range_call method_call = new bm_register_write_range_call(cxt_id, register_array_name, start_index, end_index, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_register_write_range_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String register_array_name;
      private int start_index;
      private int end_index;
      private long value;
      public bm_register_write_range_call(int cxt_id, String register_array_name, int start_index, int end_index, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.register_array_name = register_array_name;
        this.start_index = start_index;
        this.end_index = end_index;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_register_write_range", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_register_write_range_args args = new bm_register_write_range_args();
        args.setCxt_id(cxt_id);
        args.setRegister_array_name(register_array_name);
        args.setStart_index(start_index);
        args.setEnd_index(end_index);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidRegisterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_register_write_range();
      }
    }

    public void bm_register_reset(int cxt_id, String register_array_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_register_reset_call method_call = new bm_register_reset_call(cxt_id, register_array_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_register_reset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String register_array_name;
      public bm_register_reset_call(int cxt_id, String register_array_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.register_array_name = register_array_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_register_reset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_register_reset_args args = new bm_register_reset_args();
        args.setCxt_id(cxt_id);
        args.setRegister_array_name(register_array_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidRegisterOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_register_reset();
      }
    }

    public void bm_dev_mgr_add_port(String iface_name, int port_num, String pcap_path, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_dev_mgr_add_port_call method_call = new bm_dev_mgr_add_port_call(iface_name, port_num, pcap_path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_dev_mgr_add_port_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String iface_name;
      private int port_num;
      private String pcap_path;
      public bm_dev_mgr_add_port_call(String iface_name, int port_num, String pcap_path, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.iface_name = iface_name;
        this.port_num = port_num;
        this.pcap_path = pcap_path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_dev_mgr_add_port", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_dev_mgr_add_port_args args = new bm_dev_mgr_add_port_args();
        args.setIface_name(iface_name);
        args.setPort_num(port_num);
        args.setPcap_path(pcap_path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidDevMgrOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_dev_mgr_add_port();
      }
    }

    public void bm_dev_mgr_remove_port(int port_num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_dev_mgr_remove_port_call method_call = new bm_dev_mgr_remove_port_call(port_num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_dev_mgr_remove_port_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int port_num;
      public bm_dev_mgr_remove_port_call(int port_num, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.port_num = port_num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_dev_mgr_remove_port", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_dev_mgr_remove_port_args args = new bm_dev_mgr_remove_port_args();
        args.setPort_num(port_num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidDevMgrOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_dev_mgr_remove_port();
      }
    }

    public void bm_dev_mgr_show_ports(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_dev_mgr_show_ports_call method_call = new bm_dev_mgr_show_ports_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_dev_mgr_show_ports_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bm_dev_mgr_show_ports_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_dev_mgr_show_ports", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_dev_mgr_show_ports_args args = new bm_dev_mgr_show_ports_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DevMgrPortInfo> getResult() throws InvalidDevMgrOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_dev_mgr_show_ports();
      }
    }

    public void bm_mgmt_get_info(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mgmt_get_info_call method_call = new bm_mgmt_get_info_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mgmt_get_info_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bm_mgmt_get_info_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mgmt_get_info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mgmt_get_info_args args = new bm_mgmt_get_info_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BmConfig getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mgmt_get_info();
      }
    }

    public void bm_set_crc16_custom_parameters(int cxt_id, String calc_name, BmCrc16Config crc16_config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_set_crc16_custom_parameters_call method_call = new bm_set_crc16_custom_parameters_call(cxt_id, calc_name, crc16_config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_set_crc16_custom_parameters_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String calc_name;
      private BmCrc16Config crc16_config;
      public bm_set_crc16_custom_parameters_call(int cxt_id, String calc_name, BmCrc16Config crc16_config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.calc_name = calc_name;
        this.crc16_config = crc16_config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_set_crc16_custom_parameters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_set_crc16_custom_parameters_args args = new bm_set_crc16_custom_parameters_args();
        args.setCxt_id(cxt_id);
        args.setCalc_name(calc_name);
        args.setCrc16_config(crc16_config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidCrcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_set_crc16_custom_parameters();
      }
    }

    public void bm_set_crc32_custom_parameters(int cxt_id, String calc_name, BmCrc32Config crc32_config, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_set_crc32_custom_parameters_call method_call = new bm_set_crc32_custom_parameters_call(cxt_id, calc_name, crc32_config, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_set_crc32_custom_parameters_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private String calc_name;
      private BmCrc32Config crc32_config;
      public bm_set_crc32_custom_parameters_call(int cxt_id, String calc_name, BmCrc32Config crc32_config, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.calc_name = calc_name;
        this.crc32_config = crc32_config;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_set_crc32_custom_parameters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_set_crc32_custom_parameters_args args = new bm_set_crc32_custom_parameters_args();
        args.setCxt_id(cxt_id);
        args.setCalc_name(calc_name);
        args.setCrc32_config(crc32_config);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidCrcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_set_crc32_custom_parameters();
      }
    }

    public void bm_reset_state(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_reset_state_call method_call = new bm_reset_state_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_reset_state_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bm_reset_state_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_reset_state", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_reset_state_args args = new bm_reset_state_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_reset_state();
      }
    }

    public void bm_get_config(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_get_config_call method_call = new bm_get_config_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_get_config_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bm_get_config_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_get_config", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_get_config_args args = new bm_get_config_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_get_config();
      }
    }

    public void bm_get_config_md5(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_get_config_md5_call method_call = new bm_get_config_md5_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_get_config_md5_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bm_get_config_md5_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_get_config_md5", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_get_config_md5_args args = new bm_get_config_md5_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_get_config_md5();
      }
    }

    public void bm_serialize_state(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_serialize_state_call method_call = new bm_serialize_state_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_serialize_state_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bm_serialize_state_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_serialize_state", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_serialize_state_args args = new bm_serialize_state_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_serialize_state();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("bm_mt_add_entry", new bm_mt_add_entry());
      processMap.put("bm_mt_set_default_action", new bm_mt_set_default_action());
      processMap.put("bm_mt_delete_entry", new bm_mt_delete_entry());
      processMap.put("bm_mt_modify_entry", new bm_mt_modify_entry());
      processMap.put("bm_mt_set_entry_ttl", new bm_mt_set_entry_ttl());
      processMap.put("bm_mt_indirect_add_member", new bm_mt_indirect_add_member());
      processMap.put("bm_mt_indirect_delete_member", new bm_mt_indirect_delete_member());
      processMap.put("bm_mt_indirect_modify_member", new bm_mt_indirect_modify_member());
      processMap.put("bm_mt_indirect_add_entry", new bm_mt_indirect_add_entry());
      processMap.put("bm_mt_indirect_modify_entry", new bm_mt_indirect_modify_entry());
      processMap.put("bm_mt_indirect_delete_entry", new bm_mt_indirect_delete_entry());
      processMap.put("bm_mt_indirect_set_entry_ttl", new bm_mt_indirect_set_entry_ttl());
      processMap.put("bm_mt_indirect_set_default_member", new bm_mt_indirect_set_default_member());
      processMap.put("bm_mt_indirect_ws_create_group", new bm_mt_indirect_ws_create_group());
      processMap.put("bm_mt_indirect_ws_delete_group", new bm_mt_indirect_ws_delete_group());
      processMap.put("bm_mt_indirect_ws_add_member_to_group", new bm_mt_indirect_ws_add_member_to_group());
      processMap.put("bm_mt_indirect_ws_remove_member_from_group", new bm_mt_indirect_ws_remove_member_from_group());
      processMap.put("bm_mt_indirect_ws_add_entry", new bm_mt_indirect_ws_add_entry());
      processMap.put("bm_mt_indirect_ws_modify_entry", new bm_mt_indirect_ws_modify_entry());
      processMap.put("bm_mt_indirect_ws_set_default_group", new bm_mt_indirect_ws_set_default_group());
      processMap.put("bm_mt_read_counter", new bm_mt_read_counter());
      processMap.put("bm_mt_reset_counters", new bm_mt_reset_counters());
      processMap.put("bm_mt_write_counter", new bm_mt_write_counter());
      processMap.put("bm_mt_set_meter_rates", new bm_mt_set_meter_rates());
      processMap.put("bm_mt_get_entries", new bm_mt_get_entries());
      processMap.put("bm_mt_get_default_entry", new bm_mt_get_default_entry());
      processMap.put("bm_mt_indirect_get_members", new bm_mt_indirect_get_members());
      processMap.put("bm_mt_indirect_ws_get_groups", new bm_mt_indirect_ws_get_groups());
      processMap.put("bm_counter_read", new bm_counter_read());
      processMap.put("bm_counter_reset_all", new bm_counter_reset_all());
      processMap.put("bm_counter_write", new bm_counter_write());
      processMap.put("bm_learning_ack", new bm_learning_ack());
      processMap.put("bm_learning_ack_buffer", new bm_learning_ack_buffer());
      processMap.put("bm_learning_set_timeout", new bm_learning_set_timeout());
      processMap.put("bm_learning_set_buffer_size", new bm_learning_set_buffer_size());
      processMap.put("bm_load_new_config", new bm_load_new_config());
      processMap.put("bm_swap_configs", new bm_swap_configs());
      processMap.put("bm_meter_array_set_rates", new bm_meter_array_set_rates());
      processMap.put("bm_meter_set_rates", new bm_meter_set_rates());
      processMap.put("bm_register_read", new bm_register_read());
      processMap.put("bm_register_write", new bm_register_write());
      processMap.put("bm_register_write_range", new bm_register_write_range());
      processMap.put("bm_register_reset", new bm_register_reset());
      processMap.put("bm_dev_mgr_add_port", new bm_dev_mgr_add_port());
      processMap.put("bm_dev_mgr_remove_port", new bm_dev_mgr_remove_port());
      processMap.put("bm_dev_mgr_show_ports", new bm_dev_mgr_show_ports());
      processMap.put("bm_mgmt_get_info", new bm_mgmt_get_info());
      processMap.put("bm_set_crc16_custom_parameters", new bm_set_crc16_custom_parameters());
      processMap.put("bm_set_crc32_custom_parameters", new bm_set_crc32_custom_parameters());
      processMap.put("bm_reset_state", new bm_reset_state());
      processMap.put("bm_get_config", new bm_get_config());
      processMap.put("bm_get_config_md5", new bm_get_config_md5());
      processMap.put("bm_serialize_state", new bm_serialize_state());
      return processMap;
    }

    public static class bm_mt_add_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_add_entry_args> {
      public bm_mt_add_entry() {
        super("bm_mt_add_entry");
      }

      public bm_mt_add_entry_args getEmptyArgsInstance() {
        return new bm_mt_add_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_add_entry_result getResult(I iface, bm_mt_add_entry_args args) throws org.apache.thrift.TException {
        bm_mt_add_entry_result result = new bm_mt_add_entry_result();
        try {
          result.success = iface.bm_mt_add_entry(args.cxt_id, args.table_name, args.match_key, args.action_name, args.action_data, args.options);
          result.setSuccessIsSet(true);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_set_default_action<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_set_default_action_args> {
      public bm_mt_set_default_action() {
        super("bm_mt_set_default_action");
      }

      public bm_mt_set_default_action_args getEmptyArgsInstance() {
        return new bm_mt_set_default_action_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_set_default_action_result getResult(I iface, bm_mt_set_default_action_args args) throws org.apache.thrift.TException {
        bm_mt_set_default_action_result result = new bm_mt_set_default_action_result();
        try {
          iface.bm_mt_set_default_action(args.cxt_id, args.table_name, args.action_name, args.action_data);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_delete_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_delete_entry_args> {
      public bm_mt_delete_entry() {
        super("bm_mt_delete_entry");
      }

      public bm_mt_delete_entry_args getEmptyArgsInstance() {
        return new bm_mt_delete_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_delete_entry_result getResult(I iface, bm_mt_delete_entry_args args) throws org.apache.thrift.TException {
        bm_mt_delete_entry_result result = new bm_mt_delete_entry_result();
        try {
          iface.bm_mt_delete_entry(args.cxt_id, args.table_name, args.entry_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_modify_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_modify_entry_args> {
      public bm_mt_modify_entry() {
        super("bm_mt_modify_entry");
      }

      public bm_mt_modify_entry_args getEmptyArgsInstance() {
        return new bm_mt_modify_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_modify_entry_result getResult(I iface, bm_mt_modify_entry_args args) throws org.apache.thrift.TException {
        bm_mt_modify_entry_result result = new bm_mt_modify_entry_result();
        try {
          iface.bm_mt_modify_entry(args.cxt_id, args.table_name, args.entry_handle, args.action_name, args.action_data);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_set_entry_ttl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_set_entry_ttl_args> {
      public bm_mt_set_entry_ttl() {
        super("bm_mt_set_entry_ttl");
      }

      public bm_mt_set_entry_ttl_args getEmptyArgsInstance() {
        return new bm_mt_set_entry_ttl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_set_entry_ttl_result getResult(I iface, bm_mt_set_entry_ttl_args args) throws org.apache.thrift.TException {
        bm_mt_set_entry_ttl_result result = new bm_mt_set_entry_ttl_result();
        try {
          iface.bm_mt_set_entry_ttl(args.cxt_id, args.table_name, args.entry_handle, args.timeout_ms);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_add_member<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_add_member_args> {
      public bm_mt_indirect_add_member() {
        super("bm_mt_indirect_add_member");
      }

      public bm_mt_indirect_add_member_args getEmptyArgsInstance() {
        return new bm_mt_indirect_add_member_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_add_member_result getResult(I iface, bm_mt_indirect_add_member_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_add_member_result result = new bm_mt_indirect_add_member_result();
        try {
          result.success = iface.bm_mt_indirect_add_member(args.cxt_id, args.table_name, args.action_name, args.action_data);
          result.setSuccessIsSet(true);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_delete_member<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_delete_member_args> {
      public bm_mt_indirect_delete_member() {
        super("bm_mt_indirect_delete_member");
      }

      public bm_mt_indirect_delete_member_args getEmptyArgsInstance() {
        return new bm_mt_indirect_delete_member_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_delete_member_result getResult(I iface, bm_mt_indirect_delete_member_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_delete_member_result result = new bm_mt_indirect_delete_member_result();
        try {
          iface.bm_mt_indirect_delete_member(args.cxt_id, args.table_name, args.mbr_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_modify_member<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_modify_member_args> {
      public bm_mt_indirect_modify_member() {
        super("bm_mt_indirect_modify_member");
      }

      public bm_mt_indirect_modify_member_args getEmptyArgsInstance() {
        return new bm_mt_indirect_modify_member_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_modify_member_result getResult(I iface, bm_mt_indirect_modify_member_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_modify_member_result result = new bm_mt_indirect_modify_member_result();
        try {
          iface.bm_mt_indirect_modify_member(args.cxt_id, args.table_name, args.mbr_handle, args.action_name, args.action_data);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_add_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_add_entry_args> {
      public bm_mt_indirect_add_entry() {
        super("bm_mt_indirect_add_entry");
      }

      public bm_mt_indirect_add_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_add_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_add_entry_result getResult(I iface, bm_mt_indirect_add_entry_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_add_entry_result result = new bm_mt_indirect_add_entry_result();
        try {
          result.success = iface.bm_mt_indirect_add_entry(args.cxt_id, args.table_name, args.match_key, args.mbr_handle, args.options);
          result.setSuccessIsSet(true);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_modify_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_modify_entry_args> {
      public bm_mt_indirect_modify_entry() {
        super("bm_mt_indirect_modify_entry");
      }

      public bm_mt_indirect_modify_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_modify_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_modify_entry_result getResult(I iface, bm_mt_indirect_modify_entry_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_modify_entry_result result = new bm_mt_indirect_modify_entry_result();
        try {
          iface.bm_mt_indirect_modify_entry(args.cxt_id, args.table_name, args.entry_handle, args.mbr_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_delete_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_delete_entry_args> {
      public bm_mt_indirect_delete_entry() {
        super("bm_mt_indirect_delete_entry");
      }

      public bm_mt_indirect_delete_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_delete_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_delete_entry_result getResult(I iface, bm_mt_indirect_delete_entry_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_delete_entry_result result = new bm_mt_indirect_delete_entry_result();
        try {
          iface.bm_mt_indirect_delete_entry(args.cxt_id, args.table_name, args.entry_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_set_entry_ttl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_set_entry_ttl_args> {
      public bm_mt_indirect_set_entry_ttl() {
        super("bm_mt_indirect_set_entry_ttl");
      }

      public bm_mt_indirect_set_entry_ttl_args getEmptyArgsInstance() {
        return new bm_mt_indirect_set_entry_ttl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_set_entry_ttl_result getResult(I iface, bm_mt_indirect_set_entry_ttl_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_set_entry_ttl_result result = new bm_mt_indirect_set_entry_ttl_result();
        try {
          iface.bm_mt_indirect_set_entry_ttl(args.cxt_id, args.table_name, args.entry_handle, args.timeout_ms);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_set_default_member<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_set_default_member_args> {
      public bm_mt_indirect_set_default_member() {
        super("bm_mt_indirect_set_default_member");
      }

      public bm_mt_indirect_set_default_member_args getEmptyArgsInstance() {
        return new bm_mt_indirect_set_default_member_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_set_default_member_result getResult(I iface, bm_mt_indirect_set_default_member_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_set_default_member_result result = new bm_mt_indirect_set_default_member_result();
        try {
          iface.bm_mt_indirect_set_default_member(args.cxt_id, args.table_name, args.mbr_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_ws_create_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_ws_create_group_args> {
      public bm_mt_indirect_ws_create_group() {
        super("bm_mt_indirect_ws_create_group");
      }

      public bm_mt_indirect_ws_create_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_create_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_ws_create_group_result getResult(I iface, bm_mt_indirect_ws_create_group_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_ws_create_group_result result = new bm_mt_indirect_ws_create_group_result();
        try {
          result.success = iface.bm_mt_indirect_ws_create_group(args.cxt_id, args.table_name);
          result.setSuccessIsSet(true);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_ws_delete_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_ws_delete_group_args> {
      public bm_mt_indirect_ws_delete_group() {
        super("bm_mt_indirect_ws_delete_group");
      }

      public bm_mt_indirect_ws_delete_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_delete_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_ws_delete_group_result getResult(I iface, bm_mt_indirect_ws_delete_group_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_ws_delete_group_result result = new bm_mt_indirect_ws_delete_group_result();
        try {
          iface.bm_mt_indirect_ws_delete_group(args.cxt_id, args.table_name, args.grp_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_ws_add_member_to_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_ws_add_member_to_group_args> {
      public bm_mt_indirect_ws_add_member_to_group() {
        super("bm_mt_indirect_ws_add_member_to_group");
      }

      public bm_mt_indirect_ws_add_member_to_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_add_member_to_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_ws_add_member_to_group_result getResult(I iface, bm_mt_indirect_ws_add_member_to_group_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_ws_add_member_to_group_result result = new bm_mt_indirect_ws_add_member_to_group_result();
        try {
          iface.bm_mt_indirect_ws_add_member_to_group(args.cxt_id, args.table_name, args.mbr_handle, args.grp_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_ws_remove_member_from_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_ws_remove_member_from_group_args> {
      public bm_mt_indirect_ws_remove_member_from_group() {
        super("bm_mt_indirect_ws_remove_member_from_group");
      }

      public bm_mt_indirect_ws_remove_member_from_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_remove_member_from_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_ws_remove_member_from_group_result getResult(I iface, bm_mt_indirect_ws_remove_member_from_group_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_ws_remove_member_from_group_result result = new bm_mt_indirect_ws_remove_member_from_group_result();
        try {
          iface.bm_mt_indirect_ws_remove_member_from_group(args.cxt_id, args.table_name, args.mbr_handle, args.grp_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_ws_add_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_ws_add_entry_args> {
      public bm_mt_indirect_ws_add_entry() {
        super("bm_mt_indirect_ws_add_entry");
      }

      public bm_mt_indirect_ws_add_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_add_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_ws_add_entry_result getResult(I iface, bm_mt_indirect_ws_add_entry_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_ws_add_entry_result result = new bm_mt_indirect_ws_add_entry_result();
        try {
          result.success = iface.bm_mt_indirect_ws_add_entry(args.cxt_id, args.table_name, args.match_key, args.grp_handle, args.options);
          result.setSuccessIsSet(true);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_ws_modify_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_ws_modify_entry_args> {
      public bm_mt_indirect_ws_modify_entry() {
        super("bm_mt_indirect_ws_modify_entry");
      }

      public bm_mt_indirect_ws_modify_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_modify_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_ws_modify_entry_result getResult(I iface, bm_mt_indirect_ws_modify_entry_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_ws_modify_entry_result result = new bm_mt_indirect_ws_modify_entry_result();
        try {
          iface.bm_mt_indirect_ws_modify_entry(args.cxt_id, args.table_name, args.entry_handle, args.grp_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_ws_set_default_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_ws_set_default_group_args> {
      public bm_mt_indirect_ws_set_default_group() {
        super("bm_mt_indirect_ws_set_default_group");
      }

      public bm_mt_indirect_ws_set_default_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_set_default_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_ws_set_default_group_result getResult(I iface, bm_mt_indirect_ws_set_default_group_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_ws_set_default_group_result result = new bm_mt_indirect_ws_set_default_group_result();
        try {
          iface.bm_mt_indirect_ws_set_default_group(args.cxt_id, args.table_name, args.grp_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_read_counter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_read_counter_args> {
      public bm_mt_read_counter() {
        super("bm_mt_read_counter");
      }

      public bm_mt_read_counter_args getEmptyArgsInstance() {
        return new bm_mt_read_counter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_read_counter_result getResult(I iface, bm_mt_read_counter_args args) throws org.apache.thrift.TException {
        bm_mt_read_counter_result result = new bm_mt_read_counter_result();
        try {
          result.success = iface.bm_mt_read_counter(args.cxt_id, args.table_name, args.entry_handle);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_reset_counters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_reset_counters_args> {
      public bm_mt_reset_counters() {
        super("bm_mt_reset_counters");
      }

      public bm_mt_reset_counters_args getEmptyArgsInstance() {
        return new bm_mt_reset_counters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_reset_counters_result getResult(I iface, bm_mt_reset_counters_args args) throws org.apache.thrift.TException {
        bm_mt_reset_counters_result result = new bm_mt_reset_counters_result();
        try {
          iface.bm_mt_reset_counters(args.cxt_id, args.table_name);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_write_counter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_write_counter_args> {
      public bm_mt_write_counter() {
        super("bm_mt_write_counter");
      }

      public bm_mt_write_counter_args getEmptyArgsInstance() {
        return new bm_mt_write_counter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_write_counter_result getResult(I iface, bm_mt_write_counter_args args) throws org.apache.thrift.TException {
        bm_mt_write_counter_result result = new bm_mt_write_counter_result();
        try {
          iface.bm_mt_write_counter(args.cxt_id, args.table_name, args.entry_handle, args.value);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_set_meter_rates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_set_meter_rates_args> {
      public bm_mt_set_meter_rates() {
        super("bm_mt_set_meter_rates");
      }

      public bm_mt_set_meter_rates_args getEmptyArgsInstance() {
        return new bm_mt_set_meter_rates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_set_meter_rates_result getResult(I iface, bm_mt_set_meter_rates_args args) throws org.apache.thrift.TException {
        bm_mt_set_meter_rates_result result = new bm_mt_set_meter_rates_result();
        try {
          iface.bm_mt_set_meter_rates(args.cxt_id, args.table_name, args.entry_handle, args.rates);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_get_entries<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_get_entries_args> {
      public bm_mt_get_entries() {
        super("bm_mt_get_entries");
      }

      public bm_mt_get_entries_args getEmptyArgsInstance() {
        return new bm_mt_get_entries_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_get_entries_result getResult(I iface, bm_mt_get_entries_args args) throws org.apache.thrift.TException {
        bm_mt_get_entries_result result = new bm_mt_get_entries_result();
        try {
          result.success = iface.bm_mt_get_entries(args.cxt_id, args.table_name);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_get_default_entry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_get_default_entry_args> {
      public bm_mt_get_default_entry() {
        super("bm_mt_get_default_entry");
      }

      public bm_mt_get_default_entry_args getEmptyArgsInstance() {
        return new bm_mt_get_default_entry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_get_default_entry_result getResult(I iface, bm_mt_get_default_entry_args args) throws org.apache.thrift.TException {
        bm_mt_get_default_entry_result result = new bm_mt_get_default_entry_result();
        try {
          result.success = iface.bm_mt_get_default_entry(args.cxt_id, args.table_name);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_get_members<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_get_members_args> {
      public bm_mt_indirect_get_members() {
        super("bm_mt_indirect_get_members");
      }

      public bm_mt_indirect_get_members_args getEmptyArgsInstance() {
        return new bm_mt_indirect_get_members_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_get_members_result getResult(I iface, bm_mt_indirect_get_members_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_get_members_result result = new bm_mt_indirect_get_members_result();
        try {
          result.success = iface.bm_mt_indirect_get_members(args.cxt_id, args.table_name);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mt_indirect_ws_get_groups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mt_indirect_ws_get_groups_args> {
      public bm_mt_indirect_ws_get_groups() {
        super("bm_mt_indirect_ws_get_groups");
      }

      public bm_mt_indirect_ws_get_groups_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_get_groups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mt_indirect_ws_get_groups_result getResult(I iface, bm_mt_indirect_ws_get_groups_args args) throws org.apache.thrift.TException {
        bm_mt_indirect_ws_get_groups_result result = new bm_mt_indirect_ws_get_groups_result();
        try {
          result.success = iface.bm_mt_indirect_ws_get_groups(args.cxt_id, args.table_name);
        } catch (InvalidTableOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_counter_read<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_counter_read_args> {
      public bm_counter_read() {
        super("bm_counter_read");
      }

      public bm_counter_read_args getEmptyArgsInstance() {
        return new bm_counter_read_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_counter_read_result getResult(I iface, bm_counter_read_args args) throws org.apache.thrift.TException {
        bm_counter_read_result result = new bm_counter_read_result();
        try {
          result.success = iface.bm_counter_read(args.cxt_id, args.counter_name, args.index);
        } catch (InvalidCounterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_counter_reset_all<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_counter_reset_all_args> {
      public bm_counter_reset_all() {
        super("bm_counter_reset_all");
      }

      public bm_counter_reset_all_args getEmptyArgsInstance() {
        return new bm_counter_reset_all_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_counter_reset_all_result getResult(I iface, bm_counter_reset_all_args args) throws org.apache.thrift.TException {
        bm_counter_reset_all_result result = new bm_counter_reset_all_result();
        try {
          iface.bm_counter_reset_all(args.cxt_id, args.counter_name);
        } catch (InvalidCounterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_counter_write<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_counter_write_args> {
      public bm_counter_write() {
        super("bm_counter_write");
      }

      public bm_counter_write_args getEmptyArgsInstance() {
        return new bm_counter_write_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_counter_write_result getResult(I iface, bm_counter_write_args args) throws org.apache.thrift.TException {
        bm_counter_write_result result = new bm_counter_write_result();
        try {
          iface.bm_counter_write(args.cxt_id, args.counter_name, args.index, args.value);
        } catch (InvalidCounterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_learning_ack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_learning_ack_args> {
      public bm_learning_ack() {
        super("bm_learning_ack");
      }

      public bm_learning_ack_args getEmptyArgsInstance() {
        return new bm_learning_ack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_learning_ack_result getResult(I iface, bm_learning_ack_args args) throws org.apache.thrift.TException {
        bm_learning_ack_result result = new bm_learning_ack_result();
        try {
          iface.bm_learning_ack(args.cxt_id, args.list_id, args.buffer_id, args.sample_ids);
        } catch (InvalidLearnOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_learning_ack_buffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_learning_ack_buffer_args> {
      public bm_learning_ack_buffer() {
        super("bm_learning_ack_buffer");
      }

      public bm_learning_ack_buffer_args getEmptyArgsInstance() {
        return new bm_learning_ack_buffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_learning_ack_buffer_result getResult(I iface, bm_learning_ack_buffer_args args) throws org.apache.thrift.TException {
        bm_learning_ack_buffer_result result = new bm_learning_ack_buffer_result();
        try {
          iface.bm_learning_ack_buffer(args.cxt_id, args.list_id, args.buffer_id);
        } catch (InvalidLearnOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_learning_set_timeout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_learning_set_timeout_args> {
      public bm_learning_set_timeout() {
        super("bm_learning_set_timeout");
      }

      public bm_learning_set_timeout_args getEmptyArgsInstance() {
        return new bm_learning_set_timeout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_learning_set_timeout_result getResult(I iface, bm_learning_set_timeout_args args) throws org.apache.thrift.TException {
        bm_learning_set_timeout_result result = new bm_learning_set_timeout_result();
        try {
          iface.bm_learning_set_timeout(args.cxt_id, args.list_id, args.timeout_ms);
        } catch (InvalidLearnOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_learning_set_buffer_size<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_learning_set_buffer_size_args> {
      public bm_learning_set_buffer_size() {
        super("bm_learning_set_buffer_size");
      }

      public bm_learning_set_buffer_size_args getEmptyArgsInstance() {
        return new bm_learning_set_buffer_size_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_learning_set_buffer_size_result getResult(I iface, bm_learning_set_buffer_size_args args) throws org.apache.thrift.TException {
        bm_learning_set_buffer_size_result result = new bm_learning_set_buffer_size_result();
        try {
          iface.bm_learning_set_buffer_size(args.cxt_id, args.list_id, args.nb_samples);
        } catch (InvalidLearnOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_load_new_config<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_load_new_config_args> {
      public bm_load_new_config() {
        super("bm_load_new_config");
      }

      public bm_load_new_config_args getEmptyArgsInstance() {
        return new bm_load_new_config_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_load_new_config_result getResult(I iface, bm_load_new_config_args args) throws org.apache.thrift.TException {
        bm_load_new_config_result result = new bm_load_new_config_result();
        try {
          iface.bm_load_new_config(args.config_str);
        } catch (InvalidSwapOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_swap_configs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_swap_configs_args> {
      public bm_swap_configs() {
        super("bm_swap_configs");
      }

      public bm_swap_configs_args getEmptyArgsInstance() {
        return new bm_swap_configs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_swap_configs_result getResult(I iface, bm_swap_configs_args args) throws org.apache.thrift.TException {
        bm_swap_configs_result result = new bm_swap_configs_result();
        try {
          iface.bm_swap_configs();
        } catch (InvalidSwapOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_meter_array_set_rates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_meter_array_set_rates_args> {
      public bm_meter_array_set_rates() {
        super("bm_meter_array_set_rates");
      }

      public bm_meter_array_set_rates_args getEmptyArgsInstance() {
        return new bm_meter_array_set_rates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_meter_array_set_rates_result getResult(I iface, bm_meter_array_set_rates_args args) throws org.apache.thrift.TException {
        bm_meter_array_set_rates_result result = new bm_meter_array_set_rates_result();
        try {
          iface.bm_meter_array_set_rates(args.cxt_id, args.meter_array_name, args.rates);
        } catch (InvalidMeterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_meter_set_rates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_meter_set_rates_args> {
      public bm_meter_set_rates() {
        super("bm_meter_set_rates");
      }

      public bm_meter_set_rates_args getEmptyArgsInstance() {
        return new bm_meter_set_rates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_meter_set_rates_result getResult(I iface, bm_meter_set_rates_args args) throws org.apache.thrift.TException {
        bm_meter_set_rates_result result = new bm_meter_set_rates_result();
        try {
          iface.bm_meter_set_rates(args.cxt_id, args.meter_array_name, args.index, args.rates);
        } catch (InvalidMeterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_register_read<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_register_read_args> {
      public bm_register_read() {
        super("bm_register_read");
      }

      public bm_register_read_args getEmptyArgsInstance() {
        return new bm_register_read_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_register_read_result getResult(I iface, bm_register_read_args args) throws org.apache.thrift.TException {
        bm_register_read_result result = new bm_register_read_result();
        try {
          result.success = iface.bm_register_read(args.cxt_id, args.register_array_name, args.idx);
          result.setSuccessIsSet(true);
        } catch (InvalidRegisterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_register_write<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_register_write_args> {
      public bm_register_write() {
        super("bm_register_write");
      }

      public bm_register_write_args getEmptyArgsInstance() {
        return new bm_register_write_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_register_write_result getResult(I iface, bm_register_write_args args) throws org.apache.thrift.TException {
        bm_register_write_result result = new bm_register_write_result();
        try {
          iface.bm_register_write(args.cxt_id, args.register_array_name, args.index, args.value);
        } catch (InvalidRegisterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_register_write_range<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_register_write_range_args> {
      public bm_register_write_range() {
        super("bm_register_write_range");
      }

      public bm_register_write_range_args getEmptyArgsInstance() {
        return new bm_register_write_range_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_register_write_range_result getResult(I iface, bm_register_write_range_args args) throws org.apache.thrift.TException {
        bm_register_write_range_result result = new bm_register_write_range_result();
        try {
          iface.bm_register_write_range(args.cxt_id, args.register_array_name, args.start_index, args.end_index, args.value);
        } catch (InvalidRegisterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_register_reset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_register_reset_args> {
      public bm_register_reset() {
        super("bm_register_reset");
      }

      public bm_register_reset_args getEmptyArgsInstance() {
        return new bm_register_reset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_register_reset_result getResult(I iface, bm_register_reset_args args) throws org.apache.thrift.TException {
        bm_register_reset_result result = new bm_register_reset_result();
        try {
          iface.bm_register_reset(args.cxt_id, args.register_array_name);
        } catch (InvalidRegisterOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_dev_mgr_add_port<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_dev_mgr_add_port_args> {
      public bm_dev_mgr_add_port() {
        super("bm_dev_mgr_add_port");
      }

      public bm_dev_mgr_add_port_args getEmptyArgsInstance() {
        return new bm_dev_mgr_add_port_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_dev_mgr_add_port_result getResult(I iface, bm_dev_mgr_add_port_args args) throws org.apache.thrift.TException {
        bm_dev_mgr_add_port_result result = new bm_dev_mgr_add_port_result();
        try {
          iface.bm_dev_mgr_add_port(args.iface_name, args.port_num, args.pcap_path);
        } catch (InvalidDevMgrOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_dev_mgr_remove_port<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_dev_mgr_remove_port_args> {
      public bm_dev_mgr_remove_port() {
        super("bm_dev_mgr_remove_port");
      }

      public bm_dev_mgr_remove_port_args getEmptyArgsInstance() {
        return new bm_dev_mgr_remove_port_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_dev_mgr_remove_port_result getResult(I iface, bm_dev_mgr_remove_port_args args) throws org.apache.thrift.TException {
        bm_dev_mgr_remove_port_result result = new bm_dev_mgr_remove_port_result();
        try {
          iface.bm_dev_mgr_remove_port(args.port_num);
        } catch (InvalidDevMgrOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_dev_mgr_show_ports<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_dev_mgr_show_ports_args> {
      public bm_dev_mgr_show_ports() {
        super("bm_dev_mgr_show_ports");
      }

      public bm_dev_mgr_show_ports_args getEmptyArgsInstance() {
        return new bm_dev_mgr_show_ports_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_dev_mgr_show_ports_result getResult(I iface, bm_dev_mgr_show_ports_args args) throws org.apache.thrift.TException {
        bm_dev_mgr_show_ports_result result = new bm_dev_mgr_show_ports_result();
        try {
          result.success = iface.bm_dev_mgr_show_ports();
        } catch (InvalidDevMgrOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mgmt_get_info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mgmt_get_info_args> {
      public bm_mgmt_get_info() {
        super("bm_mgmt_get_info");
      }

      public bm_mgmt_get_info_args getEmptyArgsInstance() {
        return new bm_mgmt_get_info_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mgmt_get_info_result getResult(I iface, bm_mgmt_get_info_args args) throws org.apache.thrift.TException {
        bm_mgmt_get_info_result result = new bm_mgmt_get_info_result();
        result.success = iface.bm_mgmt_get_info();
        return result;
      }
    }

    public static class bm_set_crc16_custom_parameters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_set_crc16_custom_parameters_args> {
      public bm_set_crc16_custom_parameters() {
        super("bm_set_crc16_custom_parameters");
      }

      public bm_set_crc16_custom_parameters_args getEmptyArgsInstance() {
        return new bm_set_crc16_custom_parameters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_set_crc16_custom_parameters_result getResult(I iface, bm_set_crc16_custom_parameters_args args) throws org.apache.thrift.TException {
        bm_set_crc16_custom_parameters_result result = new bm_set_crc16_custom_parameters_result();
        try {
          iface.bm_set_crc16_custom_parameters(args.cxt_id, args.calc_name, args.crc16_config);
        } catch (InvalidCrcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_set_crc32_custom_parameters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_set_crc32_custom_parameters_args> {
      public bm_set_crc32_custom_parameters() {
        super("bm_set_crc32_custom_parameters");
      }

      public bm_set_crc32_custom_parameters_args getEmptyArgsInstance() {
        return new bm_set_crc32_custom_parameters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_set_crc32_custom_parameters_result getResult(I iface, bm_set_crc32_custom_parameters_args args) throws org.apache.thrift.TException {
        bm_set_crc32_custom_parameters_result result = new bm_set_crc32_custom_parameters_result();
        try {
          iface.bm_set_crc32_custom_parameters(args.cxt_id, args.calc_name, args.crc32_config);
        } catch (InvalidCrcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_reset_state<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_reset_state_args> {
      public bm_reset_state() {
        super("bm_reset_state");
      }

      public bm_reset_state_args getEmptyArgsInstance() {
        return new bm_reset_state_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_reset_state_result getResult(I iface, bm_reset_state_args args) throws org.apache.thrift.TException {
        bm_reset_state_result result = new bm_reset_state_result();
        iface.bm_reset_state();
        return result;
      }
    }

    public static class bm_get_config<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_get_config_args> {
      public bm_get_config() {
        super("bm_get_config");
      }

      public bm_get_config_args getEmptyArgsInstance() {
        return new bm_get_config_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_get_config_result getResult(I iface, bm_get_config_args args) throws org.apache.thrift.TException {
        bm_get_config_result result = new bm_get_config_result();
        result.success = iface.bm_get_config();
        return result;
      }
    }

    public static class bm_get_config_md5<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_get_config_md5_args> {
      public bm_get_config_md5() {
        super("bm_get_config_md5");
      }

      public bm_get_config_md5_args getEmptyArgsInstance() {
        return new bm_get_config_md5_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_get_config_md5_result getResult(I iface, bm_get_config_md5_args args) throws org.apache.thrift.TException {
        bm_get_config_md5_result result = new bm_get_config_md5_result();
        result.success = iface.bm_get_config_md5();
        return result;
      }
    }

    public static class bm_serialize_state<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_serialize_state_args> {
      public bm_serialize_state() {
        super("bm_serialize_state");
      }

      public bm_serialize_state_args getEmptyArgsInstance() {
        return new bm_serialize_state_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_serialize_state_result getResult(I iface, bm_serialize_state_args args) throws org.apache.thrift.TException {
        bm_serialize_state_result result = new bm_serialize_state_result();
        result.success = iface.bm_serialize_state();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("bm_mt_add_entry", new bm_mt_add_entry());
      processMap.put("bm_mt_set_default_action", new bm_mt_set_default_action());
      processMap.put("bm_mt_delete_entry", new bm_mt_delete_entry());
      processMap.put("bm_mt_modify_entry", new bm_mt_modify_entry());
      processMap.put("bm_mt_set_entry_ttl", new bm_mt_set_entry_ttl());
      processMap.put("bm_mt_indirect_add_member", new bm_mt_indirect_add_member());
      processMap.put("bm_mt_indirect_delete_member", new bm_mt_indirect_delete_member());
      processMap.put("bm_mt_indirect_modify_member", new bm_mt_indirect_modify_member());
      processMap.put("bm_mt_indirect_add_entry", new bm_mt_indirect_add_entry());
      processMap.put("bm_mt_indirect_modify_entry", new bm_mt_indirect_modify_entry());
      processMap.put("bm_mt_indirect_delete_entry", new bm_mt_indirect_delete_entry());
      processMap.put("bm_mt_indirect_set_entry_ttl", new bm_mt_indirect_set_entry_ttl());
      processMap.put("bm_mt_indirect_set_default_member", new bm_mt_indirect_set_default_member());
      processMap.put("bm_mt_indirect_ws_create_group", new bm_mt_indirect_ws_create_group());
      processMap.put("bm_mt_indirect_ws_delete_group", new bm_mt_indirect_ws_delete_group());
      processMap.put("bm_mt_indirect_ws_add_member_to_group", new bm_mt_indirect_ws_add_member_to_group());
      processMap.put("bm_mt_indirect_ws_remove_member_from_group", new bm_mt_indirect_ws_remove_member_from_group());
      processMap.put("bm_mt_indirect_ws_add_entry", new bm_mt_indirect_ws_add_entry());
      processMap.put("bm_mt_indirect_ws_modify_entry", new bm_mt_indirect_ws_modify_entry());
      processMap.put("bm_mt_indirect_ws_set_default_group", new bm_mt_indirect_ws_set_default_group());
      processMap.put("bm_mt_read_counter", new bm_mt_read_counter());
      processMap.put("bm_mt_reset_counters", new bm_mt_reset_counters());
      processMap.put("bm_mt_write_counter", new bm_mt_write_counter());
      processMap.put("bm_mt_set_meter_rates", new bm_mt_set_meter_rates());
      processMap.put("bm_mt_get_entries", new bm_mt_get_entries());
      processMap.put("bm_mt_get_default_entry", new bm_mt_get_default_entry());
      processMap.put("bm_mt_indirect_get_members", new bm_mt_indirect_get_members());
      processMap.put("bm_mt_indirect_ws_get_groups", new bm_mt_indirect_ws_get_groups());
      processMap.put("bm_counter_read", new bm_counter_read());
      processMap.put("bm_counter_reset_all", new bm_counter_reset_all());
      processMap.put("bm_counter_write", new bm_counter_write());
      processMap.put("bm_learning_ack", new bm_learning_ack());
      processMap.put("bm_learning_ack_buffer", new bm_learning_ack_buffer());
      processMap.put("bm_learning_set_timeout", new bm_learning_set_timeout());
      processMap.put("bm_learning_set_buffer_size", new bm_learning_set_buffer_size());
      processMap.put("bm_load_new_config", new bm_load_new_config());
      processMap.put("bm_swap_configs", new bm_swap_configs());
      processMap.put("bm_meter_array_set_rates", new bm_meter_array_set_rates());
      processMap.put("bm_meter_set_rates", new bm_meter_set_rates());
      processMap.put("bm_register_read", new bm_register_read());
      processMap.put("bm_register_write", new bm_register_write());
      processMap.put("bm_register_write_range", new bm_register_write_range());
      processMap.put("bm_register_reset", new bm_register_reset());
      processMap.put("bm_dev_mgr_add_port", new bm_dev_mgr_add_port());
      processMap.put("bm_dev_mgr_remove_port", new bm_dev_mgr_remove_port());
      processMap.put("bm_dev_mgr_show_ports", new bm_dev_mgr_show_ports());
      processMap.put("bm_mgmt_get_info", new bm_mgmt_get_info());
      processMap.put("bm_set_crc16_custom_parameters", new bm_set_crc16_custom_parameters());
      processMap.put("bm_set_crc32_custom_parameters", new bm_set_crc32_custom_parameters());
      processMap.put("bm_reset_state", new bm_reset_state());
      processMap.put("bm_get_config", new bm_get_config());
      processMap.put("bm_get_config_md5", new bm_get_config_md5());
      processMap.put("bm_serialize_state", new bm_serialize_state());
      return processMap;
    }

    public static class bm_mt_add_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_add_entry_args, Long> {
      public bm_mt_add_entry() {
        super("bm_mt_add_entry");
      }

      public bm_mt_add_entry_args getEmptyArgsInstance() {
        return new bm_mt_add_entry_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            bm_mt_add_entry_result result = new bm_mt_add_entry_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_add_entry_result result = new bm_mt_add_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_add_entry_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.bm_mt_add_entry(args.cxt_id, args.table_name, args.match_key, args.action_name, args.action_data, args.options,resultHandler);
      }
    }

    public static class bm_mt_set_default_action<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_set_default_action_args, Void> {
      public bm_mt_set_default_action() {
        super("bm_mt_set_default_action");
      }

      public bm_mt_set_default_action_args getEmptyArgsInstance() {
        return new bm_mt_set_default_action_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_set_default_action_result result = new bm_mt_set_default_action_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_set_default_action_result result = new bm_mt_set_default_action_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_set_default_action_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_set_default_action(args.cxt_id, args.table_name, args.action_name, args.action_data,resultHandler);
      }
    }

    public static class bm_mt_delete_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_delete_entry_args, Void> {
      public bm_mt_delete_entry() {
        super("bm_mt_delete_entry");
      }

      public bm_mt_delete_entry_args getEmptyArgsInstance() {
        return new bm_mt_delete_entry_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_delete_entry_result result = new bm_mt_delete_entry_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_delete_entry_result result = new bm_mt_delete_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_delete_entry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_delete_entry(args.cxt_id, args.table_name, args.entry_handle,resultHandler);
      }
    }

    public static class bm_mt_modify_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_modify_entry_args, Void> {
      public bm_mt_modify_entry() {
        super("bm_mt_modify_entry");
      }

      public bm_mt_modify_entry_args getEmptyArgsInstance() {
        return new bm_mt_modify_entry_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_modify_entry_result result = new bm_mt_modify_entry_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_modify_entry_result result = new bm_mt_modify_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_modify_entry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_modify_entry(args.cxt_id, args.table_name, args.entry_handle, args.action_name, args.action_data,resultHandler);
      }
    }

    public static class bm_mt_set_entry_ttl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_set_entry_ttl_args, Void> {
      public bm_mt_set_entry_ttl() {
        super("bm_mt_set_entry_ttl");
      }

      public bm_mt_set_entry_ttl_args getEmptyArgsInstance() {
        return new bm_mt_set_entry_ttl_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_set_entry_ttl_result result = new bm_mt_set_entry_ttl_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_set_entry_ttl_result result = new bm_mt_set_entry_ttl_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_set_entry_ttl_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_set_entry_ttl(args.cxt_id, args.table_name, args.entry_handle, args.timeout_ms,resultHandler);
      }
    }

    public static class bm_mt_indirect_add_member<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_add_member_args, Integer> {
      public bm_mt_indirect_add_member() {
        super("bm_mt_indirect_add_member");
      }

      public bm_mt_indirect_add_member_args getEmptyArgsInstance() {
        return new bm_mt_indirect_add_member_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            bm_mt_indirect_add_member_result result = new bm_mt_indirect_add_member_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_add_member_result result = new bm_mt_indirect_add_member_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_add_member_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.bm_mt_indirect_add_member(args.cxt_id, args.table_name, args.action_name, args.action_data,resultHandler);
      }
    }

    public static class bm_mt_indirect_delete_member<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_delete_member_args, Void> {
      public bm_mt_indirect_delete_member() {
        super("bm_mt_indirect_delete_member");
      }

      public bm_mt_indirect_delete_member_args getEmptyArgsInstance() {
        return new bm_mt_indirect_delete_member_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_delete_member_result result = new bm_mt_indirect_delete_member_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_delete_member_result result = new bm_mt_indirect_delete_member_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_delete_member_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_delete_member(args.cxt_id, args.table_name, args.mbr_handle,resultHandler);
      }
    }

    public static class bm_mt_indirect_modify_member<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_modify_member_args, Void> {
      public bm_mt_indirect_modify_member() {
        super("bm_mt_indirect_modify_member");
      }

      public bm_mt_indirect_modify_member_args getEmptyArgsInstance() {
        return new bm_mt_indirect_modify_member_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_modify_member_result result = new bm_mt_indirect_modify_member_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_modify_member_result result = new bm_mt_indirect_modify_member_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_modify_member_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_modify_member(args.cxt_id, args.table_name, args.mbr_handle, args.action_name, args.action_data,resultHandler);
      }
    }

    public static class bm_mt_indirect_add_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_add_entry_args, Long> {
      public bm_mt_indirect_add_entry() {
        super("bm_mt_indirect_add_entry");
      }

      public bm_mt_indirect_add_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_add_entry_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            bm_mt_indirect_add_entry_result result = new bm_mt_indirect_add_entry_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_add_entry_result result = new bm_mt_indirect_add_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_add_entry_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.bm_mt_indirect_add_entry(args.cxt_id, args.table_name, args.match_key, args.mbr_handle, args.options,resultHandler);
      }
    }

    public static class bm_mt_indirect_modify_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_modify_entry_args, Void> {
      public bm_mt_indirect_modify_entry() {
        super("bm_mt_indirect_modify_entry");
      }

      public bm_mt_indirect_modify_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_modify_entry_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_modify_entry_result result = new bm_mt_indirect_modify_entry_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_modify_entry_result result = new bm_mt_indirect_modify_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_modify_entry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_modify_entry(args.cxt_id, args.table_name, args.entry_handle, args.mbr_handle,resultHandler);
      }
    }

    public static class bm_mt_indirect_delete_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_delete_entry_args, Void> {
      public bm_mt_indirect_delete_entry() {
        super("bm_mt_indirect_delete_entry");
      }

      public bm_mt_indirect_delete_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_delete_entry_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_delete_entry_result result = new bm_mt_indirect_delete_entry_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_delete_entry_result result = new bm_mt_indirect_delete_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_delete_entry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_delete_entry(args.cxt_id, args.table_name, args.entry_handle,resultHandler);
      }
    }

    public static class bm_mt_indirect_set_entry_ttl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_set_entry_ttl_args, Void> {
      public bm_mt_indirect_set_entry_ttl() {
        super("bm_mt_indirect_set_entry_ttl");
      }

      public bm_mt_indirect_set_entry_ttl_args getEmptyArgsInstance() {
        return new bm_mt_indirect_set_entry_ttl_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_set_entry_ttl_result result = new bm_mt_indirect_set_entry_ttl_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_set_entry_ttl_result result = new bm_mt_indirect_set_entry_ttl_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_set_entry_ttl_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_set_entry_ttl(args.cxt_id, args.table_name, args.entry_handle, args.timeout_ms,resultHandler);
      }
    }

    public static class bm_mt_indirect_set_default_member<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_set_default_member_args, Void> {
      public bm_mt_indirect_set_default_member() {
        super("bm_mt_indirect_set_default_member");
      }

      public bm_mt_indirect_set_default_member_args getEmptyArgsInstance() {
        return new bm_mt_indirect_set_default_member_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_set_default_member_result result = new bm_mt_indirect_set_default_member_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_set_default_member_result result = new bm_mt_indirect_set_default_member_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_set_default_member_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_set_default_member(args.cxt_id, args.table_name, args.mbr_handle,resultHandler);
      }
    }

    public static class bm_mt_indirect_ws_create_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_ws_create_group_args, Integer> {
      public bm_mt_indirect_ws_create_group() {
        super("bm_mt_indirect_ws_create_group");
      }

      public bm_mt_indirect_ws_create_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_create_group_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            bm_mt_indirect_ws_create_group_result result = new bm_mt_indirect_ws_create_group_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_ws_create_group_result result = new bm_mt_indirect_ws_create_group_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_ws_create_group_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.bm_mt_indirect_ws_create_group(args.cxt_id, args.table_name,resultHandler);
      }
    }

    public static class bm_mt_indirect_ws_delete_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_ws_delete_group_args, Void> {
      public bm_mt_indirect_ws_delete_group() {
        super("bm_mt_indirect_ws_delete_group");
      }

      public bm_mt_indirect_ws_delete_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_delete_group_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_ws_delete_group_result result = new bm_mt_indirect_ws_delete_group_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_ws_delete_group_result result = new bm_mt_indirect_ws_delete_group_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_ws_delete_group_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_ws_delete_group(args.cxt_id, args.table_name, args.grp_handle,resultHandler);
      }
    }

    public static class bm_mt_indirect_ws_add_member_to_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_ws_add_member_to_group_args, Void> {
      public bm_mt_indirect_ws_add_member_to_group() {
        super("bm_mt_indirect_ws_add_member_to_group");
      }

      public bm_mt_indirect_ws_add_member_to_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_add_member_to_group_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_ws_add_member_to_group_result result = new bm_mt_indirect_ws_add_member_to_group_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_ws_add_member_to_group_result result = new bm_mt_indirect_ws_add_member_to_group_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_ws_add_member_to_group_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_ws_add_member_to_group(args.cxt_id, args.table_name, args.mbr_handle, args.grp_handle,resultHandler);
      }
    }

    public static class bm_mt_indirect_ws_remove_member_from_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_ws_remove_member_from_group_args, Void> {
      public bm_mt_indirect_ws_remove_member_from_group() {
        super("bm_mt_indirect_ws_remove_member_from_group");
      }

      public bm_mt_indirect_ws_remove_member_from_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_remove_member_from_group_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_ws_remove_member_from_group_result result = new bm_mt_indirect_ws_remove_member_from_group_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_ws_remove_member_from_group_result result = new bm_mt_indirect_ws_remove_member_from_group_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_ws_remove_member_from_group_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_ws_remove_member_from_group(args.cxt_id, args.table_name, args.mbr_handle, args.grp_handle,resultHandler);
      }
    }

    public static class bm_mt_indirect_ws_add_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_ws_add_entry_args, Long> {
      public bm_mt_indirect_ws_add_entry() {
        super("bm_mt_indirect_ws_add_entry");
      }

      public bm_mt_indirect_ws_add_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_add_entry_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            bm_mt_indirect_ws_add_entry_result result = new bm_mt_indirect_ws_add_entry_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_ws_add_entry_result result = new bm_mt_indirect_ws_add_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_ws_add_entry_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.bm_mt_indirect_ws_add_entry(args.cxt_id, args.table_name, args.match_key, args.grp_handle, args.options,resultHandler);
      }
    }

    public static class bm_mt_indirect_ws_modify_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_ws_modify_entry_args, Void> {
      public bm_mt_indirect_ws_modify_entry() {
        super("bm_mt_indirect_ws_modify_entry");
      }

      public bm_mt_indirect_ws_modify_entry_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_modify_entry_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_ws_modify_entry_result result = new bm_mt_indirect_ws_modify_entry_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_ws_modify_entry_result result = new bm_mt_indirect_ws_modify_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_ws_modify_entry_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_ws_modify_entry(args.cxt_id, args.table_name, args.entry_handle, args.grp_handle,resultHandler);
      }
    }

    public static class bm_mt_indirect_ws_set_default_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_ws_set_default_group_args, Void> {
      public bm_mt_indirect_ws_set_default_group() {
        super("bm_mt_indirect_ws_set_default_group");
      }

      public bm_mt_indirect_ws_set_default_group_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_set_default_group_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_indirect_ws_set_default_group_result result = new bm_mt_indirect_ws_set_default_group_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_ws_set_default_group_result result = new bm_mt_indirect_ws_set_default_group_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_ws_set_default_group_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_indirect_ws_set_default_group(args.cxt_id, args.table_name, args.grp_handle,resultHandler);
      }
    }

    public static class bm_mt_read_counter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_read_counter_args, BmCounterValue> {
      public bm_mt_read_counter() {
        super("bm_mt_read_counter");
      }

      public bm_mt_read_counter_args getEmptyArgsInstance() {
        return new bm_mt_read_counter_args();
      }

      public AsyncMethodCallback<BmCounterValue> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BmCounterValue>() { 
          public void onComplete(BmCounterValue o) {
            bm_mt_read_counter_result result = new bm_mt_read_counter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_read_counter_result result = new bm_mt_read_counter_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_read_counter_args args, org.apache.thrift.async.AsyncMethodCallback<BmCounterValue> resultHandler) throws TException {
        iface.bm_mt_read_counter(args.cxt_id, args.table_name, args.entry_handle,resultHandler);
      }
    }

    public static class bm_mt_reset_counters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_reset_counters_args, Void> {
      public bm_mt_reset_counters() {
        super("bm_mt_reset_counters");
      }

      public bm_mt_reset_counters_args getEmptyArgsInstance() {
        return new bm_mt_reset_counters_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_reset_counters_result result = new bm_mt_reset_counters_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_reset_counters_result result = new bm_mt_reset_counters_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_reset_counters_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_reset_counters(args.cxt_id, args.table_name,resultHandler);
      }
    }

    public static class bm_mt_write_counter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_write_counter_args, Void> {
      public bm_mt_write_counter() {
        super("bm_mt_write_counter");
      }

      public bm_mt_write_counter_args getEmptyArgsInstance() {
        return new bm_mt_write_counter_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_write_counter_result result = new bm_mt_write_counter_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_write_counter_result result = new bm_mt_write_counter_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_write_counter_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_write_counter(args.cxt_id, args.table_name, args.entry_handle, args.value,resultHandler);
      }
    }

    public static class bm_mt_set_meter_rates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_set_meter_rates_args, Void> {
      public bm_mt_set_meter_rates() {
        super("bm_mt_set_meter_rates");
      }

      public bm_mt_set_meter_rates_args getEmptyArgsInstance() {
        return new bm_mt_set_meter_rates_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mt_set_meter_rates_result result = new bm_mt_set_meter_rates_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_set_meter_rates_result result = new bm_mt_set_meter_rates_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_set_meter_rates_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mt_set_meter_rates(args.cxt_id, args.table_name, args.entry_handle, args.rates,resultHandler);
      }
    }

    public static class bm_mt_get_entries<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_get_entries_args, List<BmMtEntry>> {
      public bm_mt_get_entries() {
        super("bm_mt_get_entries");
      }

      public bm_mt_get_entries_args getEmptyArgsInstance() {
        return new bm_mt_get_entries_args();
      }

      public AsyncMethodCallback<List<BmMtEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BmMtEntry>>() { 
          public void onComplete(List<BmMtEntry> o) {
            bm_mt_get_entries_result result = new bm_mt_get_entries_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_get_entries_result result = new bm_mt_get_entries_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_get_entries_args args, org.apache.thrift.async.AsyncMethodCallback<List<BmMtEntry>> resultHandler) throws TException {
        iface.bm_mt_get_entries(args.cxt_id, args.table_name,resultHandler);
      }
    }

    public static class bm_mt_get_default_entry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_get_default_entry_args, BmActionEntry> {
      public bm_mt_get_default_entry() {
        super("bm_mt_get_default_entry");
      }

      public bm_mt_get_default_entry_args getEmptyArgsInstance() {
        return new bm_mt_get_default_entry_args();
      }

      public AsyncMethodCallback<BmActionEntry> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BmActionEntry>() { 
          public void onComplete(BmActionEntry o) {
            bm_mt_get_default_entry_result result = new bm_mt_get_default_entry_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_get_default_entry_result result = new bm_mt_get_default_entry_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_get_default_entry_args args, org.apache.thrift.async.AsyncMethodCallback<BmActionEntry> resultHandler) throws TException {
        iface.bm_mt_get_default_entry(args.cxt_id, args.table_name,resultHandler);
      }
    }

    public static class bm_mt_indirect_get_members<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_get_members_args, List<BmMtIndirectMember>> {
      public bm_mt_indirect_get_members() {
        super("bm_mt_indirect_get_members");
      }

      public bm_mt_indirect_get_members_args getEmptyArgsInstance() {
        return new bm_mt_indirect_get_members_args();
      }

      public AsyncMethodCallback<List<BmMtIndirectMember>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BmMtIndirectMember>>() { 
          public void onComplete(List<BmMtIndirectMember> o) {
            bm_mt_indirect_get_members_result result = new bm_mt_indirect_get_members_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_get_members_result result = new bm_mt_indirect_get_members_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_get_members_args args, org.apache.thrift.async.AsyncMethodCallback<List<BmMtIndirectMember>> resultHandler) throws TException {
        iface.bm_mt_indirect_get_members(args.cxt_id, args.table_name,resultHandler);
      }
    }

    public static class bm_mt_indirect_ws_get_groups<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mt_indirect_ws_get_groups_args, List<BmMtIndirectWsGroup>> {
      public bm_mt_indirect_ws_get_groups() {
        super("bm_mt_indirect_ws_get_groups");
      }

      public bm_mt_indirect_ws_get_groups_args getEmptyArgsInstance() {
        return new bm_mt_indirect_ws_get_groups_args();
      }

      public AsyncMethodCallback<List<BmMtIndirectWsGroup>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BmMtIndirectWsGroup>>() { 
          public void onComplete(List<BmMtIndirectWsGroup> o) {
            bm_mt_indirect_ws_get_groups_result result = new bm_mt_indirect_ws_get_groups_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mt_indirect_ws_get_groups_result result = new bm_mt_indirect_ws_get_groups_result();
            if (e instanceof InvalidTableOperation) {
                        result.ouch = (InvalidTableOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mt_indirect_ws_get_groups_args args, org.apache.thrift.async.AsyncMethodCallback<List<BmMtIndirectWsGroup>> resultHandler) throws TException {
        iface.bm_mt_indirect_ws_get_groups(args.cxt_id, args.table_name,resultHandler);
      }
    }

    public static class bm_counter_read<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_counter_read_args, BmCounterValue> {
      public bm_counter_read() {
        super("bm_counter_read");
      }

      public bm_counter_read_args getEmptyArgsInstance() {
        return new bm_counter_read_args();
      }

      public AsyncMethodCallback<BmCounterValue> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BmCounterValue>() { 
          public void onComplete(BmCounterValue o) {
            bm_counter_read_result result = new bm_counter_read_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_counter_read_result result = new bm_counter_read_result();
            if (e instanceof InvalidCounterOperation) {
                        result.ouch = (InvalidCounterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_counter_read_args args, org.apache.thrift.async.AsyncMethodCallback<BmCounterValue> resultHandler) throws TException {
        iface.bm_counter_read(args.cxt_id, args.counter_name, args.index,resultHandler);
      }
    }

    public static class bm_counter_reset_all<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_counter_reset_all_args, Void> {
      public bm_counter_reset_all() {
        super("bm_counter_reset_all");
      }

      public bm_counter_reset_all_args getEmptyArgsInstance() {
        return new bm_counter_reset_all_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_counter_reset_all_result result = new bm_counter_reset_all_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_counter_reset_all_result result = new bm_counter_reset_all_result();
            if (e instanceof InvalidCounterOperation) {
                        result.ouch = (InvalidCounterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_counter_reset_all_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_counter_reset_all(args.cxt_id, args.counter_name,resultHandler);
      }
    }

    public static class bm_counter_write<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_counter_write_args, Void> {
      public bm_counter_write() {
        super("bm_counter_write");
      }

      public bm_counter_write_args getEmptyArgsInstance() {
        return new bm_counter_write_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_counter_write_result result = new bm_counter_write_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_counter_write_result result = new bm_counter_write_result();
            if (e instanceof InvalidCounterOperation) {
                        result.ouch = (InvalidCounterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_counter_write_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_counter_write(args.cxt_id, args.counter_name, args.index, args.value,resultHandler);
      }
    }

    public static class bm_learning_ack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_learning_ack_args, Void> {
      public bm_learning_ack() {
        super("bm_learning_ack");
      }

      public bm_learning_ack_args getEmptyArgsInstance() {
        return new bm_learning_ack_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_learning_ack_result result = new bm_learning_ack_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_learning_ack_result result = new bm_learning_ack_result();
            if (e instanceof InvalidLearnOperation) {
                        result.ouch = (InvalidLearnOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_learning_ack_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_learning_ack(args.cxt_id, args.list_id, args.buffer_id, args.sample_ids,resultHandler);
      }
    }

    public static class bm_learning_ack_buffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_learning_ack_buffer_args, Void> {
      public bm_learning_ack_buffer() {
        super("bm_learning_ack_buffer");
      }

      public bm_learning_ack_buffer_args getEmptyArgsInstance() {
        return new bm_learning_ack_buffer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_learning_ack_buffer_result result = new bm_learning_ack_buffer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_learning_ack_buffer_result result = new bm_learning_ack_buffer_result();
            if (e instanceof InvalidLearnOperation) {
                        result.ouch = (InvalidLearnOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_learning_ack_buffer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_learning_ack_buffer(args.cxt_id, args.list_id, args.buffer_id,resultHandler);
      }
    }

    public static class bm_learning_set_timeout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_learning_set_timeout_args, Void> {
      public bm_learning_set_timeout() {
        super("bm_learning_set_timeout");
      }

      public bm_learning_set_timeout_args getEmptyArgsInstance() {
        return new bm_learning_set_timeout_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_learning_set_timeout_result result = new bm_learning_set_timeout_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_learning_set_timeout_result result = new bm_learning_set_timeout_result();
            if (e instanceof InvalidLearnOperation) {
                        result.ouch = (InvalidLearnOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_learning_set_timeout_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_learning_set_timeout(args.cxt_id, args.list_id, args.timeout_ms,resultHandler);
      }
    }

    public static class bm_learning_set_buffer_size<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_learning_set_buffer_size_args, Void> {
      public bm_learning_set_buffer_size() {
        super("bm_learning_set_buffer_size");
      }

      public bm_learning_set_buffer_size_args getEmptyArgsInstance() {
        return new bm_learning_set_buffer_size_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_learning_set_buffer_size_result result = new bm_learning_set_buffer_size_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_learning_set_buffer_size_result result = new bm_learning_set_buffer_size_result();
            if (e instanceof InvalidLearnOperation) {
                        result.ouch = (InvalidLearnOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_learning_set_buffer_size_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_learning_set_buffer_size(args.cxt_id, args.list_id, args.nb_samples,resultHandler);
      }
    }

    public static class bm_load_new_config<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_load_new_config_args, Void> {
      public bm_load_new_config() {
        super("bm_load_new_config");
      }

      public bm_load_new_config_args getEmptyArgsInstance() {
        return new bm_load_new_config_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_load_new_config_result result = new bm_load_new_config_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_load_new_config_result result = new bm_load_new_config_result();
            if (e instanceof InvalidSwapOperation) {
                        result.ouch = (InvalidSwapOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_load_new_config_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_load_new_config(args.config_str,resultHandler);
      }
    }

    public static class bm_swap_configs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_swap_configs_args, Void> {
      public bm_swap_configs() {
        super("bm_swap_configs");
      }

      public bm_swap_configs_args getEmptyArgsInstance() {
        return new bm_swap_configs_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_swap_configs_result result = new bm_swap_configs_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_swap_configs_result result = new bm_swap_configs_result();
            if (e instanceof InvalidSwapOperation) {
                        result.ouch = (InvalidSwapOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_swap_configs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_swap_configs(resultHandler);
      }
    }

    public static class bm_meter_array_set_rates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_meter_array_set_rates_args, Void> {
      public bm_meter_array_set_rates() {
        super("bm_meter_array_set_rates");
      }

      public bm_meter_array_set_rates_args getEmptyArgsInstance() {
        return new bm_meter_array_set_rates_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_meter_array_set_rates_result result = new bm_meter_array_set_rates_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_meter_array_set_rates_result result = new bm_meter_array_set_rates_result();
            if (e instanceof InvalidMeterOperation) {
                        result.ouch = (InvalidMeterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_meter_array_set_rates_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_meter_array_set_rates(args.cxt_id, args.meter_array_name, args.rates,resultHandler);
      }
    }

    public static class bm_meter_set_rates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_meter_set_rates_args, Void> {
      public bm_meter_set_rates() {
        super("bm_meter_set_rates");
      }

      public bm_meter_set_rates_args getEmptyArgsInstance() {
        return new bm_meter_set_rates_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_meter_set_rates_result result = new bm_meter_set_rates_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_meter_set_rates_result result = new bm_meter_set_rates_result();
            if (e instanceof InvalidMeterOperation) {
                        result.ouch = (InvalidMeterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_meter_set_rates_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_meter_set_rates(args.cxt_id, args.meter_array_name, args.index, args.rates,resultHandler);
      }
    }

    public static class bm_register_read<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_register_read_args, Long> {
      public bm_register_read() {
        super("bm_register_read");
      }

      public bm_register_read_args getEmptyArgsInstance() {
        return new bm_register_read_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            bm_register_read_result result = new bm_register_read_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_register_read_result result = new bm_register_read_result();
            if (e instanceof InvalidRegisterOperation) {
                        result.ouch = (InvalidRegisterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_register_read_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.bm_register_read(args.cxt_id, args.register_array_name, args.idx,resultHandler);
      }
    }

    public static class bm_register_write<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_register_write_args, Void> {
      public bm_register_write() {
        super("bm_register_write");
      }

      public bm_register_write_args getEmptyArgsInstance() {
        return new bm_register_write_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_register_write_result result = new bm_register_write_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_register_write_result result = new bm_register_write_result();
            if (e instanceof InvalidRegisterOperation) {
                        result.ouch = (InvalidRegisterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_register_write_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_register_write(args.cxt_id, args.register_array_name, args.index, args.value,resultHandler);
      }
    }

    public static class bm_register_write_range<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_register_write_range_args, Void> {
      public bm_register_write_range() {
        super("bm_register_write_range");
      }

      public bm_register_write_range_args getEmptyArgsInstance() {
        return new bm_register_write_range_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_register_write_range_result result = new bm_register_write_range_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_register_write_range_result result = new bm_register_write_range_result();
            if (e instanceof InvalidRegisterOperation) {
                        result.ouch = (InvalidRegisterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_register_write_range_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_register_write_range(args.cxt_id, args.register_array_name, args.start_index, args.end_index, args.value,resultHandler);
      }
    }

    public static class bm_register_reset<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_register_reset_args, Void> {
      public bm_register_reset() {
        super("bm_register_reset");
      }

      public bm_register_reset_args getEmptyArgsInstance() {
        return new bm_register_reset_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_register_reset_result result = new bm_register_reset_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_register_reset_result result = new bm_register_reset_result();
            if (e instanceof InvalidRegisterOperation) {
                        result.ouch = (InvalidRegisterOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_register_reset_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_register_reset(args.cxt_id, args.register_array_name,resultHandler);
      }
    }

    public static class bm_dev_mgr_add_port<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_dev_mgr_add_port_args, Void> {
      public bm_dev_mgr_add_port() {
        super("bm_dev_mgr_add_port");
      }

      public bm_dev_mgr_add_port_args getEmptyArgsInstance() {
        return new bm_dev_mgr_add_port_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_dev_mgr_add_port_result result = new bm_dev_mgr_add_port_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_dev_mgr_add_port_result result = new bm_dev_mgr_add_port_result();
            if (e instanceof InvalidDevMgrOperation) {
                        result.ouch = (InvalidDevMgrOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_dev_mgr_add_port_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_dev_mgr_add_port(args.iface_name, args.port_num, args.pcap_path,resultHandler);
      }
    }

    public static class bm_dev_mgr_remove_port<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_dev_mgr_remove_port_args, Void> {
      public bm_dev_mgr_remove_port() {
        super("bm_dev_mgr_remove_port");
      }

      public bm_dev_mgr_remove_port_args getEmptyArgsInstance() {
        return new bm_dev_mgr_remove_port_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_dev_mgr_remove_port_result result = new bm_dev_mgr_remove_port_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_dev_mgr_remove_port_result result = new bm_dev_mgr_remove_port_result();
            if (e instanceof InvalidDevMgrOperation) {
                        result.ouch = (InvalidDevMgrOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_dev_mgr_remove_port_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_dev_mgr_remove_port(args.port_num,resultHandler);
      }
    }

    public static class bm_dev_mgr_show_ports<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_dev_mgr_show_ports_args, List<DevMgrPortInfo>> {
      public bm_dev_mgr_show_ports() {
        super("bm_dev_mgr_show_ports");
      }

      public bm_dev_mgr_show_ports_args getEmptyArgsInstance() {
        return new bm_dev_mgr_show_ports_args();
      }

      public AsyncMethodCallback<List<DevMgrPortInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DevMgrPortInfo>>() { 
          public void onComplete(List<DevMgrPortInfo> o) {
            bm_dev_mgr_show_ports_result result = new bm_dev_mgr_show_ports_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_dev_mgr_show_ports_result result = new bm_dev_mgr_show_ports_result();
            if (e instanceof InvalidDevMgrOperation) {
                        result.ouch = (InvalidDevMgrOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_dev_mgr_show_ports_args args, org.apache.thrift.async.AsyncMethodCallback<List<DevMgrPortInfo>> resultHandler) throws TException {
        iface.bm_dev_mgr_show_ports(resultHandler);
      }
    }

    public static class bm_mgmt_get_info<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mgmt_get_info_args, BmConfig> {
      public bm_mgmt_get_info() {
        super("bm_mgmt_get_info");
      }

      public bm_mgmt_get_info_args getEmptyArgsInstance() {
        return new bm_mgmt_get_info_args();
      }

      public AsyncMethodCallback<BmConfig> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BmConfig>() { 
          public void onComplete(BmConfig o) {
            bm_mgmt_get_info_result result = new bm_mgmt_get_info_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mgmt_get_info_result result = new bm_mgmt_get_info_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mgmt_get_info_args args, org.apache.thrift.async.AsyncMethodCallback<BmConfig> resultHandler) throws TException {
        iface.bm_mgmt_get_info(resultHandler);
      }
    }

    public static class bm_set_crc16_custom_parameters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_set_crc16_custom_parameters_args, Void> {
      public bm_set_crc16_custom_parameters() {
        super("bm_set_crc16_custom_parameters");
      }

      public bm_set_crc16_custom_parameters_args getEmptyArgsInstance() {
        return new bm_set_crc16_custom_parameters_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_set_crc16_custom_parameters_result result = new bm_set_crc16_custom_parameters_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_set_crc16_custom_parameters_result result = new bm_set_crc16_custom_parameters_result();
            if (e instanceof InvalidCrcOperation) {
                        result.ouch = (InvalidCrcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_set_crc16_custom_parameters_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_set_crc16_custom_parameters(args.cxt_id, args.calc_name, args.crc16_config,resultHandler);
      }
    }

    public static class bm_set_crc32_custom_parameters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_set_crc32_custom_parameters_args, Void> {
      public bm_set_crc32_custom_parameters() {
        super("bm_set_crc32_custom_parameters");
      }

      public bm_set_crc32_custom_parameters_args getEmptyArgsInstance() {
        return new bm_set_crc32_custom_parameters_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_set_crc32_custom_parameters_result result = new bm_set_crc32_custom_parameters_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_set_crc32_custom_parameters_result result = new bm_set_crc32_custom_parameters_result();
            if (e instanceof InvalidCrcOperation) {
                        result.ouch = (InvalidCrcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_set_crc32_custom_parameters_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_set_crc32_custom_parameters(args.cxt_id, args.calc_name, args.crc32_config,resultHandler);
      }
    }

    public static class bm_reset_state<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_reset_state_args, Void> {
      public bm_reset_state() {
        super("bm_reset_state");
      }

      public bm_reset_state_args getEmptyArgsInstance() {
        return new bm_reset_state_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_reset_state_result result = new bm_reset_state_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_reset_state_result result = new bm_reset_state_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_reset_state_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_reset_state(resultHandler);
      }
    }

    public static class bm_get_config<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_get_config_args, String> {
      public bm_get_config() {
        super("bm_get_config");
      }

      public bm_get_config_args getEmptyArgsInstance() {
        return new bm_get_config_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            bm_get_config_result result = new bm_get_config_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_get_config_result result = new bm_get_config_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_get_config_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.bm_get_config(resultHandler);
      }
    }

    public static class bm_get_config_md5<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_get_config_md5_args, String> {
      public bm_get_config_md5() {
        super("bm_get_config_md5");
      }

      public bm_get_config_md5_args getEmptyArgsInstance() {
        return new bm_get_config_md5_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            bm_get_config_md5_result result = new bm_get_config_md5_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_get_config_md5_result result = new bm_get_config_md5_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_get_config_md5_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.bm_get_config_md5(resultHandler);
      }
    }

    public static class bm_serialize_state<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_serialize_state_args, String> {
      public bm_serialize_state() {
        super("bm_serialize_state");
      }

      public bm_serialize_state_args getEmptyArgsInstance() {
        return new bm_serialize_state_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            bm_serialize_state_result result = new bm_serialize_state_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_serialize_state_result result = new bm_serialize_state_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_serialize_state_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.bm_serialize_state(resultHandler);
      }
    }

  }

  public static class bm_mt_add_entry_args implements org.apache.thrift.TBase<bm_mt_add_entry_args, bm_mt_add_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_add_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_add_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MATCH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("match_key", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("action_name", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ACTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("action_data", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_add_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_add_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public List<BmMatchParam> match_key; // required
    public String action_name; // required
    public List<ByteBuffer> action_data; // required
    public BmAddEntryOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      MATCH_KEY((short)3, "match_key"),
      ACTION_NAME((short)4, "action_name"),
      ACTION_DATA((short)5, "action_data"),
      OPTIONS((short)6, "options");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MATCH_KEY
            return MATCH_KEY;
          case 4: // ACTION_NAME
            return ACTION_NAME;
          case 5: // ACTION_DATA
            return ACTION_DATA;
          case 6: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MATCH_KEY, new org.apache.thrift.meta_data.FieldMetaData("match_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BmMatchParams")));
      tmpMap.put(_Fields.ACTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("action_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("action_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BmActionData")));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmAddEntryOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_add_entry_args.class, metaDataMap);
    }

    public bm_mt_add_entry_args() {
    }

    public bm_mt_add_entry_args(
      int cxt_id,
      String table_name,
      List<BmMatchParam> match_key,
      String action_name,
      List<ByteBuffer> action_data,
      BmAddEntryOptions options)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.match_key = match_key;
      this.action_name = action_name;
      this.action_data = action_data;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_add_entry_args(bm_mt_add_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMatch_key()) {
        this.match_key = other.match_key;
      }
      if (other.isSetAction_name()) {
        this.action_name = other.action_name;
      }
      if (other.isSetAction_data()) {
        this.action_data = other.action_data;
      }
      if (other.isSetOptions()) {
        this.options = new BmAddEntryOptions(other.options);
      }
    }

    public bm_mt_add_entry_args deepCopy() {
      return new bm_mt_add_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      this.match_key = null;
      this.action_name = null;
      this.action_data = null;
      this.options = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_add_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_add_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getMatch_keySize() {
      return (this.match_key == null) ? 0 : this.match_key.size();
    }

    public java.util.Iterator<BmMatchParam> getMatch_keyIterator() {
      return (this.match_key == null) ? null : this.match_key.iterator();
    }

    public void addToMatch_key(BmMatchParam elem) {
      if (this.match_key == null) {
        this.match_key = new ArrayList<BmMatchParam>();
      }
      this.match_key.add(elem);
    }

    public List<BmMatchParam> getMatch_key() {
      return this.match_key;
    }

    public bm_mt_add_entry_args setMatch_key(List<BmMatchParam> match_key) {
      this.match_key = match_key;
      return this;
    }

    public void unsetMatch_key() {
      this.match_key = null;
    }

    /** Returns true if field match_key is set (has been assigned a value) and false otherwise */
    public boolean isSetMatch_key() {
      return this.match_key != null;
    }

    public void setMatch_keyIsSet(boolean value) {
      if (!value) {
        this.match_key = null;
      }
    }

    public String getAction_name() {
      return this.action_name;
    }

    public bm_mt_add_entry_args setAction_name(String action_name) {
      this.action_name = action_name;
      return this;
    }

    public void unsetAction_name() {
      this.action_name = null;
    }

    /** Returns true if field action_name is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_name() {
      return this.action_name != null;
    }

    public void setAction_nameIsSet(boolean value) {
      if (!value) {
        this.action_name = null;
      }
    }

    public int getAction_dataSize() {
      return (this.action_data == null) ? 0 : this.action_data.size();
    }

    public java.util.Iterator<ByteBuffer> getAction_dataIterator() {
      return (this.action_data == null) ? null : this.action_data.iterator();
    }

    public void addToAction_data(ByteBuffer elem) {
      if (this.action_data == null) {
        this.action_data = new ArrayList<ByteBuffer>();
      }
      this.action_data.add(elem);
    }

    public List<ByteBuffer> getAction_data() {
      return this.action_data;
    }

    public bm_mt_add_entry_args setAction_data(List<ByteBuffer> action_data) {
      this.action_data = action_data;
      return this;
    }

    public void unsetAction_data() {
      this.action_data = null;
    }

    /** Returns true if field action_data is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_data() {
      return this.action_data != null;
    }

    public void setAction_dataIsSet(boolean value) {
      if (!value) {
        this.action_data = null;
      }
    }

    public BmAddEntryOptions getOptions() {
      return this.options;
    }

    public bm_mt_add_entry_args setOptions(BmAddEntryOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MATCH_KEY:
        if (value == null) {
          unsetMatch_key();
        } else {
          setMatch_key((List<BmMatchParam>)value);
        }
        break;

      case ACTION_NAME:
        if (value == null) {
          unsetAction_name();
        } else {
          setAction_name((String)value);
        }
        break;

      case ACTION_DATA:
        if (value == null) {
          unsetAction_data();
        } else {
          setAction_data((List<ByteBuffer>)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((BmAddEntryOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case MATCH_KEY:
        return getMatch_key();

      case ACTION_NAME:
        return getAction_name();

      case ACTION_DATA:
        return getAction_data();

      case OPTIONS:
        return getOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case MATCH_KEY:
        return isSetMatch_key();
      case ACTION_NAME:
        return isSetAction_name();
      case ACTION_DATA:
        return isSetAction_data();
      case OPTIONS:
        return isSetOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_add_entry_args)
        return this.equals((bm_mt_add_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_add_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_match_key = true && this.isSetMatch_key();
      boolean that_present_match_key = true && that.isSetMatch_key();
      if (this_present_match_key || that_present_match_key) {
        if (!(this_present_match_key && that_present_match_key))
          return false;
        if (!this.match_key.equals(that.match_key))
          return false;
      }

      boolean this_present_action_name = true && this.isSetAction_name();
      boolean that_present_action_name = true && that.isSetAction_name();
      if (this_present_action_name || that_present_action_name) {
        if (!(this_present_action_name && that_present_action_name))
          return false;
        if (!this.action_name.equals(that.action_name))
          return false;
      }

      boolean this_present_action_data = true && this.isSetAction_data();
      boolean that_present_action_data = true && that.isSetAction_data();
      if (this_present_action_data || that_present_action_data) {
        if (!(this_present_action_data && that_present_action_data))
          return false;
        if (!this.action_data.equals(that.action_data))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_match_key = true && (isSetMatch_key());
      list.add(present_match_key);
      if (present_match_key)
        list.add(match_key);

      boolean present_action_name = true && (isSetAction_name());
      list.add(present_action_name);
      if (present_action_name)
        list.add(action_name);

      boolean present_action_data = true && (isSetAction_data());
      list.add(present_action_data);
      if (present_action_data)
        list.add(action_data);

      boolean present_options = true && (isSetOptions());
      list.add(present_options);
      if (present_options)
        list.add(options);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_add_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMatch_key()).compareTo(other.isSetMatch_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatch_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.match_key, other.match_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_name()).compareTo(other.isSetAction_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_name, other.action_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_data()).compareTo(other.isSetAction_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_data, other.action_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_add_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("match_key:");
      if (this.match_key == null) {
        sb.append("null");
      } else {
        sb.append(this.match_key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_name:");
      if (this.action_name == null) {
        sb.append("null");
      } else {
        sb.append(this.action_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_data:");
      if (this.action_data == null) {
        sb.append("null");
      } else {
        sb.append(this.action_data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_add_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_add_entry_argsStandardScheme getScheme() {
        return new bm_mt_add_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_add_entry_argsStandardScheme extends StandardScheme<bm_mt_add_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_add_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MATCH_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.match_key = new ArrayList<BmMatchParam>(_list42.size);
                  BmMatchParam _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = new BmMatchParam();
                    _elem43.read(iprot);
                    struct.match_key.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setMatch_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action_name = iprot.readString();
                struct.setAction_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ACTION_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                  struct.action_data = new ArrayList<ByteBuffer>(_list45.size);
                  ByteBuffer _elem46;
                  for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                  {
                    _elem46 = iprot.readBinary();
                    struct.action_data.add(_elem46);
                  }
                  iprot.readListEnd();
                }
                struct.setAction_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new BmAddEntryOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_add_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        if (struct.match_key != null) {
          oprot.writeFieldBegin(MATCH_KEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.match_key.size()));
            for (BmMatchParam _iter48 : struct.match_key)
            {
              _iter48.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.action_name != null) {
          oprot.writeFieldBegin(ACTION_NAME_FIELD_DESC);
          oprot.writeString(struct.action_name);
          oprot.writeFieldEnd();
        }
        if (struct.action_data != null) {
          oprot.writeFieldBegin(ACTION_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.action_data.size()));
            for (ByteBuffer _iter49 : struct.action_data)
            {
              oprot.writeBinary(_iter49);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_add_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_add_entry_argsTupleScheme getScheme() {
        return new bm_mt_add_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_add_entry_argsTupleScheme extends TupleScheme<bm_mt_add_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_add_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetMatch_key()) {
          optionals.set(2);
        }
        if (struct.isSetAction_name()) {
          optionals.set(3);
        }
        if (struct.isSetAction_data()) {
          optionals.set(4);
        }
        if (struct.isSetOptions()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetMatch_key()) {
          {
            oprot.writeI32(struct.match_key.size());
            for (BmMatchParam _iter50 : struct.match_key)
            {
              _iter50.write(oprot);
            }
          }
        }
        if (struct.isSetAction_name()) {
          oprot.writeString(struct.action_name);
        }
        if (struct.isSetAction_data()) {
          {
            oprot.writeI32(struct.action_data.size());
            for (ByteBuffer _iter51 : struct.action_data)
            {
              oprot.writeBinary(_iter51);
            }
          }
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_add_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.match_key = new ArrayList<BmMatchParam>(_list52.size);
            BmMatchParam _elem53;
            for (int _i54 = 0; _i54 < _list52.size; ++_i54)
            {
              _elem53 = new BmMatchParam();
              _elem53.read(iprot);
              struct.match_key.add(_elem53);
            }
          }
          struct.setMatch_keyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.action_name = iprot.readString();
          struct.setAction_nameIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.action_data = new ArrayList<ByteBuffer>(_list55.size);
            ByteBuffer _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = iprot.readBinary();
              struct.action_data.add(_elem56);
            }
          }
          struct.setAction_dataIsSet(true);
        }
        if (incoming.get(5)) {
          struct.options = new BmAddEntryOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_add_entry_result implements org.apache.thrift.TBase<bm_mt_add_entry_result, bm_mt_add_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_add_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_add_entry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_add_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_add_entry_resultTupleSchemeFactory());
    }

    public long success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_add_entry_result.class, metaDataMap);
    }

    public bm_mt_add_entry_result() {
    }

    public bm_mt_add_entry_result(
      long success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_add_entry_result(bm_mt_add_entry_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_add_entry_result deepCopy() {
      return new bm_mt_add_entry_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public bm_mt_add_entry_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_add_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_add_entry_result)
        return this.equals((bm_mt_add_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_add_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_add_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_add_entry_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_add_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_add_entry_resultStandardScheme getScheme() {
        return new bm_mt_add_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_add_entry_resultStandardScheme extends StandardScheme<bm_mt_add_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_add_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_add_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_add_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_add_entry_resultTupleScheme getScheme() {
        return new bm_mt_add_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_add_entry_resultTupleScheme extends TupleScheme<bm_mt_add_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_add_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_add_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_set_default_action_args implements org.apache.thrift.TBase<bm_mt_set_default_action_args, bm_mt_set_default_action_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_set_default_action_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_set_default_action_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("action_name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("action_data", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_set_default_action_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_set_default_action_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public String action_name; // required
    public List<ByteBuffer> action_data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ACTION_NAME((short)3, "action_name"),
      ACTION_DATA((short)4, "action_data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ACTION_NAME
            return ACTION_NAME;
          case 4: // ACTION_DATA
            return ACTION_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("action_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("action_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BmActionData")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_set_default_action_args.class, metaDataMap);
    }

    public bm_mt_set_default_action_args() {
    }

    public bm_mt_set_default_action_args(
      int cxt_id,
      String table_name,
      String action_name,
      List<ByteBuffer> action_data)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.action_name = action_name;
      this.action_data = action_data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_set_default_action_args(bm_mt_set_default_action_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetAction_name()) {
        this.action_name = other.action_name;
      }
      if (other.isSetAction_data()) {
        this.action_data = other.action_data;
      }
    }

    public bm_mt_set_default_action_args deepCopy() {
      return new bm_mt_set_default_action_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      this.action_name = null;
      this.action_data = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_set_default_action_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_set_default_action_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getAction_name() {
      return this.action_name;
    }

    public bm_mt_set_default_action_args setAction_name(String action_name) {
      this.action_name = action_name;
      return this;
    }

    public void unsetAction_name() {
      this.action_name = null;
    }

    /** Returns true if field action_name is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_name() {
      return this.action_name != null;
    }

    public void setAction_nameIsSet(boolean value) {
      if (!value) {
        this.action_name = null;
      }
    }

    public int getAction_dataSize() {
      return (this.action_data == null) ? 0 : this.action_data.size();
    }

    public java.util.Iterator<ByteBuffer> getAction_dataIterator() {
      return (this.action_data == null) ? null : this.action_data.iterator();
    }

    public void addToAction_data(ByteBuffer elem) {
      if (this.action_data == null) {
        this.action_data = new ArrayList<ByteBuffer>();
      }
      this.action_data.add(elem);
    }

    public List<ByteBuffer> getAction_data() {
      return this.action_data;
    }

    public bm_mt_set_default_action_args setAction_data(List<ByteBuffer> action_data) {
      this.action_data = action_data;
      return this;
    }

    public void unsetAction_data() {
      this.action_data = null;
    }

    /** Returns true if field action_data is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_data() {
      return this.action_data != null;
    }

    public void setAction_dataIsSet(boolean value) {
      if (!value) {
        this.action_data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ACTION_NAME:
        if (value == null) {
          unsetAction_name();
        } else {
          setAction_name((String)value);
        }
        break;

      case ACTION_DATA:
        if (value == null) {
          unsetAction_data();
        } else {
          setAction_data((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ACTION_NAME:
        return getAction_name();

      case ACTION_DATA:
        return getAction_data();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ACTION_NAME:
        return isSetAction_name();
      case ACTION_DATA:
        return isSetAction_data();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_set_default_action_args)
        return this.equals((bm_mt_set_default_action_args)that);
      return false;
    }

    public boolean equals(bm_mt_set_default_action_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_action_name = true && this.isSetAction_name();
      boolean that_present_action_name = true && that.isSetAction_name();
      if (this_present_action_name || that_present_action_name) {
        if (!(this_present_action_name && that_present_action_name))
          return false;
        if (!this.action_name.equals(that.action_name))
          return false;
      }

      boolean this_present_action_data = true && this.isSetAction_data();
      boolean that_present_action_data = true && that.isSetAction_data();
      if (this_present_action_data || that_present_action_data) {
        if (!(this_present_action_data && that_present_action_data))
          return false;
        if (!this.action_data.equals(that.action_data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_action_name = true && (isSetAction_name());
      list.add(present_action_name);
      if (present_action_name)
        list.add(action_name);

      boolean present_action_data = true && (isSetAction_data());
      list.add(present_action_data);
      if (present_action_data)
        list.add(action_data);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_set_default_action_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_name()).compareTo(other.isSetAction_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_name, other.action_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_data()).compareTo(other.isSetAction_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_data, other.action_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_set_default_action_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_name:");
      if (this.action_name == null) {
        sb.append("null");
      } else {
        sb.append(this.action_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_data:");
      if (this.action_data == null) {
        sb.append("null");
      } else {
        sb.append(this.action_data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_set_default_action_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_set_default_action_argsStandardScheme getScheme() {
        return new bm_mt_set_default_action_argsStandardScheme();
      }
    }

    private static class bm_mt_set_default_action_argsStandardScheme extends StandardScheme<bm_mt_set_default_action_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_set_default_action_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action_name = iprot.readString();
                struct.setAction_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.action_data = new ArrayList<ByteBuffer>(_list58.size);
                  ByteBuffer _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = iprot.readBinary();
                    struct.action_data.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setAction_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_set_default_action_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        if (struct.action_name != null) {
          oprot.writeFieldBegin(ACTION_NAME_FIELD_DESC);
          oprot.writeString(struct.action_name);
          oprot.writeFieldEnd();
        }
        if (struct.action_data != null) {
          oprot.writeFieldBegin(ACTION_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.action_data.size()));
            for (ByteBuffer _iter61 : struct.action_data)
            {
              oprot.writeBinary(_iter61);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_set_default_action_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_set_default_action_argsTupleScheme getScheme() {
        return new bm_mt_set_default_action_argsTupleScheme();
      }
    }

    private static class bm_mt_set_default_action_argsTupleScheme extends TupleScheme<bm_mt_set_default_action_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_default_action_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetAction_name()) {
          optionals.set(2);
        }
        if (struct.isSetAction_data()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetAction_name()) {
          oprot.writeString(struct.action_name);
        }
        if (struct.isSetAction_data()) {
          {
            oprot.writeI32(struct.action_data.size());
            for (ByteBuffer _iter62 : struct.action_data)
            {
              oprot.writeBinary(_iter62);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_default_action_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.action_name = iprot.readString();
          struct.setAction_nameIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.action_data = new ArrayList<ByteBuffer>(_list63.size);
            ByteBuffer _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = iprot.readBinary();
              struct.action_data.add(_elem64);
            }
          }
          struct.setAction_dataIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_set_default_action_result implements org.apache.thrift.TBase<bm_mt_set_default_action_result, bm_mt_set_default_action_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_set_default_action_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_set_default_action_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_set_default_action_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_set_default_action_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_set_default_action_result.class, metaDataMap);
    }

    public bm_mt_set_default_action_result() {
    }

    public bm_mt_set_default_action_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_set_default_action_result(bm_mt_set_default_action_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_set_default_action_result deepCopy() {
      return new bm_mt_set_default_action_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_set_default_action_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_set_default_action_result)
        return this.equals((bm_mt_set_default_action_result)that);
      return false;
    }

    public boolean equals(bm_mt_set_default_action_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_set_default_action_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_set_default_action_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_set_default_action_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_set_default_action_resultStandardScheme getScheme() {
        return new bm_mt_set_default_action_resultStandardScheme();
      }
    }

    private static class bm_mt_set_default_action_resultStandardScheme extends StandardScheme<bm_mt_set_default_action_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_set_default_action_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_set_default_action_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_set_default_action_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_set_default_action_resultTupleScheme getScheme() {
        return new bm_mt_set_default_action_resultTupleScheme();
      }
    }

    private static class bm_mt_set_default_action_resultTupleScheme extends TupleScheme<bm_mt_set_default_action_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_default_action_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_default_action_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_delete_entry_args implements org.apache.thrift.TBase<bm_mt_delete_entry_args, bm_mt_delete_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_delete_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_delete_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_delete_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_delete_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_delete_entry_args.class, metaDataMap);
    }

    public bm_mt_delete_entry_args() {
    }

    public bm_mt_delete_entry_args(
      int cxt_id,
      String table_name,
      long entry_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_delete_entry_args(bm_mt_delete_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
    }

    public bm_mt_delete_entry_args deepCopy() {
      return new bm_mt_delete_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_delete_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_delete_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_delete_entry_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_delete_entry_args)
        return this.equals((bm_mt_delete_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_delete_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_delete_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_delete_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_delete_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_delete_entry_argsStandardScheme getScheme() {
        return new bm_mt_delete_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_delete_entry_argsStandardScheme extends StandardScheme<bm_mt_delete_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_delete_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_delete_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_delete_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_delete_entry_argsTupleScheme getScheme() {
        return new bm_mt_delete_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_delete_entry_argsTupleScheme extends TupleScheme<bm_mt_delete_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_delete_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_delete_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_delete_entry_result implements org.apache.thrift.TBase<bm_mt_delete_entry_result, bm_mt_delete_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_delete_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_delete_entry_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_delete_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_delete_entry_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_delete_entry_result.class, metaDataMap);
    }

    public bm_mt_delete_entry_result() {
    }

    public bm_mt_delete_entry_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_delete_entry_result(bm_mt_delete_entry_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_delete_entry_result deepCopy() {
      return new bm_mt_delete_entry_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_delete_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_delete_entry_result)
        return this.equals((bm_mt_delete_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_delete_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_delete_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_delete_entry_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_delete_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_delete_entry_resultStandardScheme getScheme() {
        return new bm_mt_delete_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_delete_entry_resultStandardScheme extends StandardScheme<bm_mt_delete_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_delete_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_delete_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_delete_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_delete_entry_resultTupleScheme getScheme() {
        return new bm_mt_delete_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_delete_entry_resultTupleScheme extends TupleScheme<bm_mt_delete_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_delete_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_delete_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_modify_entry_args implements org.apache.thrift.TBase<bm_mt_modify_entry_args, bm_mt_modify_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_modify_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_modify_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("action_name", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ACTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("action_data", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_modify_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_modify_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required
    public String action_name; // required
    public List<ByteBuffer> action_data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle"),
      ACTION_NAME((short)4, "action_name"),
      ACTION_DATA((short)5, "action_data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          case 4: // ACTION_NAME
            return ACTION_NAME;
          case 5: // ACTION_DATA
            return ACTION_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.ACTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("action_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("action_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BmActionData")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_modify_entry_args.class, metaDataMap);
    }

    public bm_mt_modify_entry_args() {
    }

    public bm_mt_modify_entry_args(
      int cxt_id,
      String table_name,
      long entry_handle,
      String action_name,
      List<ByteBuffer> action_data)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      this.action_name = action_name;
      this.action_data = action_data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_modify_entry_args(bm_mt_modify_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
      if (other.isSetAction_name()) {
        this.action_name = other.action_name;
      }
      if (other.isSetAction_data()) {
        this.action_data = other.action_data;
      }
    }

    public bm_mt_modify_entry_args deepCopy() {
      return new bm_mt_modify_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
      this.action_name = null;
      this.action_data = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_modify_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_modify_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_modify_entry_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public String getAction_name() {
      return this.action_name;
    }

    public bm_mt_modify_entry_args setAction_name(String action_name) {
      this.action_name = action_name;
      return this;
    }

    public void unsetAction_name() {
      this.action_name = null;
    }

    /** Returns true if field action_name is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_name() {
      return this.action_name != null;
    }

    public void setAction_nameIsSet(boolean value) {
      if (!value) {
        this.action_name = null;
      }
    }

    public int getAction_dataSize() {
      return (this.action_data == null) ? 0 : this.action_data.size();
    }

    public java.util.Iterator<ByteBuffer> getAction_dataIterator() {
      return (this.action_data == null) ? null : this.action_data.iterator();
    }

    public void addToAction_data(ByteBuffer elem) {
      if (this.action_data == null) {
        this.action_data = new ArrayList<ByteBuffer>();
      }
      this.action_data.add(elem);
    }

    public List<ByteBuffer> getAction_data() {
      return this.action_data;
    }

    public bm_mt_modify_entry_args setAction_data(List<ByteBuffer> action_data) {
      this.action_data = action_data;
      return this;
    }

    public void unsetAction_data() {
      this.action_data = null;
    }

    /** Returns true if field action_data is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_data() {
      return this.action_data != null;
    }

    public void setAction_dataIsSet(boolean value) {
      if (!value) {
        this.action_data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      case ACTION_NAME:
        if (value == null) {
          unsetAction_name();
        } else {
          setAction_name((String)value);
        }
        break;

      case ACTION_DATA:
        if (value == null) {
          unsetAction_data();
        } else {
          setAction_data((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      case ACTION_NAME:
        return getAction_name();

      case ACTION_DATA:
        return getAction_data();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      case ACTION_NAME:
        return isSetAction_name();
      case ACTION_DATA:
        return isSetAction_data();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_modify_entry_args)
        return this.equals((bm_mt_modify_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_modify_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      boolean this_present_action_name = true && this.isSetAction_name();
      boolean that_present_action_name = true && that.isSetAction_name();
      if (this_present_action_name || that_present_action_name) {
        if (!(this_present_action_name && that_present_action_name))
          return false;
        if (!this.action_name.equals(that.action_name))
          return false;
      }

      boolean this_present_action_data = true && this.isSetAction_data();
      boolean that_present_action_data = true && that.isSetAction_data();
      if (this_present_action_data || that_present_action_data) {
        if (!(this_present_action_data && that_present_action_data))
          return false;
        if (!this.action_data.equals(that.action_data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      boolean present_action_name = true && (isSetAction_name());
      list.add(present_action_name);
      if (present_action_name)
        list.add(action_name);

      boolean present_action_data = true && (isSetAction_data());
      list.add(present_action_data);
      if (present_action_data)
        list.add(action_data);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_modify_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_name()).compareTo(other.isSetAction_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_name, other.action_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_data()).compareTo(other.isSetAction_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_data, other.action_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_modify_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_name:");
      if (this.action_name == null) {
        sb.append("null");
      } else {
        sb.append(this.action_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_data:");
      if (this.action_data == null) {
        sb.append("null");
      } else {
        sb.append(this.action_data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_modify_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_modify_entry_argsStandardScheme getScheme() {
        return new bm_mt_modify_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_modify_entry_argsStandardScheme extends StandardScheme<bm_mt_modify_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_modify_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action_name = iprot.readString();
                struct.setAction_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ACTION_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.action_data = new ArrayList<ByteBuffer>(_list66.size);
                  ByteBuffer _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = iprot.readBinary();
                    struct.action_data.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setAction_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_modify_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        if (struct.action_name != null) {
          oprot.writeFieldBegin(ACTION_NAME_FIELD_DESC);
          oprot.writeString(struct.action_name);
          oprot.writeFieldEnd();
        }
        if (struct.action_data != null) {
          oprot.writeFieldBegin(ACTION_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.action_data.size()));
            for (ByteBuffer _iter69 : struct.action_data)
            {
              oprot.writeBinary(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_modify_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_modify_entry_argsTupleScheme getScheme() {
        return new bm_mt_modify_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_modify_entry_argsTupleScheme extends TupleScheme<bm_mt_modify_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_modify_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        if (struct.isSetAction_name()) {
          optionals.set(3);
        }
        if (struct.isSetAction_data()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
        if (struct.isSetAction_name()) {
          oprot.writeString(struct.action_name);
        }
        if (struct.isSetAction_data()) {
          {
            oprot.writeI32(struct.action_data.size());
            for (ByteBuffer _iter70 : struct.action_data)
            {
              oprot.writeBinary(_iter70);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_modify_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.action_name = iprot.readString();
          struct.setAction_nameIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.action_data = new ArrayList<ByteBuffer>(_list71.size);
            ByteBuffer _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = iprot.readBinary();
              struct.action_data.add(_elem72);
            }
          }
          struct.setAction_dataIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_modify_entry_result implements org.apache.thrift.TBase<bm_mt_modify_entry_result, bm_mt_modify_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_modify_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_modify_entry_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_modify_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_modify_entry_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_modify_entry_result.class, metaDataMap);
    }

    public bm_mt_modify_entry_result() {
    }

    public bm_mt_modify_entry_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_modify_entry_result(bm_mt_modify_entry_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_modify_entry_result deepCopy() {
      return new bm_mt_modify_entry_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_modify_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_modify_entry_result)
        return this.equals((bm_mt_modify_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_modify_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_modify_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_modify_entry_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_modify_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_modify_entry_resultStandardScheme getScheme() {
        return new bm_mt_modify_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_modify_entry_resultStandardScheme extends StandardScheme<bm_mt_modify_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_modify_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_modify_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_modify_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_modify_entry_resultTupleScheme getScheme() {
        return new bm_mt_modify_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_modify_entry_resultTupleScheme extends TupleScheme<bm_mt_modify_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_modify_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_modify_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_set_entry_ttl_args implements org.apache.thrift.TBase<bm_mt_set_entry_ttl_args, bm_mt_set_entry_ttl_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_set_entry_ttl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_set_entry_ttl_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_ms", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_set_entry_ttl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_set_entry_ttl_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required
    public int timeout_ms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle"),
      TIMEOUT_MS((short)4, "timeout_ms");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          case 4: // TIMEOUT_MS
            return TIMEOUT_MS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private static final int __TIMEOUT_MS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("timeout_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_set_entry_ttl_args.class, metaDataMap);
    }

    public bm_mt_set_entry_ttl_args() {
    }

    public bm_mt_set_entry_ttl_args(
      int cxt_id,
      String table_name,
      long entry_handle,
      int timeout_ms)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      this.timeout_ms = timeout_ms;
      setTimeout_msIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_set_entry_ttl_args(bm_mt_set_entry_ttl_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
      this.timeout_ms = other.timeout_ms;
    }

    public bm_mt_set_entry_ttl_args deepCopy() {
      return new bm_mt_set_entry_ttl_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
      setTimeout_msIsSet(false);
      this.timeout_ms = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_set_entry_ttl_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_set_entry_ttl_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_set_entry_ttl_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public int getTimeout_ms() {
      return this.timeout_ms;
    }

    public bm_mt_set_entry_ttl_args setTimeout_ms(int timeout_ms) {
      this.timeout_ms = timeout_ms;
      setTimeout_msIsSet(true);
      return this;
    }

    public void unsetTimeout_ms() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID);
    }

    /** Returns true if field timeout_ms is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_ms() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID);
    }

    public void setTimeout_msIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      case TIMEOUT_MS:
        if (value == null) {
          unsetTimeout_ms();
        } else {
          setTimeout_ms((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      case TIMEOUT_MS:
        return getTimeout_ms();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      case TIMEOUT_MS:
        return isSetTimeout_ms();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_set_entry_ttl_args)
        return this.equals((bm_mt_set_entry_ttl_args)that);
      return false;
    }

    public boolean equals(bm_mt_set_entry_ttl_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      boolean this_present_timeout_ms = true;
      boolean that_present_timeout_ms = true;
      if (this_present_timeout_ms || that_present_timeout_ms) {
        if (!(this_present_timeout_ms && that_present_timeout_ms))
          return false;
        if (this.timeout_ms != that.timeout_ms)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      boolean present_timeout_ms = true;
      list.add(present_timeout_ms);
      if (present_timeout_ms)
        list.add(timeout_ms);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_set_entry_ttl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_ms()).compareTo(other.isSetTimeout_ms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_ms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_ms, other.timeout_ms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_set_entry_ttl_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_ms:");
      sb.append(this.timeout_ms);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_set_entry_ttl_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_set_entry_ttl_argsStandardScheme getScheme() {
        return new bm_mt_set_entry_ttl_argsStandardScheme();
      }
    }

    private static class bm_mt_set_entry_ttl_argsStandardScheme extends StandardScheme<bm_mt_set_entry_ttl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_set_entry_ttl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIMEOUT_MS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeout_ms = iprot.readI32();
                struct.setTimeout_msIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_set_entry_ttl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIMEOUT_MS_FIELD_DESC);
        oprot.writeI32(struct.timeout_ms);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_set_entry_ttl_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_set_entry_ttl_argsTupleScheme getScheme() {
        return new bm_mt_set_entry_ttl_argsTupleScheme();
      }
    }

    private static class bm_mt_set_entry_ttl_argsTupleScheme extends TupleScheme<bm_mt_set_entry_ttl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_entry_ttl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        if (struct.isSetTimeout_ms()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
        if (struct.isSetTimeout_ms()) {
          oprot.writeI32(struct.timeout_ms);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_entry_ttl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timeout_ms = iprot.readI32();
          struct.setTimeout_msIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_set_entry_ttl_result implements org.apache.thrift.TBase<bm_mt_set_entry_ttl_result, bm_mt_set_entry_ttl_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_set_entry_ttl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_set_entry_ttl_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_set_entry_ttl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_set_entry_ttl_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_set_entry_ttl_result.class, metaDataMap);
    }

    public bm_mt_set_entry_ttl_result() {
    }

    public bm_mt_set_entry_ttl_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_set_entry_ttl_result(bm_mt_set_entry_ttl_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_set_entry_ttl_result deepCopy() {
      return new bm_mt_set_entry_ttl_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_set_entry_ttl_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_set_entry_ttl_result)
        return this.equals((bm_mt_set_entry_ttl_result)that);
      return false;
    }

    public boolean equals(bm_mt_set_entry_ttl_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_set_entry_ttl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_set_entry_ttl_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_set_entry_ttl_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_set_entry_ttl_resultStandardScheme getScheme() {
        return new bm_mt_set_entry_ttl_resultStandardScheme();
      }
    }

    private static class bm_mt_set_entry_ttl_resultStandardScheme extends StandardScheme<bm_mt_set_entry_ttl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_set_entry_ttl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_set_entry_ttl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_set_entry_ttl_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_set_entry_ttl_resultTupleScheme getScheme() {
        return new bm_mt_set_entry_ttl_resultTupleScheme();
      }
    }

    private static class bm_mt_set_entry_ttl_resultTupleScheme extends TupleScheme<bm_mt_set_entry_ttl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_entry_ttl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_entry_ttl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_add_member_args implements org.apache.thrift.TBase<bm_mt_indirect_add_member_args, bm_mt_indirect_add_member_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_add_member_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_add_member_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("action_name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("action_data", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_add_member_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_add_member_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public String action_name; // required
    public List<ByteBuffer> action_data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ACTION_NAME((short)3, "action_name"),
      ACTION_DATA((short)4, "action_data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ACTION_NAME
            return ACTION_NAME;
          case 4: // ACTION_DATA
            return ACTION_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("action_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("action_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BmActionData")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_add_member_args.class, metaDataMap);
    }

    public bm_mt_indirect_add_member_args() {
    }

    public bm_mt_indirect_add_member_args(
      int cxt_id,
      String table_name,
      String action_name,
      List<ByteBuffer> action_data)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.action_name = action_name;
      this.action_data = action_data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_add_member_args(bm_mt_indirect_add_member_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetAction_name()) {
        this.action_name = other.action_name;
      }
      if (other.isSetAction_data()) {
        this.action_data = other.action_data;
      }
    }

    public bm_mt_indirect_add_member_args deepCopy() {
      return new bm_mt_indirect_add_member_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      this.action_name = null;
      this.action_data = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_add_member_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_add_member_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getAction_name() {
      return this.action_name;
    }

    public bm_mt_indirect_add_member_args setAction_name(String action_name) {
      this.action_name = action_name;
      return this;
    }

    public void unsetAction_name() {
      this.action_name = null;
    }

    /** Returns true if field action_name is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_name() {
      return this.action_name != null;
    }

    public void setAction_nameIsSet(boolean value) {
      if (!value) {
        this.action_name = null;
      }
    }

    public int getAction_dataSize() {
      return (this.action_data == null) ? 0 : this.action_data.size();
    }

    public java.util.Iterator<ByteBuffer> getAction_dataIterator() {
      return (this.action_data == null) ? null : this.action_data.iterator();
    }

    public void addToAction_data(ByteBuffer elem) {
      if (this.action_data == null) {
        this.action_data = new ArrayList<ByteBuffer>();
      }
      this.action_data.add(elem);
    }

    public List<ByteBuffer> getAction_data() {
      return this.action_data;
    }

    public bm_mt_indirect_add_member_args setAction_data(List<ByteBuffer> action_data) {
      this.action_data = action_data;
      return this;
    }

    public void unsetAction_data() {
      this.action_data = null;
    }

    /** Returns true if field action_data is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_data() {
      return this.action_data != null;
    }

    public void setAction_dataIsSet(boolean value) {
      if (!value) {
        this.action_data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ACTION_NAME:
        if (value == null) {
          unsetAction_name();
        } else {
          setAction_name((String)value);
        }
        break;

      case ACTION_DATA:
        if (value == null) {
          unsetAction_data();
        } else {
          setAction_data((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ACTION_NAME:
        return getAction_name();

      case ACTION_DATA:
        return getAction_data();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ACTION_NAME:
        return isSetAction_name();
      case ACTION_DATA:
        return isSetAction_data();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_add_member_args)
        return this.equals((bm_mt_indirect_add_member_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_add_member_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_action_name = true && this.isSetAction_name();
      boolean that_present_action_name = true && that.isSetAction_name();
      if (this_present_action_name || that_present_action_name) {
        if (!(this_present_action_name && that_present_action_name))
          return false;
        if (!this.action_name.equals(that.action_name))
          return false;
      }

      boolean this_present_action_data = true && this.isSetAction_data();
      boolean that_present_action_data = true && that.isSetAction_data();
      if (this_present_action_data || that_present_action_data) {
        if (!(this_present_action_data && that_present_action_data))
          return false;
        if (!this.action_data.equals(that.action_data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_action_name = true && (isSetAction_name());
      list.add(present_action_name);
      if (present_action_name)
        list.add(action_name);

      boolean present_action_data = true && (isSetAction_data());
      list.add(present_action_data);
      if (present_action_data)
        list.add(action_data);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_add_member_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_name()).compareTo(other.isSetAction_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_name, other.action_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_data()).compareTo(other.isSetAction_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_data, other.action_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_add_member_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_name:");
      if (this.action_name == null) {
        sb.append("null");
      } else {
        sb.append(this.action_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_data:");
      if (this.action_data == null) {
        sb.append("null");
      } else {
        sb.append(this.action_data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_add_member_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_add_member_argsStandardScheme getScheme() {
        return new bm_mt_indirect_add_member_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_add_member_argsStandardScheme extends StandardScheme<bm_mt_indirect_add_member_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_add_member_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action_name = iprot.readString();
                struct.setAction_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.action_data = new ArrayList<ByteBuffer>(_list74.size);
                  ByteBuffer _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = iprot.readBinary();
                    struct.action_data.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setAction_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_add_member_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        if (struct.action_name != null) {
          oprot.writeFieldBegin(ACTION_NAME_FIELD_DESC);
          oprot.writeString(struct.action_name);
          oprot.writeFieldEnd();
        }
        if (struct.action_data != null) {
          oprot.writeFieldBegin(ACTION_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.action_data.size()));
            for (ByteBuffer _iter77 : struct.action_data)
            {
              oprot.writeBinary(_iter77);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_add_member_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_add_member_argsTupleScheme getScheme() {
        return new bm_mt_indirect_add_member_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_add_member_argsTupleScheme extends TupleScheme<bm_mt_indirect_add_member_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_add_member_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetAction_name()) {
          optionals.set(2);
        }
        if (struct.isSetAction_data()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetAction_name()) {
          oprot.writeString(struct.action_name);
        }
        if (struct.isSetAction_data()) {
          {
            oprot.writeI32(struct.action_data.size());
            for (ByteBuffer _iter78 : struct.action_data)
            {
              oprot.writeBinary(_iter78);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_add_member_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.action_name = iprot.readString();
          struct.setAction_nameIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.action_data = new ArrayList<ByteBuffer>(_list79.size);
            ByteBuffer _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = iprot.readBinary();
              struct.action_data.add(_elem80);
            }
          }
          struct.setAction_dataIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_add_member_result implements org.apache.thrift.TBase<bm_mt_indirect_add_member_result, bm_mt_indirect_add_member_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_add_member_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_add_member_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_add_member_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_add_member_resultTupleSchemeFactory());
    }

    public int success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMemberHandle")));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_add_member_result.class, metaDataMap);
    }

    public bm_mt_indirect_add_member_result() {
    }

    public bm_mt_indirect_add_member_result(
      int success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_add_member_result(bm_mt_indirect_add_member_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_add_member_result deepCopy() {
      return new bm_mt_indirect_add_member_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public bm_mt_indirect_add_member_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_add_member_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_add_member_result)
        return this.equals((bm_mt_indirect_add_member_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_add_member_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_add_member_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_add_member_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_add_member_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_add_member_resultStandardScheme getScheme() {
        return new bm_mt_indirect_add_member_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_add_member_resultStandardScheme extends StandardScheme<bm_mt_indirect_add_member_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_add_member_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_add_member_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_add_member_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_add_member_resultTupleScheme getScheme() {
        return new bm_mt_indirect_add_member_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_add_member_resultTupleScheme extends TupleScheme<bm_mt_indirect_add_member_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_add_member_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_add_member_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_delete_member_args implements org.apache.thrift.TBase<bm_mt_indirect_delete_member_args, bm_mt_indirect_delete_member_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_delete_member_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_delete_member_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MBR_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mbr_handle", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_delete_member_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_delete_member_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public int mbr_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      MBR_HANDLE((short)3, "mbr_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MBR_HANDLE
            return MBR_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MBR_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MBR_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mbr_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMemberHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_delete_member_args.class, metaDataMap);
    }

    public bm_mt_indirect_delete_member_args() {
    }

    public bm_mt_indirect_delete_member_args(
      int cxt_id,
      String table_name,
      int mbr_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_delete_member_args(bm_mt_indirect_delete_member_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.mbr_handle = other.mbr_handle;
    }

    public bm_mt_indirect_delete_member_args deepCopy() {
      return new bm_mt_indirect_delete_member_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setMbr_handleIsSet(false);
      this.mbr_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_delete_member_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_delete_member_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getMbr_handle() {
      return this.mbr_handle;
    }

    public bm_mt_indirect_delete_member_args setMbr_handle(int mbr_handle) {
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      return this;
    }

    public void unsetMbr_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    /** Returns true if field mbr_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMbr_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    public void setMbr_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MBR_HANDLE:
        if (value == null) {
          unsetMbr_handle();
        } else {
          setMbr_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case MBR_HANDLE:
        return getMbr_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case MBR_HANDLE:
        return isSetMbr_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_delete_member_args)
        return this.equals((bm_mt_indirect_delete_member_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_delete_member_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mbr_handle = true;
      boolean that_present_mbr_handle = true;
      if (this_present_mbr_handle || that_present_mbr_handle) {
        if (!(this_present_mbr_handle && that_present_mbr_handle))
          return false;
        if (this.mbr_handle != that.mbr_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_mbr_handle = true;
      list.add(present_mbr_handle);
      if (present_mbr_handle)
        list.add(mbr_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_delete_member_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMbr_handle()).compareTo(other.isSetMbr_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbr_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbr_handle, other.mbr_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_delete_member_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbr_handle:");
      sb.append(this.mbr_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_delete_member_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_delete_member_argsStandardScheme getScheme() {
        return new bm_mt_indirect_delete_member_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_delete_member_argsStandardScheme extends StandardScheme<bm_mt_indirect_delete_member_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_delete_member_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MBR_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mbr_handle = iprot.readI32();
                struct.setMbr_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_delete_member_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MBR_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mbr_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_delete_member_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_delete_member_argsTupleScheme getScheme() {
        return new bm_mt_indirect_delete_member_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_delete_member_argsTupleScheme extends TupleScheme<bm_mt_indirect_delete_member_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_delete_member_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetMbr_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetMbr_handle()) {
          oprot.writeI32(struct.mbr_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_delete_member_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mbr_handle = iprot.readI32();
          struct.setMbr_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_delete_member_result implements org.apache.thrift.TBase<bm_mt_indirect_delete_member_result, bm_mt_indirect_delete_member_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_delete_member_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_delete_member_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_delete_member_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_delete_member_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_delete_member_result.class, metaDataMap);
    }

    public bm_mt_indirect_delete_member_result() {
    }

    public bm_mt_indirect_delete_member_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_delete_member_result(bm_mt_indirect_delete_member_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_delete_member_result deepCopy() {
      return new bm_mt_indirect_delete_member_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_delete_member_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_delete_member_result)
        return this.equals((bm_mt_indirect_delete_member_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_delete_member_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_delete_member_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_delete_member_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_delete_member_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_delete_member_resultStandardScheme getScheme() {
        return new bm_mt_indirect_delete_member_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_delete_member_resultStandardScheme extends StandardScheme<bm_mt_indirect_delete_member_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_delete_member_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_delete_member_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_delete_member_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_delete_member_resultTupleScheme getScheme() {
        return new bm_mt_indirect_delete_member_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_delete_member_resultTupleScheme extends TupleScheme<bm_mt_indirect_delete_member_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_delete_member_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_delete_member_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_modify_member_args implements org.apache.thrift.TBase<bm_mt_indirect_modify_member_args, bm_mt_indirect_modify_member_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_modify_member_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_modify_member_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MBR_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mbr_handle", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("action_name", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ACTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("action_data", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_modify_member_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_modify_member_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public int mbr_handle; // required
    public String action_name; // required
    public List<ByteBuffer> action_data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      MBR_HANDLE((short)3, "mbr_handle"),
      ACTION_NAME((short)4, "action_name"),
      ACTION_DATA((short)5, "action_data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MBR_HANDLE
            return MBR_HANDLE;
          case 4: // ACTION_NAME
            return ACTION_NAME;
          case 5: // ACTION_DATA
            return ACTION_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MBR_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MBR_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mbr_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMemberHandle")));
      tmpMap.put(_Fields.ACTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("action_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("action_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BmActionData")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_modify_member_args.class, metaDataMap);
    }

    public bm_mt_indirect_modify_member_args() {
    }

    public bm_mt_indirect_modify_member_args(
      int cxt_id,
      String table_name,
      int mbr_handle,
      String action_name,
      List<ByteBuffer> action_data)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      this.action_name = action_name;
      this.action_data = action_data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_modify_member_args(bm_mt_indirect_modify_member_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.mbr_handle = other.mbr_handle;
      if (other.isSetAction_name()) {
        this.action_name = other.action_name;
      }
      if (other.isSetAction_data()) {
        this.action_data = other.action_data;
      }
    }

    public bm_mt_indirect_modify_member_args deepCopy() {
      return new bm_mt_indirect_modify_member_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setMbr_handleIsSet(false);
      this.mbr_handle = 0;
      this.action_name = null;
      this.action_data = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_modify_member_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_modify_member_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getMbr_handle() {
      return this.mbr_handle;
    }

    public bm_mt_indirect_modify_member_args setMbr_handle(int mbr_handle) {
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      return this;
    }

    public void unsetMbr_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    /** Returns true if field mbr_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMbr_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    public void setMbr_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID, value);
    }

    public String getAction_name() {
      return this.action_name;
    }

    public bm_mt_indirect_modify_member_args setAction_name(String action_name) {
      this.action_name = action_name;
      return this;
    }

    public void unsetAction_name() {
      this.action_name = null;
    }

    /** Returns true if field action_name is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_name() {
      return this.action_name != null;
    }

    public void setAction_nameIsSet(boolean value) {
      if (!value) {
        this.action_name = null;
      }
    }

    public int getAction_dataSize() {
      return (this.action_data == null) ? 0 : this.action_data.size();
    }

    public java.util.Iterator<ByteBuffer> getAction_dataIterator() {
      return (this.action_data == null) ? null : this.action_data.iterator();
    }

    public void addToAction_data(ByteBuffer elem) {
      if (this.action_data == null) {
        this.action_data = new ArrayList<ByteBuffer>();
      }
      this.action_data.add(elem);
    }

    public List<ByteBuffer> getAction_data() {
      return this.action_data;
    }

    public bm_mt_indirect_modify_member_args setAction_data(List<ByteBuffer> action_data) {
      this.action_data = action_data;
      return this;
    }

    public void unsetAction_data() {
      this.action_data = null;
    }

    /** Returns true if field action_data is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_data() {
      return this.action_data != null;
    }

    public void setAction_dataIsSet(boolean value) {
      if (!value) {
        this.action_data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MBR_HANDLE:
        if (value == null) {
          unsetMbr_handle();
        } else {
          setMbr_handle((Integer)value);
        }
        break;

      case ACTION_NAME:
        if (value == null) {
          unsetAction_name();
        } else {
          setAction_name((String)value);
        }
        break;

      case ACTION_DATA:
        if (value == null) {
          unsetAction_data();
        } else {
          setAction_data((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case MBR_HANDLE:
        return getMbr_handle();

      case ACTION_NAME:
        return getAction_name();

      case ACTION_DATA:
        return getAction_data();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case MBR_HANDLE:
        return isSetMbr_handle();
      case ACTION_NAME:
        return isSetAction_name();
      case ACTION_DATA:
        return isSetAction_data();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_modify_member_args)
        return this.equals((bm_mt_indirect_modify_member_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_modify_member_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mbr_handle = true;
      boolean that_present_mbr_handle = true;
      if (this_present_mbr_handle || that_present_mbr_handle) {
        if (!(this_present_mbr_handle && that_present_mbr_handle))
          return false;
        if (this.mbr_handle != that.mbr_handle)
          return false;
      }

      boolean this_present_action_name = true && this.isSetAction_name();
      boolean that_present_action_name = true && that.isSetAction_name();
      if (this_present_action_name || that_present_action_name) {
        if (!(this_present_action_name && that_present_action_name))
          return false;
        if (!this.action_name.equals(that.action_name))
          return false;
      }

      boolean this_present_action_data = true && this.isSetAction_data();
      boolean that_present_action_data = true && that.isSetAction_data();
      if (this_present_action_data || that_present_action_data) {
        if (!(this_present_action_data && that_present_action_data))
          return false;
        if (!this.action_data.equals(that.action_data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_mbr_handle = true;
      list.add(present_mbr_handle);
      if (present_mbr_handle)
        list.add(mbr_handle);

      boolean present_action_name = true && (isSetAction_name());
      list.add(present_action_name);
      if (present_action_name)
        list.add(action_name);

      boolean present_action_data = true && (isSetAction_data());
      list.add(present_action_data);
      if (present_action_data)
        list.add(action_data);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_modify_member_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMbr_handle()).compareTo(other.isSetMbr_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbr_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbr_handle, other.mbr_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_name()).compareTo(other.isSetAction_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_name, other.action_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_data()).compareTo(other.isSetAction_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_data, other.action_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_modify_member_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbr_handle:");
      sb.append(this.mbr_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_name:");
      if (this.action_name == null) {
        sb.append("null");
      } else {
        sb.append(this.action_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_data:");
      if (this.action_data == null) {
        sb.append("null");
      } else {
        sb.append(this.action_data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_modify_member_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_modify_member_argsStandardScheme getScheme() {
        return new bm_mt_indirect_modify_member_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_modify_member_argsStandardScheme extends StandardScheme<bm_mt_indirect_modify_member_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_modify_member_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MBR_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mbr_handle = iprot.readI32();
                struct.setMbr_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action_name = iprot.readString();
                struct.setAction_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ACTION_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.action_data = new ArrayList<ByteBuffer>(_list82.size);
                  ByteBuffer _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = iprot.readBinary();
                    struct.action_data.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setAction_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_modify_member_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MBR_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mbr_handle);
        oprot.writeFieldEnd();
        if (struct.action_name != null) {
          oprot.writeFieldBegin(ACTION_NAME_FIELD_DESC);
          oprot.writeString(struct.action_name);
          oprot.writeFieldEnd();
        }
        if (struct.action_data != null) {
          oprot.writeFieldBegin(ACTION_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.action_data.size()));
            for (ByteBuffer _iter85 : struct.action_data)
            {
              oprot.writeBinary(_iter85);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_modify_member_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_modify_member_argsTupleScheme getScheme() {
        return new bm_mt_indirect_modify_member_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_modify_member_argsTupleScheme extends TupleScheme<bm_mt_indirect_modify_member_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_modify_member_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetMbr_handle()) {
          optionals.set(2);
        }
        if (struct.isSetAction_name()) {
          optionals.set(3);
        }
        if (struct.isSetAction_data()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetMbr_handle()) {
          oprot.writeI32(struct.mbr_handle);
        }
        if (struct.isSetAction_name()) {
          oprot.writeString(struct.action_name);
        }
        if (struct.isSetAction_data()) {
          {
            oprot.writeI32(struct.action_data.size());
            for (ByteBuffer _iter86 : struct.action_data)
            {
              oprot.writeBinary(_iter86);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_modify_member_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mbr_handle = iprot.readI32();
          struct.setMbr_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.action_name = iprot.readString();
          struct.setAction_nameIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.action_data = new ArrayList<ByteBuffer>(_list87.size);
            ByteBuffer _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = iprot.readBinary();
              struct.action_data.add(_elem88);
            }
          }
          struct.setAction_dataIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_modify_member_result implements org.apache.thrift.TBase<bm_mt_indirect_modify_member_result, bm_mt_indirect_modify_member_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_modify_member_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_modify_member_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_modify_member_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_modify_member_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_modify_member_result.class, metaDataMap);
    }

    public bm_mt_indirect_modify_member_result() {
    }

    public bm_mt_indirect_modify_member_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_modify_member_result(bm_mt_indirect_modify_member_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_modify_member_result deepCopy() {
      return new bm_mt_indirect_modify_member_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_modify_member_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_modify_member_result)
        return this.equals((bm_mt_indirect_modify_member_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_modify_member_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_modify_member_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_modify_member_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_modify_member_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_modify_member_resultStandardScheme getScheme() {
        return new bm_mt_indirect_modify_member_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_modify_member_resultStandardScheme extends StandardScheme<bm_mt_indirect_modify_member_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_modify_member_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_modify_member_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_modify_member_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_modify_member_resultTupleScheme getScheme() {
        return new bm_mt_indirect_modify_member_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_modify_member_resultTupleScheme extends TupleScheme<bm_mt_indirect_modify_member_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_modify_member_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_modify_member_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_add_entry_args implements org.apache.thrift.TBase<bm_mt_indirect_add_entry_args, bm_mt_indirect_add_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_add_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_add_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MATCH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("match_key", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField MBR_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mbr_handle", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_add_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_add_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public List<BmMatchParam> match_key; // required
    public int mbr_handle; // required
    public BmAddEntryOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      MATCH_KEY((short)3, "match_key"),
      MBR_HANDLE((short)4, "mbr_handle"),
      OPTIONS((short)5, "options");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MATCH_KEY
            return MATCH_KEY;
          case 4: // MBR_HANDLE
            return MBR_HANDLE;
          case 5: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MBR_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MATCH_KEY, new org.apache.thrift.meta_data.FieldMetaData("match_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BmMatchParams")));
      tmpMap.put(_Fields.MBR_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mbr_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMemberHandle")));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmAddEntryOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_add_entry_args.class, metaDataMap);
    }

    public bm_mt_indirect_add_entry_args() {
    }

    public bm_mt_indirect_add_entry_args(
      int cxt_id,
      String table_name,
      List<BmMatchParam> match_key,
      int mbr_handle,
      BmAddEntryOptions options)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.match_key = match_key;
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_add_entry_args(bm_mt_indirect_add_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMatch_key()) {
        this.match_key = other.match_key;
      }
      this.mbr_handle = other.mbr_handle;
      if (other.isSetOptions()) {
        this.options = new BmAddEntryOptions(other.options);
      }
    }

    public bm_mt_indirect_add_entry_args deepCopy() {
      return new bm_mt_indirect_add_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      this.match_key = null;
      setMbr_handleIsSet(false);
      this.mbr_handle = 0;
      this.options = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_add_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_add_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getMatch_keySize() {
      return (this.match_key == null) ? 0 : this.match_key.size();
    }

    public java.util.Iterator<BmMatchParam> getMatch_keyIterator() {
      return (this.match_key == null) ? null : this.match_key.iterator();
    }

    public void addToMatch_key(BmMatchParam elem) {
      if (this.match_key == null) {
        this.match_key = new ArrayList<BmMatchParam>();
      }
      this.match_key.add(elem);
    }

    public List<BmMatchParam> getMatch_key() {
      return this.match_key;
    }

    public bm_mt_indirect_add_entry_args setMatch_key(List<BmMatchParam> match_key) {
      this.match_key = match_key;
      return this;
    }

    public void unsetMatch_key() {
      this.match_key = null;
    }

    /** Returns true if field match_key is set (has been assigned a value) and false otherwise */
    public boolean isSetMatch_key() {
      return this.match_key != null;
    }

    public void setMatch_keyIsSet(boolean value) {
      if (!value) {
        this.match_key = null;
      }
    }

    public int getMbr_handle() {
      return this.mbr_handle;
    }

    public bm_mt_indirect_add_entry_args setMbr_handle(int mbr_handle) {
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      return this;
    }

    public void unsetMbr_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    /** Returns true if field mbr_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMbr_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    public void setMbr_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID, value);
    }

    public BmAddEntryOptions getOptions() {
      return this.options;
    }

    public bm_mt_indirect_add_entry_args setOptions(BmAddEntryOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MATCH_KEY:
        if (value == null) {
          unsetMatch_key();
        } else {
          setMatch_key((List<BmMatchParam>)value);
        }
        break;

      case MBR_HANDLE:
        if (value == null) {
          unsetMbr_handle();
        } else {
          setMbr_handle((Integer)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((BmAddEntryOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case MATCH_KEY:
        return getMatch_key();

      case MBR_HANDLE:
        return getMbr_handle();

      case OPTIONS:
        return getOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case MATCH_KEY:
        return isSetMatch_key();
      case MBR_HANDLE:
        return isSetMbr_handle();
      case OPTIONS:
        return isSetOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_add_entry_args)
        return this.equals((bm_mt_indirect_add_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_add_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_match_key = true && this.isSetMatch_key();
      boolean that_present_match_key = true && that.isSetMatch_key();
      if (this_present_match_key || that_present_match_key) {
        if (!(this_present_match_key && that_present_match_key))
          return false;
        if (!this.match_key.equals(that.match_key))
          return false;
      }

      boolean this_present_mbr_handle = true;
      boolean that_present_mbr_handle = true;
      if (this_present_mbr_handle || that_present_mbr_handle) {
        if (!(this_present_mbr_handle && that_present_mbr_handle))
          return false;
        if (this.mbr_handle != that.mbr_handle)
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_match_key = true && (isSetMatch_key());
      list.add(present_match_key);
      if (present_match_key)
        list.add(match_key);

      boolean present_mbr_handle = true;
      list.add(present_mbr_handle);
      if (present_mbr_handle)
        list.add(mbr_handle);

      boolean present_options = true && (isSetOptions());
      list.add(present_options);
      if (present_options)
        list.add(options);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_add_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMatch_key()).compareTo(other.isSetMatch_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatch_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.match_key, other.match_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMbr_handle()).compareTo(other.isSetMbr_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbr_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbr_handle, other.mbr_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_add_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("match_key:");
      if (this.match_key == null) {
        sb.append("null");
      } else {
        sb.append(this.match_key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbr_handle:");
      sb.append(this.mbr_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_add_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_add_entry_argsStandardScheme getScheme() {
        return new bm_mt_indirect_add_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_add_entry_argsStandardScheme extends StandardScheme<bm_mt_indirect_add_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_add_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MATCH_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.match_key = new ArrayList<BmMatchParam>(_list90.size);
                  BmMatchParam _elem91;
                  for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                  {
                    _elem91 = new BmMatchParam();
                    _elem91.read(iprot);
                    struct.match_key.add(_elem91);
                  }
                  iprot.readListEnd();
                }
                struct.setMatch_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MBR_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mbr_handle = iprot.readI32();
                struct.setMbr_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new BmAddEntryOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_add_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        if (struct.match_key != null) {
          oprot.writeFieldBegin(MATCH_KEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.match_key.size()));
            for (BmMatchParam _iter93 : struct.match_key)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MBR_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mbr_handle);
        oprot.writeFieldEnd();
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_add_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_add_entry_argsTupleScheme getScheme() {
        return new bm_mt_indirect_add_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_add_entry_argsTupleScheme extends TupleScheme<bm_mt_indirect_add_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_add_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetMatch_key()) {
          optionals.set(2);
        }
        if (struct.isSetMbr_handle()) {
          optionals.set(3);
        }
        if (struct.isSetOptions()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetMatch_key()) {
          {
            oprot.writeI32(struct.match_key.size());
            for (BmMatchParam _iter94 : struct.match_key)
            {
              _iter94.write(oprot);
            }
          }
        }
        if (struct.isSetMbr_handle()) {
          oprot.writeI32(struct.mbr_handle);
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_add_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.match_key = new ArrayList<BmMatchParam>(_list95.size);
            BmMatchParam _elem96;
            for (int _i97 = 0; _i97 < _list95.size; ++_i97)
            {
              _elem96 = new BmMatchParam();
              _elem96.read(iprot);
              struct.match_key.add(_elem96);
            }
          }
          struct.setMatch_keyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mbr_handle = iprot.readI32();
          struct.setMbr_handleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.options = new BmAddEntryOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_add_entry_result implements org.apache.thrift.TBase<bm_mt_indirect_add_entry_result, bm_mt_indirect_add_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_add_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_add_entry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_add_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_add_entry_resultTupleSchemeFactory());
    }

    public long success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_add_entry_result.class, metaDataMap);
    }

    public bm_mt_indirect_add_entry_result() {
    }

    public bm_mt_indirect_add_entry_result(
      long success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_add_entry_result(bm_mt_indirect_add_entry_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_add_entry_result deepCopy() {
      return new bm_mt_indirect_add_entry_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public bm_mt_indirect_add_entry_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_add_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_add_entry_result)
        return this.equals((bm_mt_indirect_add_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_add_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_add_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_add_entry_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_add_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_add_entry_resultStandardScheme getScheme() {
        return new bm_mt_indirect_add_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_add_entry_resultStandardScheme extends StandardScheme<bm_mt_indirect_add_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_add_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_add_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_add_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_add_entry_resultTupleScheme getScheme() {
        return new bm_mt_indirect_add_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_add_entry_resultTupleScheme extends TupleScheme<bm_mt_indirect_add_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_add_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_add_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_modify_entry_args implements org.apache.thrift.TBase<bm_mt_indirect_modify_entry_args, bm_mt_indirect_modify_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_modify_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_modify_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField MBR_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mbr_handle", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_modify_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_modify_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required
    public int mbr_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle"),
      MBR_HANDLE((short)4, "mbr_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          case 4: // MBR_HANDLE
            return MBR_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private static final int __MBR_HANDLE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.MBR_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mbr_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMemberHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_modify_entry_args.class, metaDataMap);
    }

    public bm_mt_indirect_modify_entry_args() {
    }

    public bm_mt_indirect_modify_entry_args(
      int cxt_id,
      String table_name,
      long entry_handle,
      int mbr_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_modify_entry_args(bm_mt_indirect_modify_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
      this.mbr_handle = other.mbr_handle;
    }

    public bm_mt_indirect_modify_entry_args deepCopy() {
      return new bm_mt_indirect_modify_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
      setMbr_handleIsSet(false);
      this.mbr_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_modify_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_modify_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_indirect_modify_entry_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public int getMbr_handle() {
      return this.mbr_handle;
    }

    public bm_mt_indirect_modify_entry_args setMbr_handle(int mbr_handle) {
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      return this;
    }

    public void unsetMbr_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    /** Returns true if field mbr_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMbr_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    public void setMbr_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      case MBR_HANDLE:
        if (value == null) {
          unsetMbr_handle();
        } else {
          setMbr_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      case MBR_HANDLE:
        return getMbr_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      case MBR_HANDLE:
        return isSetMbr_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_modify_entry_args)
        return this.equals((bm_mt_indirect_modify_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_modify_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      boolean this_present_mbr_handle = true;
      boolean that_present_mbr_handle = true;
      if (this_present_mbr_handle || that_present_mbr_handle) {
        if (!(this_present_mbr_handle && that_present_mbr_handle))
          return false;
        if (this.mbr_handle != that.mbr_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      boolean present_mbr_handle = true;
      list.add(present_mbr_handle);
      if (present_mbr_handle)
        list.add(mbr_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_modify_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMbr_handle()).compareTo(other.isSetMbr_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbr_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbr_handle, other.mbr_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_modify_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbr_handle:");
      sb.append(this.mbr_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_modify_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_modify_entry_argsStandardScheme getScheme() {
        return new bm_mt_indirect_modify_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_modify_entry_argsStandardScheme extends StandardScheme<bm_mt_indirect_modify_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_modify_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MBR_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mbr_handle = iprot.readI32();
                struct.setMbr_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_modify_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MBR_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mbr_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_modify_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_modify_entry_argsTupleScheme getScheme() {
        return new bm_mt_indirect_modify_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_modify_entry_argsTupleScheme extends TupleScheme<bm_mt_indirect_modify_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_modify_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        if (struct.isSetMbr_handle()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
        if (struct.isSetMbr_handle()) {
          oprot.writeI32(struct.mbr_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_modify_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mbr_handle = iprot.readI32();
          struct.setMbr_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_modify_entry_result implements org.apache.thrift.TBase<bm_mt_indirect_modify_entry_result, bm_mt_indirect_modify_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_modify_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_modify_entry_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_modify_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_modify_entry_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_modify_entry_result.class, metaDataMap);
    }

    public bm_mt_indirect_modify_entry_result() {
    }

    public bm_mt_indirect_modify_entry_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_modify_entry_result(bm_mt_indirect_modify_entry_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_modify_entry_result deepCopy() {
      return new bm_mt_indirect_modify_entry_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_modify_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_modify_entry_result)
        return this.equals((bm_mt_indirect_modify_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_modify_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_modify_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_modify_entry_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_modify_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_modify_entry_resultStandardScheme getScheme() {
        return new bm_mt_indirect_modify_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_modify_entry_resultStandardScheme extends StandardScheme<bm_mt_indirect_modify_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_modify_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_modify_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_modify_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_modify_entry_resultTupleScheme getScheme() {
        return new bm_mt_indirect_modify_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_modify_entry_resultTupleScheme extends TupleScheme<bm_mt_indirect_modify_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_modify_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_modify_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_delete_entry_args implements org.apache.thrift.TBase<bm_mt_indirect_delete_entry_args, bm_mt_indirect_delete_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_delete_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_delete_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_delete_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_delete_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_delete_entry_args.class, metaDataMap);
    }

    public bm_mt_indirect_delete_entry_args() {
    }

    public bm_mt_indirect_delete_entry_args(
      int cxt_id,
      String table_name,
      long entry_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_delete_entry_args(bm_mt_indirect_delete_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
    }

    public bm_mt_indirect_delete_entry_args deepCopy() {
      return new bm_mt_indirect_delete_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_delete_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_delete_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_indirect_delete_entry_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_delete_entry_args)
        return this.equals((bm_mt_indirect_delete_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_delete_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_delete_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_delete_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_delete_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_delete_entry_argsStandardScheme getScheme() {
        return new bm_mt_indirect_delete_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_delete_entry_argsStandardScheme extends StandardScheme<bm_mt_indirect_delete_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_delete_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_delete_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_delete_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_delete_entry_argsTupleScheme getScheme() {
        return new bm_mt_indirect_delete_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_delete_entry_argsTupleScheme extends TupleScheme<bm_mt_indirect_delete_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_delete_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_delete_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_delete_entry_result implements org.apache.thrift.TBase<bm_mt_indirect_delete_entry_result, bm_mt_indirect_delete_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_delete_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_delete_entry_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_delete_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_delete_entry_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_delete_entry_result.class, metaDataMap);
    }

    public bm_mt_indirect_delete_entry_result() {
    }

    public bm_mt_indirect_delete_entry_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_delete_entry_result(bm_mt_indirect_delete_entry_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_delete_entry_result deepCopy() {
      return new bm_mt_indirect_delete_entry_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_delete_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_delete_entry_result)
        return this.equals((bm_mt_indirect_delete_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_delete_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_delete_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_delete_entry_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_delete_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_delete_entry_resultStandardScheme getScheme() {
        return new bm_mt_indirect_delete_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_delete_entry_resultStandardScheme extends StandardScheme<bm_mt_indirect_delete_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_delete_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_delete_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_delete_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_delete_entry_resultTupleScheme getScheme() {
        return new bm_mt_indirect_delete_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_delete_entry_resultTupleScheme extends TupleScheme<bm_mt_indirect_delete_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_delete_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_delete_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_set_entry_ttl_args implements org.apache.thrift.TBase<bm_mt_indirect_set_entry_ttl_args, bm_mt_indirect_set_entry_ttl_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_set_entry_ttl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_set_entry_ttl_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_ms", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_set_entry_ttl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_set_entry_ttl_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required
    public int timeout_ms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle"),
      TIMEOUT_MS((short)4, "timeout_ms");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          case 4: // TIMEOUT_MS
            return TIMEOUT_MS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private static final int __TIMEOUT_MS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("timeout_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_set_entry_ttl_args.class, metaDataMap);
    }

    public bm_mt_indirect_set_entry_ttl_args() {
    }

    public bm_mt_indirect_set_entry_ttl_args(
      int cxt_id,
      String table_name,
      long entry_handle,
      int timeout_ms)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      this.timeout_ms = timeout_ms;
      setTimeout_msIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_set_entry_ttl_args(bm_mt_indirect_set_entry_ttl_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
      this.timeout_ms = other.timeout_ms;
    }

    public bm_mt_indirect_set_entry_ttl_args deepCopy() {
      return new bm_mt_indirect_set_entry_ttl_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
      setTimeout_msIsSet(false);
      this.timeout_ms = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_set_entry_ttl_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_set_entry_ttl_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_indirect_set_entry_ttl_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public int getTimeout_ms() {
      return this.timeout_ms;
    }

    public bm_mt_indirect_set_entry_ttl_args setTimeout_ms(int timeout_ms) {
      this.timeout_ms = timeout_ms;
      setTimeout_msIsSet(true);
      return this;
    }

    public void unsetTimeout_ms() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID);
    }

    /** Returns true if field timeout_ms is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_ms() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID);
    }

    public void setTimeout_msIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      case TIMEOUT_MS:
        if (value == null) {
          unsetTimeout_ms();
        } else {
          setTimeout_ms((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      case TIMEOUT_MS:
        return getTimeout_ms();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      case TIMEOUT_MS:
        return isSetTimeout_ms();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_set_entry_ttl_args)
        return this.equals((bm_mt_indirect_set_entry_ttl_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_set_entry_ttl_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      boolean this_present_timeout_ms = true;
      boolean that_present_timeout_ms = true;
      if (this_present_timeout_ms || that_present_timeout_ms) {
        if (!(this_present_timeout_ms && that_present_timeout_ms))
          return false;
        if (this.timeout_ms != that.timeout_ms)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      boolean present_timeout_ms = true;
      list.add(present_timeout_ms);
      if (present_timeout_ms)
        list.add(timeout_ms);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_set_entry_ttl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_ms()).compareTo(other.isSetTimeout_ms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_ms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_ms, other.timeout_ms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_set_entry_ttl_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_ms:");
      sb.append(this.timeout_ms);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_set_entry_ttl_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_set_entry_ttl_argsStandardScheme getScheme() {
        return new bm_mt_indirect_set_entry_ttl_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_set_entry_ttl_argsStandardScheme extends StandardScheme<bm_mt_indirect_set_entry_ttl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_set_entry_ttl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIMEOUT_MS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeout_ms = iprot.readI32();
                struct.setTimeout_msIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_set_entry_ttl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIMEOUT_MS_FIELD_DESC);
        oprot.writeI32(struct.timeout_ms);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_set_entry_ttl_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_set_entry_ttl_argsTupleScheme getScheme() {
        return new bm_mt_indirect_set_entry_ttl_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_set_entry_ttl_argsTupleScheme extends TupleScheme<bm_mt_indirect_set_entry_ttl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_set_entry_ttl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        if (struct.isSetTimeout_ms()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
        if (struct.isSetTimeout_ms()) {
          oprot.writeI32(struct.timeout_ms);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_set_entry_ttl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timeout_ms = iprot.readI32();
          struct.setTimeout_msIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_set_entry_ttl_result implements org.apache.thrift.TBase<bm_mt_indirect_set_entry_ttl_result, bm_mt_indirect_set_entry_ttl_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_set_entry_ttl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_set_entry_ttl_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_set_entry_ttl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_set_entry_ttl_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_set_entry_ttl_result.class, metaDataMap);
    }

    public bm_mt_indirect_set_entry_ttl_result() {
    }

    public bm_mt_indirect_set_entry_ttl_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_set_entry_ttl_result(bm_mt_indirect_set_entry_ttl_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_set_entry_ttl_result deepCopy() {
      return new bm_mt_indirect_set_entry_ttl_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_set_entry_ttl_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_set_entry_ttl_result)
        return this.equals((bm_mt_indirect_set_entry_ttl_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_set_entry_ttl_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_set_entry_ttl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_set_entry_ttl_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_set_entry_ttl_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_set_entry_ttl_resultStandardScheme getScheme() {
        return new bm_mt_indirect_set_entry_ttl_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_set_entry_ttl_resultStandardScheme extends StandardScheme<bm_mt_indirect_set_entry_ttl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_set_entry_ttl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_set_entry_ttl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_set_entry_ttl_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_set_entry_ttl_resultTupleScheme getScheme() {
        return new bm_mt_indirect_set_entry_ttl_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_set_entry_ttl_resultTupleScheme extends TupleScheme<bm_mt_indirect_set_entry_ttl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_set_entry_ttl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_set_entry_ttl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_set_default_member_args implements org.apache.thrift.TBase<bm_mt_indirect_set_default_member_args, bm_mt_indirect_set_default_member_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_set_default_member_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_set_default_member_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MBR_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mbr_handle", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_set_default_member_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_set_default_member_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public int mbr_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      MBR_HANDLE((short)3, "mbr_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MBR_HANDLE
            return MBR_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MBR_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MBR_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mbr_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMemberHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_set_default_member_args.class, metaDataMap);
    }

    public bm_mt_indirect_set_default_member_args() {
    }

    public bm_mt_indirect_set_default_member_args(
      int cxt_id,
      String table_name,
      int mbr_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_set_default_member_args(bm_mt_indirect_set_default_member_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.mbr_handle = other.mbr_handle;
    }

    public bm_mt_indirect_set_default_member_args deepCopy() {
      return new bm_mt_indirect_set_default_member_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setMbr_handleIsSet(false);
      this.mbr_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_set_default_member_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_set_default_member_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getMbr_handle() {
      return this.mbr_handle;
    }

    public bm_mt_indirect_set_default_member_args setMbr_handle(int mbr_handle) {
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      return this;
    }

    public void unsetMbr_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    /** Returns true if field mbr_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMbr_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    public void setMbr_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MBR_HANDLE:
        if (value == null) {
          unsetMbr_handle();
        } else {
          setMbr_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case MBR_HANDLE:
        return getMbr_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case MBR_HANDLE:
        return isSetMbr_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_set_default_member_args)
        return this.equals((bm_mt_indirect_set_default_member_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_set_default_member_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mbr_handle = true;
      boolean that_present_mbr_handle = true;
      if (this_present_mbr_handle || that_present_mbr_handle) {
        if (!(this_present_mbr_handle && that_present_mbr_handle))
          return false;
        if (this.mbr_handle != that.mbr_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_mbr_handle = true;
      list.add(present_mbr_handle);
      if (present_mbr_handle)
        list.add(mbr_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_set_default_member_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMbr_handle()).compareTo(other.isSetMbr_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbr_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbr_handle, other.mbr_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_set_default_member_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbr_handle:");
      sb.append(this.mbr_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_set_default_member_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_set_default_member_argsStandardScheme getScheme() {
        return new bm_mt_indirect_set_default_member_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_set_default_member_argsStandardScheme extends StandardScheme<bm_mt_indirect_set_default_member_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_set_default_member_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MBR_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mbr_handle = iprot.readI32();
                struct.setMbr_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_set_default_member_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MBR_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mbr_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_set_default_member_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_set_default_member_argsTupleScheme getScheme() {
        return new bm_mt_indirect_set_default_member_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_set_default_member_argsTupleScheme extends TupleScheme<bm_mt_indirect_set_default_member_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_set_default_member_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetMbr_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetMbr_handle()) {
          oprot.writeI32(struct.mbr_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_set_default_member_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mbr_handle = iprot.readI32();
          struct.setMbr_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_set_default_member_result implements org.apache.thrift.TBase<bm_mt_indirect_set_default_member_result, bm_mt_indirect_set_default_member_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_set_default_member_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_set_default_member_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_set_default_member_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_set_default_member_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_set_default_member_result.class, metaDataMap);
    }

    public bm_mt_indirect_set_default_member_result() {
    }

    public bm_mt_indirect_set_default_member_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_set_default_member_result(bm_mt_indirect_set_default_member_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_set_default_member_result deepCopy() {
      return new bm_mt_indirect_set_default_member_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_set_default_member_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_set_default_member_result)
        return this.equals((bm_mt_indirect_set_default_member_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_set_default_member_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_set_default_member_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_set_default_member_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_set_default_member_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_set_default_member_resultStandardScheme getScheme() {
        return new bm_mt_indirect_set_default_member_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_set_default_member_resultStandardScheme extends StandardScheme<bm_mt_indirect_set_default_member_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_set_default_member_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_set_default_member_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_set_default_member_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_set_default_member_resultTupleScheme getScheme() {
        return new bm_mt_indirect_set_default_member_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_set_default_member_resultTupleScheme extends TupleScheme<bm_mt_indirect_set_default_member_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_set_default_member_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_set_default_member_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_create_group_args implements org.apache.thrift.TBase<bm_mt_indirect_ws_create_group_args, bm_mt_indirect_ws_create_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_create_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_create_group_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_create_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_create_group_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_create_group_args.class, metaDataMap);
    }

    public bm_mt_indirect_ws_create_group_args() {
    }

    public bm_mt_indirect_ws_create_group_args(
      int cxt_id,
      String table_name)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_create_group_args(bm_mt_indirect_ws_create_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public bm_mt_indirect_ws_create_group_args deepCopy() {
      return new bm_mt_indirect_ws_create_group_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_ws_create_group_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_ws_create_group_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_create_group_args)
        return this.equals((bm_mt_indirect_ws_create_group_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_create_group_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_create_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_create_group_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_create_group_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_create_group_argsStandardScheme getScheme() {
        return new bm_mt_indirect_ws_create_group_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_create_group_argsStandardScheme extends StandardScheme<bm_mt_indirect_ws_create_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_create_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_create_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_create_group_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_create_group_argsTupleScheme getScheme() {
        return new bm_mt_indirect_ws_create_group_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_create_group_argsTupleScheme extends TupleScheme<bm_mt_indirect_ws_create_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_create_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_create_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_create_group_result implements org.apache.thrift.TBase<bm_mt_indirect_ws_create_group_result, bm_mt_indirect_ws_create_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_create_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_create_group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_create_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_create_group_resultTupleSchemeFactory());
    }

    public int success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmGroupHandle")));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_create_group_result.class, metaDataMap);
    }

    public bm_mt_indirect_ws_create_group_result() {
    }

    public bm_mt_indirect_ws_create_group_result(
      int success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_create_group_result(bm_mt_indirect_ws_create_group_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_ws_create_group_result deepCopy() {
      return new bm_mt_indirect_ws_create_group_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public bm_mt_indirect_ws_create_group_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_ws_create_group_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_create_group_result)
        return this.equals((bm_mt_indirect_ws_create_group_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_create_group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_create_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_create_group_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_create_group_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_create_group_resultStandardScheme getScheme() {
        return new bm_mt_indirect_ws_create_group_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_create_group_resultStandardScheme extends StandardScheme<bm_mt_indirect_ws_create_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_create_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_create_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_create_group_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_create_group_resultTupleScheme getScheme() {
        return new bm_mt_indirect_ws_create_group_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_create_group_resultTupleScheme extends TupleScheme<bm_mt_indirect_ws_create_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_create_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_create_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_delete_group_args implements org.apache.thrift.TBase<bm_mt_indirect_ws_delete_group_args, bm_mt_indirect_ws_delete_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_delete_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_delete_group_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_handle", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_delete_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_delete_group_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public int grp_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      GRP_HANDLE((short)3, "grp_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // GRP_HANDLE
            return GRP_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __GRP_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("grp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmGroupHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_delete_group_args.class, metaDataMap);
    }

    public bm_mt_indirect_ws_delete_group_args() {
    }

    public bm_mt_indirect_ws_delete_group_args(
      int cxt_id,
      String table_name,
      int grp_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_delete_group_args(bm_mt_indirect_ws_delete_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.grp_handle = other.grp_handle;
    }

    public bm_mt_indirect_ws_delete_group_args deepCopy() {
      return new bm_mt_indirect_ws_delete_group_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setGrp_handleIsSet(false);
      this.grp_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_ws_delete_group_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_ws_delete_group_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getGrp_handle() {
      return this.grp_handle;
    }

    public bm_mt_indirect_ws_delete_group_args setGrp_handle(int grp_handle) {
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
      return this;
    }

    public void unsetGrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field grp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetGrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    public void setGrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case GRP_HANDLE:
        if (value == null) {
          unsetGrp_handle();
        } else {
          setGrp_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case GRP_HANDLE:
        return getGrp_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case GRP_HANDLE:
        return isSetGrp_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_delete_group_args)
        return this.equals((bm_mt_indirect_ws_delete_group_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_delete_group_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_grp_handle = true;
      boolean that_present_grp_handle = true;
      if (this_present_grp_handle || that_present_grp_handle) {
        if (!(this_present_grp_handle && that_present_grp_handle))
          return false;
        if (this.grp_handle != that.grp_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_grp_handle = true;
      list.add(present_grp_handle);
      if (present_grp_handle)
        list.add(grp_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_delete_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrp_handle()).compareTo(other.isSetGrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_handle, other.grp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_delete_group_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("grp_handle:");
      sb.append(this.grp_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_delete_group_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_delete_group_argsStandardScheme getScheme() {
        return new bm_mt_indirect_ws_delete_group_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_delete_group_argsStandardScheme extends StandardScheme<bm_mt_indirect_ws_delete_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_delete_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.grp_handle = iprot.readI32();
                struct.setGrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_delete_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.grp_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_delete_group_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_delete_group_argsTupleScheme getScheme() {
        return new bm_mt_indirect_ws_delete_group_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_delete_group_argsTupleScheme extends TupleScheme<bm_mt_indirect_ws_delete_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_delete_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetGrp_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetGrp_handle()) {
          oprot.writeI32(struct.grp_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_delete_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.grp_handle = iprot.readI32();
          struct.setGrp_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_delete_group_result implements org.apache.thrift.TBase<bm_mt_indirect_ws_delete_group_result, bm_mt_indirect_ws_delete_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_delete_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_delete_group_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_delete_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_delete_group_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_delete_group_result.class, metaDataMap);
    }

    public bm_mt_indirect_ws_delete_group_result() {
    }

    public bm_mt_indirect_ws_delete_group_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_delete_group_result(bm_mt_indirect_ws_delete_group_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_ws_delete_group_result deepCopy() {
      return new bm_mt_indirect_ws_delete_group_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_ws_delete_group_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_delete_group_result)
        return this.equals((bm_mt_indirect_ws_delete_group_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_delete_group_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_delete_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_delete_group_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_delete_group_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_delete_group_resultStandardScheme getScheme() {
        return new bm_mt_indirect_ws_delete_group_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_delete_group_resultStandardScheme extends StandardScheme<bm_mt_indirect_ws_delete_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_delete_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_delete_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_delete_group_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_delete_group_resultTupleScheme getScheme() {
        return new bm_mt_indirect_ws_delete_group_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_delete_group_resultTupleScheme extends TupleScheme<bm_mt_indirect_ws_delete_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_delete_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_delete_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_add_member_to_group_args implements org.apache.thrift.TBase<bm_mt_indirect_ws_add_member_to_group_args, bm_mt_indirect_ws_add_member_to_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_add_member_to_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_add_member_to_group_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MBR_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mbr_handle", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField GRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_handle", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_add_member_to_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_add_member_to_group_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public int mbr_handle; // required
    public int grp_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      MBR_HANDLE((short)3, "mbr_handle"),
      GRP_HANDLE((short)4, "grp_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MBR_HANDLE
            return MBR_HANDLE;
          case 4: // GRP_HANDLE
            return GRP_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MBR_HANDLE_ISSET_ID = 1;
    private static final int __GRP_HANDLE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MBR_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mbr_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMemberHandle")));
      tmpMap.put(_Fields.GRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("grp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmGroupHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_add_member_to_group_args.class, metaDataMap);
    }

    public bm_mt_indirect_ws_add_member_to_group_args() {
    }

    public bm_mt_indirect_ws_add_member_to_group_args(
      int cxt_id,
      String table_name,
      int mbr_handle,
      int grp_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_add_member_to_group_args(bm_mt_indirect_ws_add_member_to_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.mbr_handle = other.mbr_handle;
      this.grp_handle = other.grp_handle;
    }

    public bm_mt_indirect_ws_add_member_to_group_args deepCopy() {
      return new bm_mt_indirect_ws_add_member_to_group_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setMbr_handleIsSet(false);
      this.mbr_handle = 0;
      setGrp_handleIsSet(false);
      this.grp_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_ws_add_member_to_group_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_ws_add_member_to_group_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getMbr_handle() {
      return this.mbr_handle;
    }

    public bm_mt_indirect_ws_add_member_to_group_args setMbr_handle(int mbr_handle) {
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      return this;
    }

    public void unsetMbr_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    /** Returns true if field mbr_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMbr_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    public void setMbr_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID, value);
    }

    public int getGrp_handle() {
      return this.grp_handle;
    }

    public bm_mt_indirect_ws_add_member_to_group_args setGrp_handle(int grp_handle) {
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
      return this;
    }

    public void unsetGrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field grp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetGrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    public void setGrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MBR_HANDLE:
        if (value == null) {
          unsetMbr_handle();
        } else {
          setMbr_handle((Integer)value);
        }
        break;

      case GRP_HANDLE:
        if (value == null) {
          unsetGrp_handle();
        } else {
          setGrp_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case MBR_HANDLE:
        return getMbr_handle();

      case GRP_HANDLE:
        return getGrp_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case MBR_HANDLE:
        return isSetMbr_handle();
      case GRP_HANDLE:
        return isSetGrp_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_add_member_to_group_args)
        return this.equals((bm_mt_indirect_ws_add_member_to_group_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_add_member_to_group_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mbr_handle = true;
      boolean that_present_mbr_handle = true;
      if (this_present_mbr_handle || that_present_mbr_handle) {
        if (!(this_present_mbr_handle && that_present_mbr_handle))
          return false;
        if (this.mbr_handle != that.mbr_handle)
          return false;
      }

      boolean this_present_grp_handle = true;
      boolean that_present_grp_handle = true;
      if (this_present_grp_handle || that_present_grp_handle) {
        if (!(this_present_grp_handle && that_present_grp_handle))
          return false;
        if (this.grp_handle != that.grp_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_mbr_handle = true;
      list.add(present_mbr_handle);
      if (present_mbr_handle)
        list.add(mbr_handle);

      boolean present_grp_handle = true;
      list.add(present_grp_handle);
      if (present_grp_handle)
        list.add(grp_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_add_member_to_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMbr_handle()).compareTo(other.isSetMbr_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbr_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbr_handle, other.mbr_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrp_handle()).compareTo(other.isSetGrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_handle, other.grp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_add_member_to_group_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbr_handle:");
      sb.append(this.mbr_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("grp_handle:");
      sb.append(this.grp_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_add_member_to_group_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_add_member_to_group_argsStandardScheme getScheme() {
        return new bm_mt_indirect_ws_add_member_to_group_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_add_member_to_group_argsStandardScheme extends StandardScheme<bm_mt_indirect_ws_add_member_to_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_add_member_to_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MBR_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mbr_handle = iprot.readI32();
                struct.setMbr_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.grp_handle = iprot.readI32();
                struct.setGrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_add_member_to_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MBR_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mbr_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.grp_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_add_member_to_group_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_add_member_to_group_argsTupleScheme getScheme() {
        return new bm_mt_indirect_ws_add_member_to_group_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_add_member_to_group_argsTupleScheme extends TupleScheme<bm_mt_indirect_ws_add_member_to_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_add_member_to_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetMbr_handle()) {
          optionals.set(2);
        }
        if (struct.isSetGrp_handle()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetMbr_handle()) {
          oprot.writeI32(struct.mbr_handle);
        }
        if (struct.isSetGrp_handle()) {
          oprot.writeI32(struct.grp_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_add_member_to_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mbr_handle = iprot.readI32();
          struct.setMbr_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.grp_handle = iprot.readI32();
          struct.setGrp_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_add_member_to_group_result implements org.apache.thrift.TBase<bm_mt_indirect_ws_add_member_to_group_result, bm_mt_indirect_ws_add_member_to_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_add_member_to_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_add_member_to_group_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_add_member_to_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_add_member_to_group_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_add_member_to_group_result.class, metaDataMap);
    }

    public bm_mt_indirect_ws_add_member_to_group_result() {
    }

    public bm_mt_indirect_ws_add_member_to_group_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_add_member_to_group_result(bm_mt_indirect_ws_add_member_to_group_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_ws_add_member_to_group_result deepCopy() {
      return new bm_mt_indirect_ws_add_member_to_group_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_ws_add_member_to_group_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_add_member_to_group_result)
        return this.equals((bm_mt_indirect_ws_add_member_to_group_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_add_member_to_group_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_add_member_to_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_add_member_to_group_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_add_member_to_group_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_add_member_to_group_resultStandardScheme getScheme() {
        return new bm_mt_indirect_ws_add_member_to_group_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_add_member_to_group_resultStandardScheme extends StandardScheme<bm_mt_indirect_ws_add_member_to_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_add_member_to_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_add_member_to_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_add_member_to_group_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_add_member_to_group_resultTupleScheme getScheme() {
        return new bm_mt_indirect_ws_add_member_to_group_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_add_member_to_group_resultTupleScheme extends TupleScheme<bm_mt_indirect_ws_add_member_to_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_add_member_to_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_add_member_to_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_remove_member_from_group_args implements org.apache.thrift.TBase<bm_mt_indirect_ws_remove_member_from_group_args, bm_mt_indirect_ws_remove_member_from_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_remove_member_from_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_remove_member_from_group_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MBR_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mbr_handle", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField GRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_handle", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_remove_member_from_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_remove_member_from_group_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public int mbr_handle; // required
    public int grp_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      MBR_HANDLE((short)3, "mbr_handle"),
      GRP_HANDLE((short)4, "grp_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MBR_HANDLE
            return MBR_HANDLE;
          case 4: // GRP_HANDLE
            return GRP_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MBR_HANDLE_ISSET_ID = 1;
    private static final int __GRP_HANDLE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MBR_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mbr_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMemberHandle")));
      tmpMap.put(_Fields.GRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("grp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmGroupHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_remove_member_from_group_args.class, metaDataMap);
    }

    public bm_mt_indirect_ws_remove_member_from_group_args() {
    }

    public bm_mt_indirect_ws_remove_member_from_group_args(
      int cxt_id,
      String table_name,
      int mbr_handle,
      int grp_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_remove_member_from_group_args(bm_mt_indirect_ws_remove_member_from_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.mbr_handle = other.mbr_handle;
      this.grp_handle = other.grp_handle;
    }

    public bm_mt_indirect_ws_remove_member_from_group_args deepCopy() {
      return new bm_mt_indirect_ws_remove_member_from_group_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setMbr_handleIsSet(false);
      this.mbr_handle = 0;
      setGrp_handleIsSet(false);
      this.grp_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_ws_remove_member_from_group_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_ws_remove_member_from_group_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getMbr_handle() {
      return this.mbr_handle;
    }

    public bm_mt_indirect_ws_remove_member_from_group_args setMbr_handle(int mbr_handle) {
      this.mbr_handle = mbr_handle;
      setMbr_handleIsSet(true);
      return this;
    }

    public void unsetMbr_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    /** Returns true if field mbr_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMbr_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID);
    }

    public void setMbr_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBR_HANDLE_ISSET_ID, value);
    }

    public int getGrp_handle() {
      return this.grp_handle;
    }

    public bm_mt_indirect_ws_remove_member_from_group_args setGrp_handle(int grp_handle) {
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
      return this;
    }

    public void unsetGrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field grp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetGrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    public void setGrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MBR_HANDLE:
        if (value == null) {
          unsetMbr_handle();
        } else {
          setMbr_handle((Integer)value);
        }
        break;

      case GRP_HANDLE:
        if (value == null) {
          unsetGrp_handle();
        } else {
          setGrp_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case MBR_HANDLE:
        return getMbr_handle();

      case GRP_HANDLE:
        return getGrp_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case MBR_HANDLE:
        return isSetMbr_handle();
      case GRP_HANDLE:
        return isSetGrp_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_remove_member_from_group_args)
        return this.equals((bm_mt_indirect_ws_remove_member_from_group_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_remove_member_from_group_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mbr_handle = true;
      boolean that_present_mbr_handle = true;
      if (this_present_mbr_handle || that_present_mbr_handle) {
        if (!(this_present_mbr_handle && that_present_mbr_handle))
          return false;
        if (this.mbr_handle != that.mbr_handle)
          return false;
      }

      boolean this_present_grp_handle = true;
      boolean that_present_grp_handle = true;
      if (this_present_grp_handle || that_present_grp_handle) {
        if (!(this_present_grp_handle && that_present_grp_handle))
          return false;
        if (this.grp_handle != that.grp_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_mbr_handle = true;
      list.add(present_mbr_handle);
      if (present_mbr_handle)
        list.add(mbr_handle);

      boolean present_grp_handle = true;
      list.add(present_grp_handle);
      if (present_grp_handle)
        list.add(grp_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_remove_member_from_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMbr_handle()).compareTo(other.isSetMbr_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMbr_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbr_handle, other.mbr_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrp_handle()).compareTo(other.isSetGrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_handle, other.grp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_remove_member_from_group_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mbr_handle:");
      sb.append(this.mbr_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("grp_handle:");
      sb.append(this.grp_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_remove_member_from_group_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_remove_member_from_group_argsStandardScheme getScheme() {
        return new bm_mt_indirect_ws_remove_member_from_group_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_remove_member_from_group_argsStandardScheme extends StandardScheme<bm_mt_indirect_ws_remove_member_from_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_remove_member_from_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MBR_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mbr_handle = iprot.readI32();
                struct.setMbr_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.grp_handle = iprot.readI32();
                struct.setGrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_remove_member_from_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MBR_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mbr_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.grp_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_remove_member_from_group_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_remove_member_from_group_argsTupleScheme getScheme() {
        return new bm_mt_indirect_ws_remove_member_from_group_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_remove_member_from_group_argsTupleScheme extends TupleScheme<bm_mt_indirect_ws_remove_member_from_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_remove_member_from_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetMbr_handle()) {
          optionals.set(2);
        }
        if (struct.isSetGrp_handle()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetMbr_handle()) {
          oprot.writeI32(struct.mbr_handle);
        }
        if (struct.isSetGrp_handle()) {
          oprot.writeI32(struct.grp_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_remove_member_from_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mbr_handle = iprot.readI32();
          struct.setMbr_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.grp_handle = iprot.readI32();
          struct.setGrp_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_remove_member_from_group_result implements org.apache.thrift.TBase<bm_mt_indirect_ws_remove_member_from_group_result, bm_mt_indirect_ws_remove_member_from_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_remove_member_from_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_remove_member_from_group_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_remove_member_from_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_remove_member_from_group_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_remove_member_from_group_result.class, metaDataMap);
    }

    public bm_mt_indirect_ws_remove_member_from_group_result() {
    }

    public bm_mt_indirect_ws_remove_member_from_group_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_remove_member_from_group_result(bm_mt_indirect_ws_remove_member_from_group_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_ws_remove_member_from_group_result deepCopy() {
      return new bm_mt_indirect_ws_remove_member_from_group_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_ws_remove_member_from_group_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_remove_member_from_group_result)
        return this.equals((bm_mt_indirect_ws_remove_member_from_group_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_remove_member_from_group_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_remove_member_from_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_remove_member_from_group_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_remove_member_from_group_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_remove_member_from_group_resultStandardScheme getScheme() {
        return new bm_mt_indirect_ws_remove_member_from_group_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_remove_member_from_group_resultStandardScheme extends StandardScheme<bm_mt_indirect_ws_remove_member_from_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_remove_member_from_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_remove_member_from_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_remove_member_from_group_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_remove_member_from_group_resultTupleScheme getScheme() {
        return new bm_mt_indirect_ws_remove_member_from_group_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_remove_member_from_group_resultTupleScheme extends TupleScheme<bm_mt_indirect_ws_remove_member_from_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_remove_member_from_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_remove_member_from_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_add_entry_args implements org.apache.thrift.TBase<bm_mt_indirect_ws_add_entry_args, bm_mt_indirect_ws_add_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_add_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_add_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MATCH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("match_key", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField GRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_handle", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_add_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_add_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public List<BmMatchParam> match_key; // required
    public int grp_handle; // required
    public BmAddEntryOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      MATCH_KEY((short)3, "match_key"),
      GRP_HANDLE((short)4, "grp_handle"),
      OPTIONS((short)5, "options");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MATCH_KEY
            return MATCH_KEY;
          case 4: // GRP_HANDLE
            return GRP_HANDLE;
          case 5: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __GRP_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MATCH_KEY, new org.apache.thrift.meta_data.FieldMetaData("match_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "BmMatchParams")));
      tmpMap.put(_Fields.GRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("grp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmGroupHandle")));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmAddEntryOptions.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_add_entry_args.class, metaDataMap);
    }

    public bm_mt_indirect_ws_add_entry_args() {
    }

    public bm_mt_indirect_ws_add_entry_args(
      int cxt_id,
      String table_name,
      List<BmMatchParam> match_key,
      int grp_handle,
      BmAddEntryOptions options)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.match_key = match_key;
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_add_entry_args(bm_mt_indirect_ws_add_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMatch_key()) {
        this.match_key = other.match_key;
      }
      this.grp_handle = other.grp_handle;
      if (other.isSetOptions()) {
        this.options = new BmAddEntryOptions(other.options);
      }
    }

    public bm_mt_indirect_ws_add_entry_args deepCopy() {
      return new bm_mt_indirect_ws_add_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      this.match_key = null;
      setGrp_handleIsSet(false);
      this.grp_handle = 0;
      this.options = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_ws_add_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_ws_add_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getMatch_keySize() {
      return (this.match_key == null) ? 0 : this.match_key.size();
    }

    public java.util.Iterator<BmMatchParam> getMatch_keyIterator() {
      return (this.match_key == null) ? null : this.match_key.iterator();
    }

    public void addToMatch_key(BmMatchParam elem) {
      if (this.match_key == null) {
        this.match_key = new ArrayList<BmMatchParam>();
      }
      this.match_key.add(elem);
    }

    public List<BmMatchParam> getMatch_key() {
      return this.match_key;
    }

    public bm_mt_indirect_ws_add_entry_args setMatch_key(List<BmMatchParam> match_key) {
      this.match_key = match_key;
      return this;
    }

    public void unsetMatch_key() {
      this.match_key = null;
    }

    /** Returns true if field match_key is set (has been assigned a value) and false otherwise */
    public boolean isSetMatch_key() {
      return this.match_key != null;
    }

    public void setMatch_keyIsSet(boolean value) {
      if (!value) {
        this.match_key = null;
      }
    }

    public int getGrp_handle() {
      return this.grp_handle;
    }

    public bm_mt_indirect_ws_add_entry_args setGrp_handle(int grp_handle) {
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
      return this;
    }

    public void unsetGrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field grp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetGrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    public void setGrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID, value);
    }

    public BmAddEntryOptions getOptions() {
      return this.options;
    }

    public bm_mt_indirect_ws_add_entry_args setOptions(BmAddEntryOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MATCH_KEY:
        if (value == null) {
          unsetMatch_key();
        } else {
          setMatch_key((List<BmMatchParam>)value);
        }
        break;

      case GRP_HANDLE:
        if (value == null) {
          unsetGrp_handle();
        } else {
          setGrp_handle((Integer)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((BmAddEntryOptions)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case MATCH_KEY:
        return getMatch_key();

      case GRP_HANDLE:
        return getGrp_handle();

      case OPTIONS:
        return getOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case MATCH_KEY:
        return isSetMatch_key();
      case GRP_HANDLE:
        return isSetGrp_handle();
      case OPTIONS:
        return isSetOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_add_entry_args)
        return this.equals((bm_mt_indirect_ws_add_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_add_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_match_key = true && this.isSetMatch_key();
      boolean that_present_match_key = true && that.isSetMatch_key();
      if (this_present_match_key || that_present_match_key) {
        if (!(this_present_match_key && that_present_match_key))
          return false;
        if (!this.match_key.equals(that.match_key))
          return false;
      }

      boolean this_present_grp_handle = true;
      boolean that_present_grp_handle = true;
      if (this_present_grp_handle || that_present_grp_handle) {
        if (!(this_present_grp_handle && that_present_grp_handle))
          return false;
        if (this.grp_handle != that.grp_handle)
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_match_key = true && (isSetMatch_key());
      list.add(present_match_key);
      if (present_match_key)
        list.add(match_key);

      boolean present_grp_handle = true;
      list.add(present_grp_handle);
      if (present_grp_handle)
        list.add(grp_handle);

      boolean present_options = true && (isSetOptions());
      list.add(present_options);
      if (present_options)
        list.add(options);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_add_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMatch_key()).compareTo(other.isSetMatch_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatch_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.match_key, other.match_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrp_handle()).compareTo(other.isSetGrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_handle, other.grp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_add_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("match_key:");
      if (this.match_key == null) {
        sb.append("null");
      } else {
        sb.append(this.match_key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("grp_handle:");
      sb.append(this.grp_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_add_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_add_entry_argsStandardScheme getScheme() {
        return new bm_mt_indirect_ws_add_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_add_entry_argsStandardScheme extends StandardScheme<bm_mt_indirect_ws_add_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_add_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MATCH_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.match_key = new ArrayList<BmMatchParam>(_list98.size);
                  BmMatchParam _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = new BmMatchParam();
                    _elem99.read(iprot);
                    struct.match_key.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setMatch_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.grp_handle = iprot.readI32();
                struct.setGrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new BmAddEntryOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_add_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        if (struct.match_key != null) {
          oprot.writeFieldBegin(MATCH_KEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.match_key.size()));
            for (BmMatchParam _iter101 : struct.match_key)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.grp_handle);
        oprot.writeFieldEnd();
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_add_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_add_entry_argsTupleScheme getScheme() {
        return new bm_mt_indirect_ws_add_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_add_entry_argsTupleScheme extends TupleScheme<bm_mt_indirect_ws_add_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_add_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetMatch_key()) {
          optionals.set(2);
        }
        if (struct.isSetGrp_handle()) {
          optionals.set(3);
        }
        if (struct.isSetOptions()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetMatch_key()) {
          {
            oprot.writeI32(struct.match_key.size());
            for (BmMatchParam _iter102 : struct.match_key)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetGrp_handle()) {
          oprot.writeI32(struct.grp_handle);
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_add_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.match_key = new ArrayList<BmMatchParam>(_list103.size);
            BmMatchParam _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = new BmMatchParam();
              _elem104.read(iprot);
              struct.match_key.add(_elem104);
            }
          }
          struct.setMatch_keyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.grp_handle = iprot.readI32();
          struct.setGrp_handleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.options = new BmAddEntryOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_add_entry_result implements org.apache.thrift.TBase<bm_mt_indirect_ws_add_entry_result, bm_mt_indirect_ws_add_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_add_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_add_entry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_add_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_add_entry_resultTupleSchemeFactory());
    }

    public long success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_add_entry_result.class, metaDataMap);
    }

    public bm_mt_indirect_ws_add_entry_result() {
    }

    public bm_mt_indirect_ws_add_entry_result(
      long success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_add_entry_result(bm_mt_indirect_ws_add_entry_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_ws_add_entry_result deepCopy() {
      return new bm_mt_indirect_ws_add_entry_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public bm_mt_indirect_ws_add_entry_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_ws_add_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_add_entry_result)
        return this.equals((bm_mt_indirect_ws_add_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_add_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_add_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_add_entry_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_add_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_add_entry_resultStandardScheme getScheme() {
        return new bm_mt_indirect_ws_add_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_add_entry_resultStandardScheme extends StandardScheme<bm_mt_indirect_ws_add_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_add_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_add_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_add_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_add_entry_resultTupleScheme getScheme() {
        return new bm_mt_indirect_ws_add_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_add_entry_resultTupleScheme extends TupleScheme<bm_mt_indirect_ws_add_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_add_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_add_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_modify_entry_args implements org.apache.thrift.TBase<bm_mt_indirect_ws_modify_entry_args, bm_mt_indirect_ws_modify_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_modify_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_modify_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField GRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_handle", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_modify_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_modify_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required
    public int grp_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle"),
      GRP_HANDLE((short)4, "grp_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          case 4: // GRP_HANDLE
            return GRP_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private static final int __GRP_HANDLE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.GRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("grp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmGroupHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_modify_entry_args.class, metaDataMap);
    }

    public bm_mt_indirect_ws_modify_entry_args() {
    }

    public bm_mt_indirect_ws_modify_entry_args(
      int cxt_id,
      String table_name,
      long entry_handle,
      int grp_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_modify_entry_args(bm_mt_indirect_ws_modify_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
      this.grp_handle = other.grp_handle;
    }

    public bm_mt_indirect_ws_modify_entry_args deepCopy() {
      return new bm_mt_indirect_ws_modify_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
      setGrp_handleIsSet(false);
      this.grp_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_ws_modify_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_ws_modify_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_indirect_ws_modify_entry_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public int getGrp_handle() {
      return this.grp_handle;
    }

    public bm_mt_indirect_ws_modify_entry_args setGrp_handle(int grp_handle) {
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
      return this;
    }

    public void unsetGrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field grp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetGrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    public void setGrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      case GRP_HANDLE:
        if (value == null) {
          unsetGrp_handle();
        } else {
          setGrp_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      case GRP_HANDLE:
        return getGrp_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      case GRP_HANDLE:
        return isSetGrp_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_modify_entry_args)
        return this.equals((bm_mt_indirect_ws_modify_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_modify_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      boolean this_present_grp_handle = true;
      boolean that_present_grp_handle = true;
      if (this_present_grp_handle || that_present_grp_handle) {
        if (!(this_present_grp_handle && that_present_grp_handle))
          return false;
        if (this.grp_handle != that.grp_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      boolean present_grp_handle = true;
      list.add(present_grp_handle);
      if (present_grp_handle)
        list.add(grp_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_modify_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrp_handle()).compareTo(other.isSetGrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_handle, other.grp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_modify_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("grp_handle:");
      sb.append(this.grp_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_modify_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_modify_entry_argsStandardScheme getScheme() {
        return new bm_mt_indirect_ws_modify_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_modify_entry_argsStandardScheme extends StandardScheme<bm_mt_indirect_ws_modify_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_modify_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.grp_handle = iprot.readI32();
                struct.setGrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_modify_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.grp_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_modify_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_modify_entry_argsTupleScheme getScheme() {
        return new bm_mt_indirect_ws_modify_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_modify_entry_argsTupleScheme extends TupleScheme<bm_mt_indirect_ws_modify_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_modify_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        if (struct.isSetGrp_handle()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
        if (struct.isSetGrp_handle()) {
          oprot.writeI32(struct.grp_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_modify_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.grp_handle = iprot.readI32();
          struct.setGrp_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_modify_entry_result implements org.apache.thrift.TBase<bm_mt_indirect_ws_modify_entry_result, bm_mt_indirect_ws_modify_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_modify_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_modify_entry_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_modify_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_modify_entry_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_modify_entry_result.class, metaDataMap);
    }

    public bm_mt_indirect_ws_modify_entry_result() {
    }

    public bm_mt_indirect_ws_modify_entry_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_modify_entry_result(bm_mt_indirect_ws_modify_entry_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_ws_modify_entry_result deepCopy() {
      return new bm_mt_indirect_ws_modify_entry_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_ws_modify_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_modify_entry_result)
        return this.equals((bm_mt_indirect_ws_modify_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_modify_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_modify_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_modify_entry_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_modify_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_modify_entry_resultStandardScheme getScheme() {
        return new bm_mt_indirect_ws_modify_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_modify_entry_resultStandardScheme extends StandardScheme<bm_mt_indirect_ws_modify_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_modify_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_modify_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_modify_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_modify_entry_resultTupleScheme getScheme() {
        return new bm_mt_indirect_ws_modify_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_modify_entry_resultTupleScheme extends TupleScheme<bm_mt_indirect_ws_modify_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_modify_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_modify_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_set_default_group_args implements org.apache.thrift.TBase<bm_mt_indirect_ws_set_default_group_args, bm_mt_indirect_ws_set_default_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_set_default_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_set_default_group_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_handle", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_set_default_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_set_default_group_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public int grp_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      GRP_HANDLE((short)3, "grp_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // GRP_HANDLE
            return GRP_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __GRP_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("grp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmGroupHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_set_default_group_args.class, metaDataMap);
    }

    public bm_mt_indirect_ws_set_default_group_args() {
    }

    public bm_mt_indirect_ws_set_default_group_args(
      int cxt_id,
      String table_name,
      int grp_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_set_default_group_args(bm_mt_indirect_ws_set_default_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.grp_handle = other.grp_handle;
    }

    public bm_mt_indirect_ws_set_default_group_args deepCopy() {
      return new bm_mt_indirect_ws_set_default_group_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setGrp_handleIsSet(false);
      this.grp_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_ws_set_default_group_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_ws_set_default_group_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getGrp_handle() {
      return this.grp_handle;
    }

    public bm_mt_indirect_ws_set_default_group_args setGrp_handle(int grp_handle) {
      this.grp_handle = grp_handle;
      setGrp_handleIsSet(true);
      return this;
    }

    public void unsetGrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field grp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetGrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
    }

    public void setGrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case GRP_HANDLE:
        if (value == null) {
          unsetGrp_handle();
        } else {
          setGrp_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case GRP_HANDLE:
        return getGrp_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case GRP_HANDLE:
        return isSetGrp_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_set_default_group_args)
        return this.equals((bm_mt_indirect_ws_set_default_group_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_set_default_group_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_grp_handle = true;
      boolean that_present_grp_handle = true;
      if (this_present_grp_handle || that_present_grp_handle) {
        if (!(this_present_grp_handle && that_present_grp_handle))
          return false;
        if (this.grp_handle != that.grp_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_grp_handle = true;
      list.add(present_grp_handle);
      if (present_grp_handle)
        list.add(grp_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_set_default_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrp_handle()).compareTo(other.isSetGrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_handle, other.grp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_set_default_group_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("grp_handle:");
      sb.append(this.grp_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_set_default_group_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_set_default_group_argsStandardScheme getScheme() {
        return new bm_mt_indirect_ws_set_default_group_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_set_default_group_argsStandardScheme extends StandardScheme<bm_mt_indirect_ws_set_default_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_set_default_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.grp_handle = iprot.readI32();
                struct.setGrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_set_default_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.grp_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_set_default_group_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_set_default_group_argsTupleScheme getScheme() {
        return new bm_mt_indirect_ws_set_default_group_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_set_default_group_argsTupleScheme extends TupleScheme<bm_mt_indirect_ws_set_default_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_set_default_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetGrp_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetGrp_handle()) {
          oprot.writeI32(struct.grp_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_set_default_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.grp_handle = iprot.readI32();
          struct.setGrp_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_set_default_group_result implements org.apache.thrift.TBase<bm_mt_indirect_ws_set_default_group_result, bm_mt_indirect_ws_set_default_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_set_default_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_set_default_group_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_set_default_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_set_default_group_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_set_default_group_result.class, metaDataMap);
    }

    public bm_mt_indirect_ws_set_default_group_result() {
    }

    public bm_mt_indirect_ws_set_default_group_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_set_default_group_result(bm_mt_indirect_ws_set_default_group_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_ws_set_default_group_result deepCopy() {
      return new bm_mt_indirect_ws_set_default_group_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_ws_set_default_group_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_set_default_group_result)
        return this.equals((bm_mt_indirect_ws_set_default_group_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_set_default_group_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_set_default_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_set_default_group_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_set_default_group_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_set_default_group_resultStandardScheme getScheme() {
        return new bm_mt_indirect_ws_set_default_group_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_set_default_group_resultStandardScheme extends StandardScheme<bm_mt_indirect_ws_set_default_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_set_default_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_set_default_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_set_default_group_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_set_default_group_resultTupleScheme getScheme() {
        return new bm_mt_indirect_ws_set_default_group_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_set_default_group_resultTupleScheme extends TupleScheme<bm_mt_indirect_ws_set_default_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_set_default_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_set_default_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_read_counter_args implements org.apache.thrift.TBase<bm_mt_read_counter_args, bm_mt_read_counter_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_read_counter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_read_counter_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_read_counter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_read_counter_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_read_counter_args.class, metaDataMap);
    }

    public bm_mt_read_counter_args() {
    }

    public bm_mt_read_counter_args(
      int cxt_id,
      String table_name,
      long entry_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_read_counter_args(bm_mt_read_counter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
    }

    public bm_mt_read_counter_args deepCopy() {
      return new bm_mt_read_counter_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_read_counter_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_read_counter_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_read_counter_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_read_counter_args)
        return this.equals((bm_mt_read_counter_args)that);
      return false;
    }

    public boolean equals(bm_mt_read_counter_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_read_counter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_read_counter_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_read_counter_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_read_counter_argsStandardScheme getScheme() {
        return new bm_mt_read_counter_argsStandardScheme();
      }
    }

    private static class bm_mt_read_counter_argsStandardScheme extends StandardScheme<bm_mt_read_counter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_read_counter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_read_counter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_read_counter_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_read_counter_argsTupleScheme getScheme() {
        return new bm_mt_read_counter_argsTupleScheme();
      }
    }

    private static class bm_mt_read_counter_argsTupleScheme extends TupleScheme<bm_mt_read_counter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_read_counter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_read_counter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_read_counter_result implements org.apache.thrift.TBase<bm_mt_read_counter_result, bm_mt_read_counter_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_read_counter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_read_counter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_read_counter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_read_counter_resultTupleSchemeFactory());
    }

    public BmCounterValue success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmCounterValue.class)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_read_counter_result.class, metaDataMap);
    }

    public bm_mt_read_counter_result() {
    }

    public bm_mt_read_counter_result(
      BmCounterValue success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_read_counter_result(bm_mt_read_counter_result other) {
      if (other.isSetSuccess()) {
        this.success = new BmCounterValue(other.success);
      }
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_read_counter_result deepCopy() {
      return new bm_mt_read_counter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public BmCounterValue getSuccess() {
      return this.success;
    }

    public bm_mt_read_counter_result setSuccess(BmCounterValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_read_counter_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BmCounterValue)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_read_counter_result)
        return this.equals((bm_mt_read_counter_result)that);
      return false;
    }

    public boolean equals(bm_mt_read_counter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_read_counter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_read_counter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_read_counter_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_read_counter_resultStandardScheme getScheme() {
        return new bm_mt_read_counter_resultStandardScheme();
      }
    }

    private static class bm_mt_read_counter_resultStandardScheme extends StandardScheme<bm_mt_read_counter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_read_counter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BmCounterValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_read_counter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_read_counter_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_read_counter_resultTupleScheme getScheme() {
        return new bm_mt_read_counter_resultTupleScheme();
      }
    }

    private static class bm_mt_read_counter_resultTupleScheme extends TupleScheme<bm_mt_read_counter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_read_counter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_read_counter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BmCounterValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_reset_counters_args implements org.apache.thrift.TBase<bm_mt_reset_counters_args, bm_mt_reset_counters_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_reset_counters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_reset_counters_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_reset_counters_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_reset_counters_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_reset_counters_args.class, metaDataMap);
    }

    public bm_mt_reset_counters_args() {
    }

    public bm_mt_reset_counters_args(
      int cxt_id,
      String table_name)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_reset_counters_args(bm_mt_reset_counters_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public bm_mt_reset_counters_args deepCopy() {
      return new bm_mt_reset_counters_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_reset_counters_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_reset_counters_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_reset_counters_args)
        return this.equals((bm_mt_reset_counters_args)that);
      return false;
    }

    public boolean equals(bm_mt_reset_counters_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_reset_counters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_reset_counters_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_reset_counters_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_reset_counters_argsStandardScheme getScheme() {
        return new bm_mt_reset_counters_argsStandardScheme();
      }
    }

    private static class bm_mt_reset_counters_argsStandardScheme extends StandardScheme<bm_mt_reset_counters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_reset_counters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_reset_counters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_reset_counters_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_reset_counters_argsTupleScheme getScheme() {
        return new bm_mt_reset_counters_argsTupleScheme();
      }
    }

    private static class bm_mt_reset_counters_argsTupleScheme extends TupleScheme<bm_mt_reset_counters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_reset_counters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_reset_counters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_reset_counters_result implements org.apache.thrift.TBase<bm_mt_reset_counters_result, bm_mt_reset_counters_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_reset_counters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_reset_counters_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_reset_counters_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_reset_counters_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_reset_counters_result.class, metaDataMap);
    }

    public bm_mt_reset_counters_result() {
    }

    public bm_mt_reset_counters_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_reset_counters_result(bm_mt_reset_counters_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_reset_counters_result deepCopy() {
      return new bm_mt_reset_counters_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_reset_counters_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_reset_counters_result)
        return this.equals((bm_mt_reset_counters_result)that);
      return false;
    }

    public boolean equals(bm_mt_reset_counters_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_reset_counters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_reset_counters_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_reset_counters_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_reset_counters_resultStandardScheme getScheme() {
        return new bm_mt_reset_counters_resultStandardScheme();
      }
    }

    private static class bm_mt_reset_counters_resultStandardScheme extends StandardScheme<bm_mt_reset_counters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_reset_counters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_reset_counters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_reset_counters_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_reset_counters_resultTupleScheme getScheme() {
        return new bm_mt_reset_counters_resultTupleScheme();
      }
    }

    private static class bm_mt_reset_counters_resultTupleScheme extends TupleScheme<bm_mt_reset_counters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_reset_counters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_reset_counters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_write_counter_args implements org.apache.thrift.TBase<bm_mt_write_counter_args, bm_mt_write_counter_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_write_counter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_write_counter_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_write_counter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_write_counter_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required
    public BmCounterValue value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle"),
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmCounterValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_write_counter_args.class, metaDataMap);
    }

    public bm_mt_write_counter_args() {
    }

    public bm_mt_write_counter_args(
      int cxt_id,
      String table_name,
      long entry_handle,
      BmCounterValue value)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_write_counter_args(bm_mt_write_counter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
      if (other.isSetValue()) {
        this.value = new BmCounterValue(other.value);
      }
    }

    public bm_mt_write_counter_args deepCopy() {
      return new bm_mt_write_counter_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
      this.value = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_write_counter_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_write_counter_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_write_counter_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public BmCounterValue getValue() {
      return this.value;
    }

    public bm_mt_write_counter_args setValue(BmCounterValue value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((BmCounterValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_write_counter_args)
        return this.equals((bm_mt_write_counter_args)that);
      return false;
    }

    public boolean equals(bm_mt_write_counter_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_write_counter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_write_counter_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (value != null) {
        value.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_write_counter_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_write_counter_argsStandardScheme getScheme() {
        return new bm_mt_write_counter_argsStandardScheme();
      }
    }

    private static class bm_mt_write_counter_argsStandardScheme extends StandardScheme<bm_mt_write_counter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_write_counter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.value = new BmCounterValue();
                struct.value.read(iprot);
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_write_counter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          struct.value.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_write_counter_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_write_counter_argsTupleScheme getScheme() {
        return new bm_mt_write_counter_argsTupleScheme();
      }
    }

    private static class bm_mt_write_counter_argsTupleScheme extends TupleScheme<bm_mt_write_counter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_write_counter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        if (struct.isSetValue()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
        if (struct.isSetValue()) {
          struct.value.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_write_counter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.value = new BmCounterValue();
          struct.value.read(iprot);
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_write_counter_result implements org.apache.thrift.TBase<bm_mt_write_counter_result, bm_mt_write_counter_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_write_counter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_write_counter_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_write_counter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_write_counter_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_write_counter_result.class, metaDataMap);
    }

    public bm_mt_write_counter_result() {
    }

    public bm_mt_write_counter_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_write_counter_result(bm_mt_write_counter_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_write_counter_result deepCopy() {
      return new bm_mt_write_counter_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_write_counter_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_write_counter_result)
        return this.equals((bm_mt_write_counter_result)that);
      return false;
    }

    public boolean equals(bm_mt_write_counter_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_write_counter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_write_counter_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_write_counter_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_write_counter_resultStandardScheme getScheme() {
        return new bm_mt_write_counter_resultStandardScheme();
      }
    }

    private static class bm_mt_write_counter_resultStandardScheme extends StandardScheme<bm_mt_write_counter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_write_counter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_write_counter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_write_counter_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_write_counter_resultTupleScheme getScheme() {
        return new bm_mt_write_counter_resultTupleScheme();
      }
    }

    private static class bm_mt_write_counter_resultTupleScheme extends TupleScheme<bm_mt_write_counter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_write_counter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_write_counter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_set_meter_rates_args implements org.apache.thrift.TBase<bm_mt_set_meter_rates_args, bm_mt_set_meter_rates_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_set_meter_rates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_set_meter_rates_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("rates", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_set_meter_rates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_set_meter_rates_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required
    public long entry_handle; // required
    public List<BmMeterRateConfig> rates; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name"),
      ENTRY_HANDLE((short)3, "entry_handle"),
      RATES((short)4, "rates");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ENTRY_HANDLE
            return ENTRY_HANDLE;
          case 4: // RATES
            return RATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __ENTRY_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmEntryHandle")));
      tmpMap.put(_Fields.RATES, new org.apache.thrift.meta_data.FieldMetaData("rates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMeterRateConfig.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_set_meter_rates_args.class, metaDataMap);
    }

    public bm_mt_set_meter_rates_args() {
    }

    public bm_mt_set_meter_rates_args(
      int cxt_id,
      String table_name,
      long entry_handle,
      List<BmMeterRateConfig> rates)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      this.rates = rates;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_set_meter_rates_args(bm_mt_set_meter_rates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.entry_handle = other.entry_handle;
      if (other.isSetRates()) {
        List<BmMeterRateConfig> __this__rates = new ArrayList<BmMeterRateConfig>(other.rates.size());
        for (BmMeterRateConfig other_element : other.rates) {
          __this__rates.add(new BmMeterRateConfig(other_element));
        }
        this.rates = __this__rates;
      }
    }

    public bm_mt_set_meter_rates_args deepCopy() {
      return new bm_mt_set_meter_rates_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
      setEntry_handleIsSet(false);
      this.entry_handle = 0;
      this.rates = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_set_meter_rates_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_set_meter_rates_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getEntry_handle() {
      return this.entry_handle;
    }

    public bm_mt_set_meter_rates_args setEntry_handle(long entry_handle) {
      this.entry_handle = entry_handle;
      setEntry_handleIsSet(true);
      return this;
    }

    public void unsetEntry_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetEntry_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
    }

    public void setEntry_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
    }

    public int getRatesSize() {
      return (this.rates == null) ? 0 : this.rates.size();
    }

    public java.util.Iterator<BmMeterRateConfig> getRatesIterator() {
      return (this.rates == null) ? null : this.rates.iterator();
    }

    public void addToRates(BmMeterRateConfig elem) {
      if (this.rates == null) {
        this.rates = new ArrayList<BmMeterRateConfig>();
      }
      this.rates.add(elem);
    }

    public List<BmMeterRateConfig> getRates() {
      return this.rates;
    }

    public bm_mt_set_meter_rates_args setRates(List<BmMeterRateConfig> rates) {
      this.rates = rates;
      return this;
    }

    public void unsetRates() {
      this.rates = null;
    }

    /** Returns true if field rates is set (has been assigned a value) and false otherwise */
    public boolean isSetRates() {
      return this.rates != null;
    }

    public void setRatesIsSet(boolean value) {
      if (!value) {
        this.rates = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ENTRY_HANDLE:
        if (value == null) {
          unsetEntry_handle();
        } else {
          setEntry_handle((Long)value);
        }
        break;

      case RATES:
        if (value == null) {
          unsetRates();
        } else {
          setRates((List<BmMeterRateConfig>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      case ENTRY_HANDLE:
        return getEntry_handle();

      case RATES:
        return getRates();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      case ENTRY_HANDLE:
        return isSetEntry_handle();
      case RATES:
        return isSetRates();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_set_meter_rates_args)
        return this.equals((bm_mt_set_meter_rates_args)that);
      return false;
    }

    public boolean equals(bm_mt_set_meter_rates_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_entry_handle = true;
      boolean that_present_entry_handle = true;
      if (this_present_entry_handle || that_present_entry_handle) {
        if (!(this_present_entry_handle && that_present_entry_handle))
          return false;
        if (this.entry_handle != that.entry_handle)
          return false;
      }

      boolean this_present_rates = true && this.isSetRates();
      boolean that_present_rates = true && that.isSetRates();
      if (this_present_rates || that_present_rates) {
        if (!(this_present_rates && that_present_rates))
          return false;
        if (!this.rates.equals(that.rates))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      boolean present_entry_handle = true;
      list.add(present_entry_handle);
      if (present_entry_handle)
        list.add(entry_handle);

      boolean present_rates = true && (isSetRates());
      list.add(present_rates);
      if (present_rates)
        list.add(rates);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_set_meter_rates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntry_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRates()).compareTo(other.isSetRates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rates, other.rates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_set_meter_rates_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entry_handle:");
      sb.append(this.entry_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rates:");
      if (this.rates == null) {
        sb.append("null");
      } else {
        sb.append(this.rates);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_set_meter_rates_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_set_meter_rates_argsStandardScheme getScheme() {
        return new bm_mt_set_meter_rates_argsStandardScheme();
      }
    }

    private static class bm_mt_set_meter_rates_argsStandardScheme extends StandardScheme<bm_mt_set_meter_rates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_set_meter_rates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entry_handle = iprot.readI64();
                struct.setEntry_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.rates = new ArrayList<BmMeterRateConfig>(_list106.size);
                  BmMeterRateConfig _elem107;
                  for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                  {
                    _elem107 = new BmMeterRateConfig();
                    _elem107.read(iprot);
                    struct.rates.add(_elem107);
                  }
                  iprot.readListEnd();
                }
                struct.setRatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_set_meter_rates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.entry_handle);
        oprot.writeFieldEnd();
        if (struct.rates != null) {
          oprot.writeFieldBegin(RATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rates.size()));
            for (BmMeterRateConfig _iter109 : struct.rates)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_set_meter_rates_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_set_meter_rates_argsTupleScheme getScheme() {
        return new bm_mt_set_meter_rates_argsTupleScheme();
      }
    }

    private static class bm_mt_set_meter_rates_argsTupleScheme extends TupleScheme<bm_mt_set_meter_rates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_meter_rates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        if (struct.isSetEntry_handle()) {
          optionals.set(2);
        }
        if (struct.isSetRates()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
        if (struct.isSetEntry_handle()) {
          oprot.writeI64(struct.entry_handle);
        }
        if (struct.isSetRates()) {
          {
            oprot.writeI32(struct.rates.size());
            for (BmMeterRateConfig _iter110 : struct.rates)
            {
              _iter110.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_meter_rates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entry_handle = iprot.readI64();
          struct.setEntry_handleIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.rates = new ArrayList<BmMeterRateConfig>(_list111.size);
            BmMeterRateConfig _elem112;
            for (int _i113 = 0; _i113 < _list111.size; ++_i113)
            {
              _elem112 = new BmMeterRateConfig();
              _elem112.read(iprot);
              struct.rates.add(_elem112);
            }
          }
          struct.setRatesIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_set_meter_rates_result implements org.apache.thrift.TBase<bm_mt_set_meter_rates_result, bm_mt_set_meter_rates_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_set_meter_rates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_set_meter_rates_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_set_meter_rates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_set_meter_rates_resultTupleSchemeFactory());
    }

    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_set_meter_rates_result.class, metaDataMap);
    }

    public bm_mt_set_meter_rates_result() {
    }

    public bm_mt_set_meter_rates_result(
      InvalidTableOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_set_meter_rates_result(bm_mt_set_meter_rates_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_set_meter_rates_result deepCopy() {
      return new bm_mt_set_meter_rates_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_set_meter_rates_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_set_meter_rates_result)
        return this.equals((bm_mt_set_meter_rates_result)that);
      return false;
    }

    public boolean equals(bm_mt_set_meter_rates_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_set_meter_rates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_set_meter_rates_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_set_meter_rates_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_set_meter_rates_resultStandardScheme getScheme() {
        return new bm_mt_set_meter_rates_resultStandardScheme();
      }
    }

    private static class bm_mt_set_meter_rates_resultStandardScheme extends StandardScheme<bm_mt_set_meter_rates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_set_meter_rates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_set_meter_rates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_set_meter_rates_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_set_meter_rates_resultTupleScheme getScheme() {
        return new bm_mt_set_meter_rates_resultTupleScheme();
      }
    }

    private static class bm_mt_set_meter_rates_resultTupleScheme extends TupleScheme<bm_mt_set_meter_rates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_meter_rates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_set_meter_rates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_get_entries_args implements org.apache.thrift.TBase<bm_mt_get_entries_args, bm_mt_get_entries_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_get_entries_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_get_entries_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_get_entries_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_get_entries_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_get_entries_args.class, metaDataMap);
    }

    public bm_mt_get_entries_args() {
    }

    public bm_mt_get_entries_args(
      int cxt_id,
      String table_name)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_get_entries_args(bm_mt_get_entries_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public bm_mt_get_entries_args deepCopy() {
      return new bm_mt_get_entries_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_get_entries_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_get_entries_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_get_entries_args)
        return this.equals((bm_mt_get_entries_args)that);
      return false;
    }

    public boolean equals(bm_mt_get_entries_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_get_entries_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_get_entries_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_get_entries_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_get_entries_argsStandardScheme getScheme() {
        return new bm_mt_get_entries_argsStandardScheme();
      }
    }

    private static class bm_mt_get_entries_argsStandardScheme extends StandardScheme<bm_mt_get_entries_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_get_entries_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_get_entries_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_get_entries_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_get_entries_argsTupleScheme getScheme() {
        return new bm_mt_get_entries_argsTupleScheme();
      }
    }

    private static class bm_mt_get_entries_argsTupleScheme extends TupleScheme<bm_mt_get_entries_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_get_entries_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_get_entries_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_get_entries_result implements org.apache.thrift.TBase<bm_mt_get_entries_result, bm_mt_get_entries_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_get_entries_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_get_entries_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_get_entries_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_get_entries_resultTupleSchemeFactory());
    }

    public List<BmMtEntry> success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMtEntry.class))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_get_entries_result.class, metaDataMap);
    }

    public bm_mt_get_entries_result() {
    }

    public bm_mt_get_entries_result(
      List<BmMtEntry> success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_get_entries_result(bm_mt_get_entries_result other) {
      if (other.isSetSuccess()) {
        List<BmMtEntry> __this__success = new ArrayList<BmMtEntry>(other.success.size());
        for (BmMtEntry other_element : other.success) {
          __this__success.add(new BmMtEntry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_get_entries_result deepCopy() {
      return new bm_mt_get_entries_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BmMtEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BmMtEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<BmMtEntry>();
      }
      this.success.add(elem);
    }

    public List<BmMtEntry> getSuccess() {
      return this.success;
    }

    public bm_mt_get_entries_result setSuccess(List<BmMtEntry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_get_entries_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BmMtEntry>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_get_entries_result)
        return this.equals((bm_mt_get_entries_result)that);
      return false;
    }

    public boolean equals(bm_mt_get_entries_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_get_entries_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_get_entries_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_get_entries_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_get_entries_resultStandardScheme getScheme() {
        return new bm_mt_get_entries_resultStandardScheme();
      }
    }

    private static class bm_mt_get_entries_resultStandardScheme extends StandardScheme<bm_mt_get_entries_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_get_entries_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.success = new ArrayList<BmMtEntry>(_list114.size);
                  BmMtEntry _elem115;
                  for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                  {
                    _elem115 = new BmMtEntry();
                    _elem115.read(iprot);
                    struct.success.add(_elem115);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_get_entries_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BmMtEntry _iter117 : struct.success)
            {
              _iter117.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_get_entries_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_get_entries_resultTupleScheme getScheme() {
        return new bm_mt_get_entries_resultTupleScheme();
      }
    }

    private static class bm_mt_get_entries_resultTupleScheme extends TupleScheme<bm_mt_get_entries_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_get_entries_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BmMtEntry _iter118 : struct.success)
            {
              _iter118.write(oprot);
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_get_entries_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BmMtEntry>(_list119.size);
            BmMtEntry _elem120;
            for (int _i121 = 0; _i121 < _list119.size; ++_i121)
            {
              _elem120 = new BmMtEntry();
              _elem120.read(iprot);
              struct.success.add(_elem120);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_get_default_entry_args implements org.apache.thrift.TBase<bm_mt_get_default_entry_args, bm_mt_get_default_entry_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_get_default_entry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_get_default_entry_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_get_default_entry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_get_default_entry_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_get_default_entry_args.class, metaDataMap);
    }

    public bm_mt_get_default_entry_args() {
    }

    public bm_mt_get_default_entry_args(
      int cxt_id,
      String table_name)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_get_default_entry_args(bm_mt_get_default_entry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public bm_mt_get_default_entry_args deepCopy() {
      return new bm_mt_get_default_entry_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_get_default_entry_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_get_default_entry_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_get_default_entry_args)
        return this.equals((bm_mt_get_default_entry_args)that);
      return false;
    }

    public boolean equals(bm_mt_get_default_entry_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_get_default_entry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_get_default_entry_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_get_default_entry_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_get_default_entry_argsStandardScheme getScheme() {
        return new bm_mt_get_default_entry_argsStandardScheme();
      }
    }

    private static class bm_mt_get_default_entry_argsStandardScheme extends StandardScheme<bm_mt_get_default_entry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_get_default_entry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_get_default_entry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_get_default_entry_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_get_default_entry_argsTupleScheme getScheme() {
        return new bm_mt_get_default_entry_argsTupleScheme();
      }
    }

    private static class bm_mt_get_default_entry_argsTupleScheme extends TupleScheme<bm_mt_get_default_entry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_get_default_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_get_default_entry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_get_default_entry_result implements org.apache.thrift.TBase<bm_mt_get_default_entry_result, bm_mt_get_default_entry_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_get_default_entry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_get_default_entry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_get_default_entry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_get_default_entry_resultTupleSchemeFactory());
    }

    public BmActionEntry success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmActionEntry.class)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_get_default_entry_result.class, metaDataMap);
    }

    public bm_mt_get_default_entry_result() {
    }

    public bm_mt_get_default_entry_result(
      BmActionEntry success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_get_default_entry_result(bm_mt_get_default_entry_result other) {
      if (other.isSetSuccess()) {
        this.success = new BmActionEntry(other.success);
      }
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_get_default_entry_result deepCopy() {
      return new bm_mt_get_default_entry_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public BmActionEntry getSuccess() {
      return this.success;
    }

    public bm_mt_get_default_entry_result setSuccess(BmActionEntry success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_get_default_entry_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BmActionEntry)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_get_default_entry_result)
        return this.equals((bm_mt_get_default_entry_result)that);
      return false;
    }

    public boolean equals(bm_mt_get_default_entry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_get_default_entry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_get_default_entry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_get_default_entry_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_get_default_entry_resultStandardScheme getScheme() {
        return new bm_mt_get_default_entry_resultStandardScheme();
      }
    }

    private static class bm_mt_get_default_entry_resultStandardScheme extends StandardScheme<bm_mt_get_default_entry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_get_default_entry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BmActionEntry();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_get_default_entry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_get_default_entry_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_get_default_entry_resultTupleScheme getScheme() {
        return new bm_mt_get_default_entry_resultTupleScheme();
      }
    }

    private static class bm_mt_get_default_entry_resultTupleScheme extends TupleScheme<bm_mt_get_default_entry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_get_default_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_get_default_entry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BmActionEntry();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_get_members_args implements org.apache.thrift.TBase<bm_mt_indirect_get_members_args, bm_mt_indirect_get_members_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_get_members_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_get_members_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_get_members_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_get_members_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_get_members_args.class, metaDataMap);
    }

    public bm_mt_indirect_get_members_args() {
    }

    public bm_mt_indirect_get_members_args(
      int cxt_id,
      String table_name)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_get_members_args(bm_mt_indirect_get_members_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public bm_mt_indirect_get_members_args deepCopy() {
      return new bm_mt_indirect_get_members_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_get_members_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_get_members_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_get_members_args)
        return this.equals((bm_mt_indirect_get_members_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_get_members_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_get_members_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_get_members_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_get_members_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_get_members_argsStandardScheme getScheme() {
        return new bm_mt_indirect_get_members_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_get_members_argsStandardScheme extends StandardScheme<bm_mt_indirect_get_members_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_get_members_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_get_members_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_get_members_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_get_members_argsTupleScheme getScheme() {
        return new bm_mt_indirect_get_members_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_get_members_argsTupleScheme extends TupleScheme<bm_mt_indirect_get_members_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_get_members_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_get_members_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_get_members_result implements org.apache.thrift.TBase<bm_mt_indirect_get_members_result, bm_mt_indirect_get_members_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_get_members_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_get_members_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_get_members_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_get_members_resultTupleSchemeFactory());
    }

    public List<BmMtIndirectMember> success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMtIndirectMember.class))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_get_members_result.class, metaDataMap);
    }

    public bm_mt_indirect_get_members_result() {
    }

    public bm_mt_indirect_get_members_result(
      List<BmMtIndirectMember> success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_get_members_result(bm_mt_indirect_get_members_result other) {
      if (other.isSetSuccess()) {
        List<BmMtIndirectMember> __this__success = new ArrayList<BmMtIndirectMember>(other.success.size());
        for (BmMtIndirectMember other_element : other.success) {
          __this__success.add(new BmMtIndirectMember(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_get_members_result deepCopy() {
      return new bm_mt_indirect_get_members_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BmMtIndirectMember> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BmMtIndirectMember elem) {
      if (this.success == null) {
        this.success = new ArrayList<BmMtIndirectMember>();
      }
      this.success.add(elem);
    }

    public List<BmMtIndirectMember> getSuccess() {
      return this.success;
    }

    public bm_mt_indirect_get_members_result setSuccess(List<BmMtIndirectMember> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_get_members_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BmMtIndirectMember>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_get_members_result)
        return this.equals((bm_mt_indirect_get_members_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_get_members_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_get_members_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_get_members_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_get_members_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_get_members_resultStandardScheme getScheme() {
        return new bm_mt_indirect_get_members_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_get_members_resultStandardScheme extends StandardScheme<bm_mt_indirect_get_members_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_get_members_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                  struct.success = new ArrayList<BmMtIndirectMember>(_list122.size);
                  BmMtIndirectMember _elem123;
                  for (int _i124 = 0; _i124 < _list122.size; ++_i124)
                  {
                    _elem123 = new BmMtIndirectMember();
                    _elem123.read(iprot);
                    struct.success.add(_elem123);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_get_members_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BmMtIndirectMember _iter125 : struct.success)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_get_members_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_get_members_resultTupleScheme getScheme() {
        return new bm_mt_indirect_get_members_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_get_members_resultTupleScheme extends TupleScheme<bm_mt_indirect_get_members_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_get_members_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BmMtIndirectMember _iter126 : struct.success)
            {
              _iter126.write(oprot);
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_get_members_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BmMtIndirectMember>(_list127.size);
            BmMtIndirectMember _elem128;
            for (int _i129 = 0; _i129 < _list127.size; ++_i129)
            {
              _elem128 = new BmMtIndirectMember();
              _elem128.read(iprot);
              struct.success.add(_elem128);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_get_groups_args implements org.apache.thrift.TBase<bm_mt_indirect_ws_get_groups_args, bm_mt_indirect_ws_get_groups_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_get_groups_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_get_groups_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_get_groups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_get_groups_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_get_groups_args.class, metaDataMap);
    }

    public bm_mt_indirect_ws_get_groups_args() {
    }

    public bm_mt_indirect_ws_get_groups_args(
      int cxt_id,
      String table_name)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_get_groups_args(bm_mt_indirect_ws_get_groups_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public bm_mt_indirect_ws_get_groups_args deepCopy() {
      return new bm_mt_indirect_ws_get_groups_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.table_name = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mt_indirect_ws_get_groups_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public bm_mt_indirect_ws_get_groups_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_get_groups_args)
        return this.equals((bm_mt_indirect_ws_get_groups_args)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_get_groups_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_table_name = true && (isSetTable_name());
      list.add(present_table_name);
      if (present_table_name)
        list.add(table_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_get_groups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_get_groups_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_get_groups_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_get_groups_argsStandardScheme getScheme() {
        return new bm_mt_indirect_ws_get_groups_argsStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_get_groups_argsStandardScheme extends StandardScheme<bm_mt_indirect_ws_get_groups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_get_groups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_get_groups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.table_name != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_get_groups_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_get_groups_argsTupleScheme getScheme() {
        return new bm_mt_indirect_ws_get_groups_argsTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_get_groups_argsTupleScheme extends TupleScheme<bm_mt_indirect_ws_get_groups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_get_groups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetTable_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetTable_name()) {
          oprot.writeString(struct.table_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_get_groups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table_name = iprot.readString();
          struct.setTable_nameIsSet(true);
        }
      }
    }

  }

  public static class bm_mt_indirect_ws_get_groups_result implements org.apache.thrift.TBase<bm_mt_indirect_ws_get_groups_result, bm_mt_indirect_ws_get_groups_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mt_indirect_ws_get_groups_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mt_indirect_ws_get_groups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mt_indirect_ws_get_groups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mt_indirect_ws_get_groups_resultTupleSchemeFactory());
    }

    public List<BmMtIndirectWsGroup> success; // required
    public InvalidTableOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMtIndirectWsGroup.class))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mt_indirect_ws_get_groups_result.class, metaDataMap);
    }

    public bm_mt_indirect_ws_get_groups_result() {
    }

    public bm_mt_indirect_ws_get_groups_result(
      List<BmMtIndirectWsGroup> success,
      InvalidTableOperation ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mt_indirect_ws_get_groups_result(bm_mt_indirect_ws_get_groups_result other) {
      if (other.isSetSuccess()) {
        List<BmMtIndirectWsGroup> __this__success = new ArrayList<BmMtIndirectWsGroup>(other.success.size());
        for (BmMtIndirectWsGroup other_element : other.success) {
          __this__success.add(new BmMtIndirectWsGroup(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new InvalidTableOperation(other.ouch);
      }
    }

    public bm_mt_indirect_ws_get_groups_result deepCopy() {
      return new bm_mt_indirect_ws_get_groups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BmMtIndirectWsGroup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BmMtIndirectWsGroup elem) {
      if (this.success == null) {
        this.success = new ArrayList<BmMtIndirectWsGroup>();
      }
      this.success.add(elem);
    }

    public List<BmMtIndirectWsGroup> getSuccess() {
      return this.success;
    }

    public bm_mt_indirect_ws_get_groups_result setSuccess(List<BmMtIndirectWsGroup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidTableOperation getOuch() {
      return this.ouch;
    }

    public bm_mt_indirect_ws_get_groups_result setOuch(InvalidTableOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BmMtIndirectWsGroup>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidTableOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mt_indirect_ws_get_groups_result)
        return this.equals((bm_mt_indirect_ws_get_groups_result)that);
      return false;
    }

    public boolean equals(bm_mt_indirect_ws_get_groups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mt_indirect_ws_get_groups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mt_indirect_ws_get_groups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mt_indirect_ws_get_groups_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_get_groups_resultStandardScheme getScheme() {
        return new bm_mt_indirect_ws_get_groups_resultStandardScheme();
      }
    }

    private static class bm_mt_indirect_ws_get_groups_resultStandardScheme extends StandardScheme<bm_mt_indirect_ws_get_groups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mt_indirect_ws_get_groups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.success = new ArrayList<BmMtIndirectWsGroup>(_list130.size);
                  BmMtIndirectWsGroup _elem131;
                  for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                  {
                    _elem131 = new BmMtIndirectWsGroup();
                    _elem131.read(iprot);
                    struct.success.add(_elem131);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidTableOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mt_indirect_ws_get_groups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BmMtIndirectWsGroup _iter133 : struct.success)
            {
              _iter133.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mt_indirect_ws_get_groups_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mt_indirect_ws_get_groups_resultTupleScheme getScheme() {
        return new bm_mt_indirect_ws_get_groups_resultTupleScheme();
      }
    }

    private static class bm_mt_indirect_ws_get_groups_resultTupleScheme extends TupleScheme<bm_mt_indirect_ws_get_groups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_get_groups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BmMtIndirectWsGroup _iter134 : struct.success)
            {
              _iter134.write(oprot);
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mt_indirect_ws_get_groups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BmMtIndirectWsGroup>(_list135.size);
            BmMtIndirectWsGroup _elem136;
            for (int _i137 = 0; _i137 < _list135.size; ++_i137)
            {
              _elem136 = new BmMtIndirectWsGroup();
              _elem136.read(iprot);
              struct.success.add(_elem136);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidTableOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_counter_read_args implements org.apache.thrift.TBase<bm_counter_read_args, bm_counter_read_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_counter_read_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_counter_read_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COUNTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("counter_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_counter_read_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_counter_read_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String counter_name; // required
    public int index; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      COUNTER_NAME((short)2, "counter_name"),
      INDEX((short)3, "index");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // COUNTER_NAME
            return COUNTER_NAME;
          case 3: // INDEX
            return INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __INDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("counter_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_counter_read_args.class, metaDataMap);
    }

    public bm_counter_read_args() {
    }

    public bm_counter_read_args(
      int cxt_id,
      String counter_name,
      int index)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.counter_name = counter_name;
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_counter_read_args(bm_counter_read_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetCounter_name()) {
        this.counter_name = other.counter_name;
      }
      this.index = other.index;
    }

    public bm_counter_read_args deepCopy() {
      return new bm_counter_read_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.counter_name = null;
      setIndexIsSet(false);
      this.index = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_counter_read_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getCounter_name() {
      return this.counter_name;
    }

    public bm_counter_read_args setCounter_name(String counter_name) {
      this.counter_name = counter_name;
      return this;
    }

    public void unsetCounter_name() {
      this.counter_name = null;
    }

    /** Returns true if field counter_name is set (has been assigned a value) and false otherwise */
    public boolean isSetCounter_name() {
      return this.counter_name != null;
    }

    public void setCounter_nameIsSet(boolean value) {
      if (!value) {
        this.counter_name = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public bm_counter_read_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case COUNTER_NAME:
        if (value == null) {
          unsetCounter_name();
        } else {
          setCounter_name((String)value);
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case COUNTER_NAME:
        return getCounter_name();

      case INDEX:
        return getIndex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case COUNTER_NAME:
        return isSetCounter_name();
      case INDEX:
        return isSetIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_counter_read_args)
        return this.equals((bm_counter_read_args)that);
      return false;
    }

    public boolean equals(bm_counter_read_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_counter_name = true && this.isSetCounter_name();
      boolean that_present_counter_name = true && that.isSetCounter_name();
      if (this_present_counter_name || that_present_counter_name) {
        if (!(this_present_counter_name && that_present_counter_name))
          return false;
        if (!this.counter_name.equals(that.counter_name))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_counter_name = true && (isSetCounter_name());
      list.add(present_counter_name);
      if (present_counter_name)
        list.add(counter_name);

      boolean present_index = true;
      list.add(present_index);
      if (present_index)
        list.add(index);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_counter_read_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCounter_name()).compareTo(other.isSetCounter_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCounter_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_name, other.counter_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_counter_read_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("counter_name:");
      if (this.counter_name == null) {
        sb.append("null");
      } else {
        sb.append(this.counter_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_counter_read_argsStandardSchemeFactory implements SchemeFactory {
      public bm_counter_read_argsStandardScheme getScheme() {
        return new bm_counter_read_argsStandardScheme();
      }
    }

    private static class bm_counter_read_argsStandardScheme extends StandardScheme<bm_counter_read_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_counter_read_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.counter_name = iprot.readString();
                struct.setCounter_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_counter_read_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.counter_name != null) {
          oprot.writeFieldBegin(COUNTER_NAME_FIELD_DESC);
          oprot.writeString(struct.counter_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_counter_read_argsTupleSchemeFactory implements SchemeFactory {
      public bm_counter_read_argsTupleScheme getScheme() {
        return new bm_counter_read_argsTupleScheme();
      }
    }

    private static class bm_counter_read_argsTupleScheme extends TupleScheme<bm_counter_read_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_counter_read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetCounter_name()) {
          optionals.set(1);
        }
        if (struct.isSetIndex()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetCounter_name()) {
          oprot.writeString(struct.counter_name);
        }
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_counter_read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.counter_name = iprot.readString();
          struct.setCounter_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
      }
    }

  }

  public static class bm_counter_read_result implements org.apache.thrift.TBase<bm_counter_read_result, bm_counter_read_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_counter_read_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_counter_read_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_counter_read_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_counter_read_resultTupleSchemeFactory());
    }

    public BmCounterValue success; // required
    public InvalidCounterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmCounterValue.class)));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_counter_read_result.class, metaDataMap);
    }

    public bm_counter_read_result() {
    }

    public bm_counter_read_result(
      BmCounterValue success,
      InvalidCounterOperation ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_counter_read_result(bm_counter_read_result other) {
      if (other.isSetSuccess()) {
        this.success = new BmCounterValue(other.success);
      }
      if (other.isSetOuch()) {
        this.ouch = new InvalidCounterOperation(other.ouch);
      }
    }

    public bm_counter_read_result deepCopy() {
      return new bm_counter_read_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public BmCounterValue getSuccess() {
      return this.success;
    }

    public bm_counter_read_result setSuccess(BmCounterValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidCounterOperation getOuch() {
      return this.ouch;
    }

    public bm_counter_read_result setOuch(InvalidCounterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BmCounterValue)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidCounterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_counter_read_result)
        return this.equals((bm_counter_read_result)that);
      return false;
    }

    public boolean equals(bm_counter_read_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_counter_read_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_counter_read_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_counter_read_resultStandardSchemeFactory implements SchemeFactory {
      public bm_counter_read_resultStandardScheme getScheme() {
        return new bm_counter_read_resultStandardScheme();
      }
    }

    private static class bm_counter_read_resultStandardScheme extends StandardScheme<bm_counter_read_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_counter_read_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BmCounterValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidCounterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_counter_read_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_counter_read_resultTupleSchemeFactory implements SchemeFactory {
      public bm_counter_read_resultTupleScheme getScheme() {
        return new bm_counter_read_resultTupleScheme();
      }
    }

    private static class bm_counter_read_resultTupleScheme extends TupleScheme<bm_counter_read_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_counter_read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_counter_read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BmCounterValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidCounterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_counter_reset_all_args implements org.apache.thrift.TBase<bm_counter_reset_all_args, bm_counter_reset_all_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_counter_reset_all_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_counter_reset_all_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COUNTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("counter_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_counter_reset_all_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_counter_reset_all_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String counter_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      COUNTER_NAME((short)2, "counter_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // COUNTER_NAME
            return COUNTER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("counter_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_counter_reset_all_args.class, metaDataMap);
    }

    public bm_counter_reset_all_args() {
    }

    public bm_counter_reset_all_args(
      int cxt_id,
      String counter_name)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.counter_name = counter_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_counter_reset_all_args(bm_counter_reset_all_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetCounter_name()) {
        this.counter_name = other.counter_name;
      }
    }

    public bm_counter_reset_all_args deepCopy() {
      return new bm_counter_reset_all_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.counter_name = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_counter_reset_all_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getCounter_name() {
      return this.counter_name;
    }

    public bm_counter_reset_all_args setCounter_name(String counter_name) {
      this.counter_name = counter_name;
      return this;
    }

    public void unsetCounter_name() {
      this.counter_name = null;
    }

    /** Returns true if field counter_name is set (has been assigned a value) and false otherwise */
    public boolean isSetCounter_name() {
      return this.counter_name != null;
    }

    public void setCounter_nameIsSet(boolean value) {
      if (!value) {
        this.counter_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case COUNTER_NAME:
        if (value == null) {
          unsetCounter_name();
        } else {
          setCounter_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case COUNTER_NAME:
        return getCounter_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case COUNTER_NAME:
        return isSetCounter_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_counter_reset_all_args)
        return this.equals((bm_counter_reset_all_args)that);
      return false;
    }

    public boolean equals(bm_counter_reset_all_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_counter_name = true && this.isSetCounter_name();
      boolean that_present_counter_name = true && that.isSetCounter_name();
      if (this_present_counter_name || that_present_counter_name) {
        if (!(this_present_counter_name && that_present_counter_name))
          return false;
        if (!this.counter_name.equals(that.counter_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_counter_name = true && (isSetCounter_name());
      list.add(present_counter_name);
      if (present_counter_name)
        list.add(counter_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_counter_reset_all_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCounter_name()).compareTo(other.isSetCounter_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCounter_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_name, other.counter_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_counter_reset_all_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("counter_name:");
      if (this.counter_name == null) {
        sb.append("null");
      } else {
        sb.append(this.counter_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_counter_reset_all_argsStandardSchemeFactory implements SchemeFactory {
      public bm_counter_reset_all_argsStandardScheme getScheme() {
        return new bm_counter_reset_all_argsStandardScheme();
      }
    }

    private static class bm_counter_reset_all_argsStandardScheme extends StandardScheme<bm_counter_reset_all_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_counter_reset_all_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.counter_name = iprot.readString();
                struct.setCounter_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_counter_reset_all_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.counter_name != null) {
          oprot.writeFieldBegin(COUNTER_NAME_FIELD_DESC);
          oprot.writeString(struct.counter_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_counter_reset_all_argsTupleSchemeFactory implements SchemeFactory {
      public bm_counter_reset_all_argsTupleScheme getScheme() {
        return new bm_counter_reset_all_argsTupleScheme();
      }
    }

    private static class bm_counter_reset_all_argsTupleScheme extends TupleScheme<bm_counter_reset_all_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_counter_reset_all_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetCounter_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetCounter_name()) {
          oprot.writeString(struct.counter_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_counter_reset_all_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.counter_name = iprot.readString();
          struct.setCounter_nameIsSet(true);
        }
      }
    }

  }

  public static class bm_counter_reset_all_result implements org.apache.thrift.TBase<bm_counter_reset_all_result, bm_counter_reset_all_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_counter_reset_all_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_counter_reset_all_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_counter_reset_all_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_counter_reset_all_resultTupleSchemeFactory());
    }

    public InvalidCounterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_counter_reset_all_result.class, metaDataMap);
    }

    public bm_counter_reset_all_result() {
    }

    public bm_counter_reset_all_result(
      InvalidCounterOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_counter_reset_all_result(bm_counter_reset_all_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidCounterOperation(other.ouch);
      }
    }

    public bm_counter_reset_all_result deepCopy() {
      return new bm_counter_reset_all_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidCounterOperation getOuch() {
      return this.ouch;
    }

    public bm_counter_reset_all_result setOuch(InvalidCounterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidCounterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_counter_reset_all_result)
        return this.equals((bm_counter_reset_all_result)that);
      return false;
    }

    public boolean equals(bm_counter_reset_all_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_counter_reset_all_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_counter_reset_all_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_counter_reset_all_resultStandardSchemeFactory implements SchemeFactory {
      public bm_counter_reset_all_resultStandardScheme getScheme() {
        return new bm_counter_reset_all_resultStandardScheme();
      }
    }

    private static class bm_counter_reset_all_resultStandardScheme extends StandardScheme<bm_counter_reset_all_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_counter_reset_all_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidCounterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_counter_reset_all_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_counter_reset_all_resultTupleSchemeFactory implements SchemeFactory {
      public bm_counter_reset_all_resultTupleScheme getScheme() {
        return new bm_counter_reset_all_resultTupleScheme();
      }
    }

    private static class bm_counter_reset_all_resultTupleScheme extends TupleScheme<bm_counter_reset_all_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_counter_reset_all_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_counter_reset_all_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidCounterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_counter_write_args implements org.apache.thrift.TBase<bm_counter_write_args, bm_counter_write_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_counter_write_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_counter_write_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COUNTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("counter_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_counter_write_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_counter_write_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String counter_name; // required
    public int index; // required
    public BmCounterValue value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      COUNTER_NAME((short)2, "counter_name"),
      INDEX((short)3, "index"),
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // COUNTER_NAME
            return COUNTER_NAME;
          case 3: // INDEX
            return INDEX;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __INDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("counter_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmCounterValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_counter_write_args.class, metaDataMap);
    }

    public bm_counter_write_args() {
    }

    public bm_counter_write_args(
      int cxt_id,
      String counter_name,
      int index,
      BmCounterValue value)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.counter_name = counter_name;
      this.index = index;
      setIndexIsSet(true);
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_counter_write_args(bm_counter_write_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetCounter_name()) {
        this.counter_name = other.counter_name;
      }
      this.index = other.index;
      if (other.isSetValue()) {
        this.value = new BmCounterValue(other.value);
      }
    }

    public bm_counter_write_args deepCopy() {
      return new bm_counter_write_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.counter_name = null;
      setIndexIsSet(false);
      this.index = 0;
      this.value = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_counter_write_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getCounter_name() {
      return this.counter_name;
    }

    public bm_counter_write_args setCounter_name(String counter_name) {
      this.counter_name = counter_name;
      return this;
    }

    public void unsetCounter_name() {
      this.counter_name = null;
    }

    /** Returns true if field counter_name is set (has been assigned a value) and false otherwise */
    public boolean isSetCounter_name() {
      return this.counter_name != null;
    }

    public void setCounter_nameIsSet(boolean value) {
      if (!value) {
        this.counter_name = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public bm_counter_write_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public BmCounterValue getValue() {
      return this.value;
    }

    public bm_counter_write_args setValue(BmCounterValue value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case COUNTER_NAME:
        if (value == null) {
          unsetCounter_name();
        } else {
          setCounter_name((String)value);
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((BmCounterValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case COUNTER_NAME:
        return getCounter_name();

      case INDEX:
        return getIndex();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case COUNTER_NAME:
        return isSetCounter_name();
      case INDEX:
        return isSetIndex();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_counter_write_args)
        return this.equals((bm_counter_write_args)that);
      return false;
    }

    public boolean equals(bm_counter_write_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_counter_name = true && this.isSetCounter_name();
      boolean that_present_counter_name = true && that.isSetCounter_name();
      if (this_present_counter_name || that_present_counter_name) {
        if (!(this_present_counter_name && that_present_counter_name))
          return false;
        if (!this.counter_name.equals(that.counter_name))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_counter_name = true && (isSetCounter_name());
      list.add(present_counter_name);
      if (present_counter_name)
        list.add(counter_name);

      boolean present_index = true;
      list.add(present_index);
      if (present_index)
        list.add(index);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_counter_write_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCounter_name()).compareTo(other.isSetCounter_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCounter_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter_name, other.counter_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_counter_write_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("counter_name:");
      if (this.counter_name == null) {
        sb.append("null");
      } else {
        sb.append(this.counter_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (value != null) {
        value.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_counter_write_argsStandardSchemeFactory implements SchemeFactory {
      public bm_counter_write_argsStandardScheme getScheme() {
        return new bm_counter_write_argsStandardScheme();
      }
    }

    private static class bm_counter_write_argsStandardScheme extends StandardScheme<bm_counter_write_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_counter_write_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.counter_name = iprot.readString();
                struct.setCounter_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.value = new BmCounterValue();
                struct.value.read(iprot);
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_counter_write_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.counter_name != null) {
          oprot.writeFieldBegin(COUNTER_NAME_FIELD_DESC);
          oprot.writeString(struct.counter_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          struct.value.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_counter_write_argsTupleSchemeFactory implements SchemeFactory {
      public bm_counter_write_argsTupleScheme getScheme() {
        return new bm_counter_write_argsTupleScheme();
      }
    }

    private static class bm_counter_write_argsTupleScheme extends TupleScheme<bm_counter_write_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_counter_write_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetCounter_name()) {
          optionals.set(1);
        }
        if (struct.isSetIndex()) {
          optionals.set(2);
        }
        if (struct.isSetValue()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetCounter_name()) {
          oprot.writeString(struct.counter_name);
        }
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
        if (struct.isSetValue()) {
          struct.value.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_counter_write_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.counter_name = iprot.readString();
          struct.setCounter_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.value = new BmCounterValue();
          struct.value.read(iprot);
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class bm_counter_write_result implements org.apache.thrift.TBase<bm_counter_write_result, bm_counter_write_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_counter_write_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_counter_write_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_counter_write_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_counter_write_resultTupleSchemeFactory());
    }

    public InvalidCounterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_counter_write_result.class, metaDataMap);
    }

    public bm_counter_write_result() {
    }

    public bm_counter_write_result(
      InvalidCounterOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_counter_write_result(bm_counter_write_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidCounterOperation(other.ouch);
      }
    }

    public bm_counter_write_result deepCopy() {
      return new bm_counter_write_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidCounterOperation getOuch() {
      return this.ouch;
    }

    public bm_counter_write_result setOuch(InvalidCounterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidCounterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_counter_write_result)
        return this.equals((bm_counter_write_result)that);
      return false;
    }

    public boolean equals(bm_counter_write_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_counter_write_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_counter_write_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_counter_write_resultStandardSchemeFactory implements SchemeFactory {
      public bm_counter_write_resultStandardScheme getScheme() {
        return new bm_counter_write_resultStandardScheme();
      }
    }

    private static class bm_counter_write_resultStandardScheme extends StandardScheme<bm_counter_write_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_counter_write_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidCounterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_counter_write_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_counter_write_resultTupleSchemeFactory implements SchemeFactory {
      public bm_counter_write_resultTupleScheme getScheme() {
        return new bm_counter_write_resultTupleScheme();
      }
    }

    private static class bm_counter_write_resultTupleScheme extends TupleScheme<bm_counter_write_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_counter_write_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_counter_write_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidCounterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_learning_ack_args implements org.apache.thrift.TBase<bm_learning_ack_args, bm_learning_ack_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_learning_ack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_learning_ack_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("list_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BUFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buffer_id", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField SAMPLE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sample_ids", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_learning_ack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_learning_ack_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int list_id; // required
    public long buffer_id; // required
    public List<Integer> sample_ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      LIST_ID((short)2, "list_id"),
      BUFFER_ID((short)3, "buffer_id"),
      SAMPLE_IDS((short)4, "sample_ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // LIST_ID
            return LIST_ID;
          case 3: // BUFFER_ID
            return BUFFER_ID;
          case 4: // SAMPLE_IDS
            return SAMPLE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __LIST_ID_ISSET_ID = 1;
    private static final int __BUFFER_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIST_ID, new org.apache.thrift.meta_data.FieldMetaData("list_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmLearningListId")));
      tmpMap.put(_Fields.BUFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("buffer_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmLearningBufferId")));
      tmpMap.put(_Fields.SAMPLE_IDS, new org.apache.thrift.meta_data.FieldMetaData("sample_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "BmLearningSampleId"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_learning_ack_args.class, metaDataMap);
    }

    public bm_learning_ack_args() {
    }

    public bm_learning_ack_args(
      int cxt_id,
      int list_id,
      long buffer_id,
      List<Integer> sample_ids)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.list_id = list_id;
      setList_idIsSet(true);
      this.buffer_id = buffer_id;
      setBuffer_idIsSet(true);
      this.sample_ids = sample_ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_learning_ack_args(bm_learning_ack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.list_id = other.list_id;
      this.buffer_id = other.buffer_id;
      if (other.isSetSample_ids()) {
        List<Integer> __this__sample_ids = new ArrayList<Integer>(other.sample_ids.size());
        for (Integer other_element : other.sample_ids) {
          __this__sample_ids.add(other_element);
        }
        this.sample_ids = __this__sample_ids;
      }
    }

    public bm_learning_ack_args deepCopy() {
      return new bm_learning_ack_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setList_idIsSet(false);
      this.list_id = 0;
      setBuffer_idIsSet(false);
      this.buffer_id = 0;
      this.sample_ids = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_learning_ack_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getList_id() {
      return this.list_id;
    }

    public bm_learning_ack_args setList_id(int list_id) {
      this.list_id = list_id;
      setList_idIsSet(true);
      return this;
    }

    public void unsetList_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIST_ID_ISSET_ID);
    }

    /** Returns true if field list_id is set (has been assigned a value) and false otherwise */
    public boolean isSetList_id() {
      return EncodingUtils.testBit(__isset_bitfield, __LIST_ID_ISSET_ID);
    }

    public void setList_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIST_ID_ISSET_ID, value);
    }

    public long getBuffer_id() {
      return this.buffer_id;
    }

    public bm_learning_ack_args setBuffer_id(long buffer_id) {
      this.buffer_id = buffer_id;
      setBuffer_idIsSet(true);
      return this;
    }

    public void unsetBuffer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUFFER_ID_ISSET_ID);
    }

    /** Returns true if field buffer_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBuffer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __BUFFER_ID_ISSET_ID);
    }

    public void setBuffer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUFFER_ID_ISSET_ID, value);
    }

    public int getSample_idsSize() {
      return (this.sample_ids == null) ? 0 : this.sample_ids.size();
    }

    public java.util.Iterator<Integer> getSample_idsIterator() {
      return (this.sample_ids == null) ? null : this.sample_ids.iterator();
    }

    public void addToSample_ids(int elem) {
      if (this.sample_ids == null) {
        this.sample_ids = new ArrayList<Integer>();
      }
      this.sample_ids.add(elem);
    }

    public List<Integer> getSample_ids() {
      return this.sample_ids;
    }

    public bm_learning_ack_args setSample_ids(List<Integer> sample_ids) {
      this.sample_ids = sample_ids;
      return this;
    }

    public void unsetSample_ids() {
      this.sample_ids = null;
    }

    /** Returns true if field sample_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetSample_ids() {
      return this.sample_ids != null;
    }

    public void setSample_idsIsSet(boolean value) {
      if (!value) {
        this.sample_ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case LIST_ID:
        if (value == null) {
          unsetList_id();
        } else {
          setList_id((Integer)value);
        }
        break;

      case BUFFER_ID:
        if (value == null) {
          unsetBuffer_id();
        } else {
          setBuffer_id((Long)value);
        }
        break;

      case SAMPLE_IDS:
        if (value == null) {
          unsetSample_ids();
        } else {
          setSample_ids((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case LIST_ID:
        return getList_id();

      case BUFFER_ID:
        return getBuffer_id();

      case SAMPLE_IDS:
        return getSample_ids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case LIST_ID:
        return isSetList_id();
      case BUFFER_ID:
        return isSetBuffer_id();
      case SAMPLE_IDS:
        return isSetSample_ids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_learning_ack_args)
        return this.equals((bm_learning_ack_args)that);
      return false;
    }

    public boolean equals(bm_learning_ack_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_list_id = true;
      boolean that_present_list_id = true;
      if (this_present_list_id || that_present_list_id) {
        if (!(this_present_list_id && that_present_list_id))
          return false;
        if (this.list_id != that.list_id)
          return false;
      }

      boolean this_present_buffer_id = true;
      boolean that_present_buffer_id = true;
      if (this_present_buffer_id || that_present_buffer_id) {
        if (!(this_present_buffer_id && that_present_buffer_id))
          return false;
        if (this.buffer_id != that.buffer_id)
          return false;
      }

      boolean this_present_sample_ids = true && this.isSetSample_ids();
      boolean that_present_sample_ids = true && that.isSetSample_ids();
      if (this_present_sample_ids || that_present_sample_ids) {
        if (!(this_present_sample_ids && that_present_sample_ids))
          return false;
        if (!this.sample_ids.equals(that.sample_ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_list_id = true;
      list.add(present_list_id);
      if (present_list_id)
        list.add(list_id);

      boolean present_buffer_id = true;
      list.add(present_buffer_id);
      if (present_buffer_id)
        list.add(buffer_id);

      boolean present_sample_ids = true && (isSetSample_ids());
      list.add(present_sample_ids);
      if (present_sample_ids)
        list.add(sample_ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_learning_ack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetList_id()).compareTo(other.isSetList_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetList_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_id, other.list_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBuffer_id()).compareTo(other.isSetBuffer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuffer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffer_id, other.buffer_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSample_ids()).compareTo(other.isSetSample_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSample_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sample_ids, other.sample_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_learning_ack_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("list_id:");
      sb.append(this.list_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("buffer_id:");
      sb.append(this.buffer_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sample_ids:");
      if (this.sample_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.sample_ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_learning_ack_argsStandardSchemeFactory implements SchemeFactory {
      public bm_learning_ack_argsStandardScheme getScheme() {
        return new bm_learning_ack_argsStandardScheme();
      }
    }

    private static class bm_learning_ack_argsStandardScheme extends StandardScheme<bm_learning_ack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_learning_ack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.list_id = iprot.readI32();
                struct.setList_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BUFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.buffer_id = iprot.readI64();
                struct.setBuffer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SAMPLE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                  struct.sample_ids = new ArrayList<Integer>(_list138.size);
                  int _elem139;
                  for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                  {
                    _elem139 = iprot.readI32();
                    struct.sample_ids.add(_elem139);
                  }
                  iprot.readListEnd();
                }
                struct.setSample_idsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_learning_ack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIST_ID_FIELD_DESC);
        oprot.writeI32(struct.list_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BUFFER_ID_FIELD_DESC);
        oprot.writeI64(struct.buffer_id);
        oprot.writeFieldEnd();
        if (struct.sample_ids != null) {
          oprot.writeFieldBegin(SAMPLE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sample_ids.size()));
            for (int _iter141 : struct.sample_ids)
            {
              oprot.writeI32(_iter141);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_learning_ack_argsTupleSchemeFactory implements SchemeFactory {
      public bm_learning_ack_argsTupleScheme getScheme() {
        return new bm_learning_ack_argsTupleScheme();
      }
    }

    private static class bm_learning_ack_argsTupleScheme extends TupleScheme<bm_learning_ack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_learning_ack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetList_id()) {
          optionals.set(1);
        }
        if (struct.isSetBuffer_id()) {
          optionals.set(2);
        }
        if (struct.isSetSample_ids()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetList_id()) {
          oprot.writeI32(struct.list_id);
        }
        if (struct.isSetBuffer_id()) {
          oprot.writeI64(struct.buffer_id);
        }
        if (struct.isSetSample_ids()) {
          {
            oprot.writeI32(struct.sample_ids.size());
            for (int _iter142 : struct.sample_ids)
            {
              oprot.writeI32(_iter142);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_learning_ack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.list_id = iprot.readI32();
          struct.setList_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.buffer_id = iprot.readI64();
          struct.setBuffer_idIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.sample_ids = new ArrayList<Integer>(_list143.size);
            int _elem144;
            for (int _i145 = 0; _i145 < _list143.size; ++_i145)
            {
              _elem144 = iprot.readI32();
              struct.sample_ids.add(_elem144);
            }
          }
          struct.setSample_idsIsSet(true);
        }
      }
    }

  }

  public static class bm_learning_ack_result implements org.apache.thrift.TBase<bm_learning_ack_result, bm_learning_ack_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_learning_ack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_learning_ack_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_learning_ack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_learning_ack_resultTupleSchemeFactory());
    }

    public InvalidLearnOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_learning_ack_result.class, metaDataMap);
    }

    public bm_learning_ack_result() {
    }

    public bm_learning_ack_result(
      InvalidLearnOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_learning_ack_result(bm_learning_ack_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidLearnOperation(other.ouch);
      }
    }

    public bm_learning_ack_result deepCopy() {
      return new bm_learning_ack_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidLearnOperation getOuch() {
      return this.ouch;
    }

    public bm_learning_ack_result setOuch(InvalidLearnOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidLearnOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_learning_ack_result)
        return this.equals((bm_learning_ack_result)that);
      return false;
    }

    public boolean equals(bm_learning_ack_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_learning_ack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_learning_ack_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_learning_ack_resultStandardSchemeFactory implements SchemeFactory {
      public bm_learning_ack_resultStandardScheme getScheme() {
        return new bm_learning_ack_resultStandardScheme();
      }
    }

    private static class bm_learning_ack_resultStandardScheme extends StandardScheme<bm_learning_ack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_learning_ack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidLearnOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_learning_ack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_learning_ack_resultTupleSchemeFactory implements SchemeFactory {
      public bm_learning_ack_resultTupleScheme getScheme() {
        return new bm_learning_ack_resultTupleScheme();
      }
    }

    private static class bm_learning_ack_resultTupleScheme extends TupleScheme<bm_learning_ack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_learning_ack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_learning_ack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidLearnOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_learning_ack_buffer_args implements org.apache.thrift.TBase<bm_learning_ack_buffer_args, bm_learning_ack_buffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_learning_ack_buffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_learning_ack_buffer_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("list_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BUFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buffer_id", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_learning_ack_buffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_learning_ack_buffer_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int list_id; // required
    public long buffer_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      LIST_ID((short)2, "list_id"),
      BUFFER_ID((short)3, "buffer_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // LIST_ID
            return LIST_ID;
          case 3: // BUFFER_ID
            return BUFFER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __LIST_ID_ISSET_ID = 1;
    private static final int __BUFFER_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIST_ID, new org.apache.thrift.meta_data.FieldMetaData("list_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmLearningListId")));
      tmpMap.put(_Fields.BUFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("buffer_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmLearningBufferId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_learning_ack_buffer_args.class, metaDataMap);
    }

    public bm_learning_ack_buffer_args() {
    }

    public bm_learning_ack_buffer_args(
      int cxt_id,
      int list_id,
      long buffer_id)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.list_id = list_id;
      setList_idIsSet(true);
      this.buffer_id = buffer_id;
      setBuffer_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_learning_ack_buffer_args(bm_learning_ack_buffer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.list_id = other.list_id;
      this.buffer_id = other.buffer_id;
    }

    public bm_learning_ack_buffer_args deepCopy() {
      return new bm_learning_ack_buffer_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setList_idIsSet(false);
      this.list_id = 0;
      setBuffer_idIsSet(false);
      this.buffer_id = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_learning_ack_buffer_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getList_id() {
      return this.list_id;
    }

    public bm_learning_ack_buffer_args setList_id(int list_id) {
      this.list_id = list_id;
      setList_idIsSet(true);
      return this;
    }

    public void unsetList_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIST_ID_ISSET_ID);
    }

    /** Returns true if field list_id is set (has been assigned a value) and false otherwise */
    public boolean isSetList_id() {
      return EncodingUtils.testBit(__isset_bitfield, __LIST_ID_ISSET_ID);
    }

    public void setList_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIST_ID_ISSET_ID, value);
    }

    public long getBuffer_id() {
      return this.buffer_id;
    }

    public bm_learning_ack_buffer_args setBuffer_id(long buffer_id) {
      this.buffer_id = buffer_id;
      setBuffer_idIsSet(true);
      return this;
    }

    public void unsetBuffer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUFFER_ID_ISSET_ID);
    }

    /** Returns true if field buffer_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBuffer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __BUFFER_ID_ISSET_ID);
    }

    public void setBuffer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUFFER_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case LIST_ID:
        if (value == null) {
          unsetList_id();
        } else {
          setList_id((Integer)value);
        }
        break;

      case BUFFER_ID:
        if (value == null) {
          unsetBuffer_id();
        } else {
          setBuffer_id((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case LIST_ID:
        return getList_id();

      case BUFFER_ID:
        return getBuffer_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case LIST_ID:
        return isSetList_id();
      case BUFFER_ID:
        return isSetBuffer_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_learning_ack_buffer_args)
        return this.equals((bm_learning_ack_buffer_args)that);
      return false;
    }

    public boolean equals(bm_learning_ack_buffer_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_list_id = true;
      boolean that_present_list_id = true;
      if (this_present_list_id || that_present_list_id) {
        if (!(this_present_list_id && that_present_list_id))
          return false;
        if (this.list_id != that.list_id)
          return false;
      }

      boolean this_present_buffer_id = true;
      boolean that_present_buffer_id = true;
      if (this_present_buffer_id || that_present_buffer_id) {
        if (!(this_present_buffer_id && that_present_buffer_id))
          return false;
        if (this.buffer_id != that.buffer_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_list_id = true;
      list.add(present_list_id);
      if (present_list_id)
        list.add(list_id);

      boolean present_buffer_id = true;
      list.add(present_buffer_id);
      if (present_buffer_id)
        list.add(buffer_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_learning_ack_buffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetList_id()).compareTo(other.isSetList_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetList_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_id, other.list_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBuffer_id()).compareTo(other.isSetBuffer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuffer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffer_id, other.buffer_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_learning_ack_buffer_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("list_id:");
      sb.append(this.list_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("buffer_id:");
      sb.append(this.buffer_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_learning_ack_buffer_argsStandardSchemeFactory implements SchemeFactory {
      public bm_learning_ack_buffer_argsStandardScheme getScheme() {
        return new bm_learning_ack_buffer_argsStandardScheme();
      }
    }

    private static class bm_learning_ack_buffer_argsStandardScheme extends StandardScheme<bm_learning_ack_buffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_learning_ack_buffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.list_id = iprot.readI32();
                struct.setList_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BUFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.buffer_id = iprot.readI64();
                struct.setBuffer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_learning_ack_buffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIST_ID_FIELD_DESC);
        oprot.writeI32(struct.list_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BUFFER_ID_FIELD_DESC);
        oprot.writeI64(struct.buffer_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_learning_ack_buffer_argsTupleSchemeFactory implements SchemeFactory {
      public bm_learning_ack_buffer_argsTupleScheme getScheme() {
        return new bm_learning_ack_buffer_argsTupleScheme();
      }
    }

    private static class bm_learning_ack_buffer_argsTupleScheme extends TupleScheme<bm_learning_ack_buffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_learning_ack_buffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetList_id()) {
          optionals.set(1);
        }
        if (struct.isSetBuffer_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetList_id()) {
          oprot.writeI32(struct.list_id);
        }
        if (struct.isSetBuffer_id()) {
          oprot.writeI64(struct.buffer_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_learning_ack_buffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.list_id = iprot.readI32();
          struct.setList_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.buffer_id = iprot.readI64();
          struct.setBuffer_idIsSet(true);
        }
      }
    }

  }

  public static class bm_learning_ack_buffer_result implements org.apache.thrift.TBase<bm_learning_ack_buffer_result, bm_learning_ack_buffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_learning_ack_buffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_learning_ack_buffer_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_learning_ack_buffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_learning_ack_buffer_resultTupleSchemeFactory());
    }

    public InvalidLearnOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_learning_ack_buffer_result.class, metaDataMap);
    }

    public bm_learning_ack_buffer_result() {
    }

    public bm_learning_ack_buffer_result(
      InvalidLearnOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_learning_ack_buffer_result(bm_learning_ack_buffer_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidLearnOperation(other.ouch);
      }
    }

    public bm_learning_ack_buffer_result deepCopy() {
      return new bm_learning_ack_buffer_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidLearnOperation getOuch() {
      return this.ouch;
    }

    public bm_learning_ack_buffer_result setOuch(InvalidLearnOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidLearnOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_learning_ack_buffer_result)
        return this.equals((bm_learning_ack_buffer_result)that);
      return false;
    }

    public boolean equals(bm_learning_ack_buffer_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_learning_ack_buffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_learning_ack_buffer_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_learning_ack_buffer_resultStandardSchemeFactory implements SchemeFactory {
      public bm_learning_ack_buffer_resultStandardScheme getScheme() {
        return new bm_learning_ack_buffer_resultStandardScheme();
      }
    }

    private static class bm_learning_ack_buffer_resultStandardScheme extends StandardScheme<bm_learning_ack_buffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_learning_ack_buffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidLearnOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_learning_ack_buffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_learning_ack_buffer_resultTupleSchemeFactory implements SchemeFactory {
      public bm_learning_ack_buffer_resultTupleScheme getScheme() {
        return new bm_learning_ack_buffer_resultTupleScheme();
      }
    }

    private static class bm_learning_ack_buffer_resultTupleScheme extends TupleScheme<bm_learning_ack_buffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_learning_ack_buffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_learning_ack_buffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidLearnOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_learning_set_timeout_args implements org.apache.thrift.TBase<bm_learning_set_timeout_args, bm_learning_set_timeout_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_learning_set_timeout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_learning_set_timeout_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("list_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_ms", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_learning_set_timeout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_learning_set_timeout_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int list_id; // required
    public int timeout_ms; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      LIST_ID((short)2, "list_id"),
      TIMEOUT_MS((short)3, "timeout_ms");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // LIST_ID
            return LIST_ID;
          case 3: // TIMEOUT_MS
            return TIMEOUT_MS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __LIST_ID_ISSET_ID = 1;
    private static final int __TIMEOUT_MS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIST_ID, new org.apache.thrift.meta_data.FieldMetaData("list_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmLearningListId")));
      tmpMap.put(_Fields.TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("timeout_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_learning_set_timeout_args.class, metaDataMap);
    }

    public bm_learning_set_timeout_args() {
    }

    public bm_learning_set_timeout_args(
      int cxt_id,
      int list_id,
      int timeout_ms)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.list_id = list_id;
      setList_idIsSet(true);
      this.timeout_ms = timeout_ms;
      setTimeout_msIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_learning_set_timeout_args(bm_learning_set_timeout_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.list_id = other.list_id;
      this.timeout_ms = other.timeout_ms;
    }

    public bm_learning_set_timeout_args deepCopy() {
      return new bm_learning_set_timeout_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setList_idIsSet(false);
      this.list_id = 0;
      setTimeout_msIsSet(false);
      this.timeout_ms = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_learning_set_timeout_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getList_id() {
      return this.list_id;
    }

    public bm_learning_set_timeout_args setList_id(int list_id) {
      this.list_id = list_id;
      setList_idIsSet(true);
      return this;
    }

    public void unsetList_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIST_ID_ISSET_ID);
    }

    /** Returns true if field list_id is set (has been assigned a value) and false otherwise */
    public boolean isSetList_id() {
      return EncodingUtils.testBit(__isset_bitfield, __LIST_ID_ISSET_ID);
    }

    public void setList_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIST_ID_ISSET_ID, value);
    }

    public int getTimeout_ms() {
      return this.timeout_ms;
    }

    public bm_learning_set_timeout_args setTimeout_ms(int timeout_ms) {
      this.timeout_ms = timeout_ms;
      setTimeout_msIsSet(true);
      return this;
    }

    public void unsetTimeout_ms() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID);
    }

    /** Returns true if field timeout_ms is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_ms() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID);
    }

    public void setTimeout_msIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_MS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case LIST_ID:
        if (value == null) {
          unsetList_id();
        } else {
          setList_id((Integer)value);
        }
        break;

      case TIMEOUT_MS:
        if (value == null) {
          unsetTimeout_ms();
        } else {
          setTimeout_ms((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case LIST_ID:
        return getList_id();

      case TIMEOUT_MS:
        return getTimeout_ms();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case LIST_ID:
        return isSetList_id();
      case TIMEOUT_MS:
        return isSetTimeout_ms();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_learning_set_timeout_args)
        return this.equals((bm_learning_set_timeout_args)that);
      return false;
    }

    public boolean equals(bm_learning_set_timeout_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_list_id = true;
      boolean that_present_list_id = true;
      if (this_present_list_id || that_present_list_id) {
        if (!(this_present_list_id && that_present_list_id))
          return false;
        if (this.list_id != that.list_id)
          return false;
      }

      boolean this_present_timeout_ms = true;
      boolean that_present_timeout_ms = true;
      if (this_present_timeout_ms || that_present_timeout_ms) {
        if (!(this_present_timeout_ms && that_present_timeout_ms))
          return false;
        if (this.timeout_ms != that.timeout_ms)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_list_id = true;
      list.add(present_list_id);
      if (present_list_id)
        list.add(list_id);

      boolean present_timeout_ms = true;
      list.add(present_timeout_ms);
      if (present_timeout_ms)
        list.add(timeout_ms);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_learning_set_timeout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetList_id()).compareTo(other.isSetList_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetList_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_id, other.list_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_ms()).compareTo(other.isSetTimeout_ms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_ms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_ms, other.timeout_ms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_learning_set_timeout_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("list_id:");
      sb.append(this.list_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_ms:");
      sb.append(this.timeout_ms);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_learning_set_timeout_argsStandardSchemeFactory implements SchemeFactory {
      public bm_learning_set_timeout_argsStandardScheme getScheme() {
        return new bm_learning_set_timeout_argsStandardScheme();
      }
    }

    private static class bm_learning_set_timeout_argsStandardScheme extends StandardScheme<bm_learning_set_timeout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_learning_set_timeout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.list_id = iprot.readI32();
                struct.setList_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMEOUT_MS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeout_ms = iprot.readI32();
                struct.setTimeout_msIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_learning_set_timeout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIST_ID_FIELD_DESC);
        oprot.writeI32(struct.list_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIMEOUT_MS_FIELD_DESC);
        oprot.writeI32(struct.timeout_ms);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_learning_set_timeout_argsTupleSchemeFactory implements SchemeFactory {
      public bm_learning_set_timeout_argsTupleScheme getScheme() {
        return new bm_learning_set_timeout_argsTupleScheme();
      }
    }

    private static class bm_learning_set_timeout_argsTupleScheme extends TupleScheme<bm_learning_set_timeout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_learning_set_timeout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetList_id()) {
          optionals.set(1);
        }
        if (struct.isSetTimeout_ms()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetList_id()) {
          oprot.writeI32(struct.list_id);
        }
        if (struct.isSetTimeout_ms()) {
          oprot.writeI32(struct.timeout_ms);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_learning_set_timeout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.list_id = iprot.readI32();
          struct.setList_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeout_ms = iprot.readI32();
          struct.setTimeout_msIsSet(true);
        }
      }
    }

  }

  public static class bm_learning_set_timeout_result implements org.apache.thrift.TBase<bm_learning_set_timeout_result, bm_learning_set_timeout_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_learning_set_timeout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_learning_set_timeout_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_learning_set_timeout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_learning_set_timeout_resultTupleSchemeFactory());
    }

    public InvalidLearnOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_learning_set_timeout_result.class, metaDataMap);
    }

    public bm_learning_set_timeout_result() {
    }

    public bm_learning_set_timeout_result(
      InvalidLearnOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_learning_set_timeout_result(bm_learning_set_timeout_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidLearnOperation(other.ouch);
      }
    }

    public bm_learning_set_timeout_result deepCopy() {
      return new bm_learning_set_timeout_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidLearnOperation getOuch() {
      return this.ouch;
    }

    public bm_learning_set_timeout_result setOuch(InvalidLearnOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidLearnOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_learning_set_timeout_result)
        return this.equals((bm_learning_set_timeout_result)that);
      return false;
    }

    public boolean equals(bm_learning_set_timeout_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_learning_set_timeout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_learning_set_timeout_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_learning_set_timeout_resultStandardSchemeFactory implements SchemeFactory {
      public bm_learning_set_timeout_resultStandardScheme getScheme() {
        return new bm_learning_set_timeout_resultStandardScheme();
      }
    }

    private static class bm_learning_set_timeout_resultStandardScheme extends StandardScheme<bm_learning_set_timeout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_learning_set_timeout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidLearnOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_learning_set_timeout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_learning_set_timeout_resultTupleSchemeFactory implements SchemeFactory {
      public bm_learning_set_timeout_resultTupleScheme getScheme() {
        return new bm_learning_set_timeout_resultTupleScheme();
      }
    }

    private static class bm_learning_set_timeout_resultTupleScheme extends TupleScheme<bm_learning_set_timeout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_learning_set_timeout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_learning_set_timeout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidLearnOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_learning_set_buffer_size_args implements org.apache.thrift.TBase<bm_learning_set_buffer_size_args, bm_learning_set_buffer_size_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_learning_set_buffer_size_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_learning_set_buffer_size_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("list_id", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NB_SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("nb_samples", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_learning_set_buffer_size_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_learning_set_buffer_size_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int list_id; // required
    public int nb_samples; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      LIST_ID((short)2, "list_id"),
      NB_SAMPLES((short)3, "nb_samples");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // LIST_ID
            return LIST_ID;
          case 3: // NB_SAMPLES
            return NB_SAMPLES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __LIST_ID_ISSET_ID = 1;
    private static final int __NB_SAMPLES_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIST_ID, new org.apache.thrift.meta_data.FieldMetaData("list_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmLearningListId")));
      tmpMap.put(_Fields.NB_SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("nb_samples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_learning_set_buffer_size_args.class, metaDataMap);
    }

    public bm_learning_set_buffer_size_args() {
    }

    public bm_learning_set_buffer_size_args(
      int cxt_id,
      int list_id,
      int nb_samples)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.list_id = list_id;
      setList_idIsSet(true);
      this.nb_samples = nb_samples;
      setNb_samplesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_learning_set_buffer_size_args(bm_learning_set_buffer_size_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.list_id = other.list_id;
      this.nb_samples = other.nb_samples;
    }

    public bm_learning_set_buffer_size_args deepCopy() {
      return new bm_learning_set_buffer_size_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setList_idIsSet(false);
      this.list_id = 0;
      setNb_samplesIsSet(false);
      this.nb_samples = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_learning_set_buffer_size_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getList_id() {
      return this.list_id;
    }

    public bm_learning_set_buffer_size_args setList_id(int list_id) {
      this.list_id = list_id;
      setList_idIsSet(true);
      return this;
    }

    public void unsetList_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIST_ID_ISSET_ID);
    }

    /** Returns true if field list_id is set (has been assigned a value) and false otherwise */
    public boolean isSetList_id() {
      return EncodingUtils.testBit(__isset_bitfield, __LIST_ID_ISSET_ID);
    }

    public void setList_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIST_ID_ISSET_ID, value);
    }

    public int getNb_samples() {
      return this.nb_samples;
    }

    public bm_learning_set_buffer_size_args setNb_samples(int nb_samples) {
      this.nb_samples = nb_samples;
      setNb_samplesIsSet(true);
      return this;
    }

    public void unsetNb_samples() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NB_SAMPLES_ISSET_ID);
    }

    /** Returns true if field nb_samples is set (has been assigned a value) and false otherwise */
    public boolean isSetNb_samples() {
      return EncodingUtils.testBit(__isset_bitfield, __NB_SAMPLES_ISSET_ID);
    }

    public void setNb_samplesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NB_SAMPLES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case LIST_ID:
        if (value == null) {
          unsetList_id();
        } else {
          setList_id((Integer)value);
        }
        break;

      case NB_SAMPLES:
        if (value == null) {
          unsetNb_samples();
        } else {
          setNb_samples((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case LIST_ID:
        return getList_id();

      case NB_SAMPLES:
        return getNb_samples();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case LIST_ID:
        return isSetList_id();
      case NB_SAMPLES:
        return isSetNb_samples();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_learning_set_buffer_size_args)
        return this.equals((bm_learning_set_buffer_size_args)that);
      return false;
    }

    public boolean equals(bm_learning_set_buffer_size_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_list_id = true;
      boolean that_present_list_id = true;
      if (this_present_list_id || that_present_list_id) {
        if (!(this_present_list_id && that_present_list_id))
          return false;
        if (this.list_id != that.list_id)
          return false;
      }

      boolean this_present_nb_samples = true;
      boolean that_present_nb_samples = true;
      if (this_present_nb_samples || that_present_nb_samples) {
        if (!(this_present_nb_samples && that_present_nb_samples))
          return false;
        if (this.nb_samples != that.nb_samples)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_list_id = true;
      list.add(present_list_id);
      if (present_list_id)
        list.add(list_id);

      boolean present_nb_samples = true;
      list.add(present_nb_samples);
      if (present_nb_samples)
        list.add(nb_samples);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_learning_set_buffer_size_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetList_id()).compareTo(other.isSetList_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetList_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_id, other.list_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNb_samples()).compareTo(other.isSetNb_samples());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNb_samples()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nb_samples, other.nb_samples);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_learning_set_buffer_size_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("list_id:");
      sb.append(this.list_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nb_samples:");
      sb.append(this.nb_samples);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_learning_set_buffer_size_argsStandardSchemeFactory implements SchemeFactory {
      public bm_learning_set_buffer_size_argsStandardScheme getScheme() {
        return new bm_learning_set_buffer_size_argsStandardScheme();
      }
    }

    private static class bm_learning_set_buffer_size_argsStandardScheme extends StandardScheme<bm_learning_set_buffer_size_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_learning_set_buffer_size_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.list_id = iprot.readI32();
                struct.setList_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NB_SAMPLES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nb_samples = iprot.readI32();
                struct.setNb_samplesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_learning_set_buffer_size_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIST_ID_FIELD_DESC);
        oprot.writeI32(struct.list_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NB_SAMPLES_FIELD_DESC);
        oprot.writeI32(struct.nb_samples);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_learning_set_buffer_size_argsTupleSchemeFactory implements SchemeFactory {
      public bm_learning_set_buffer_size_argsTupleScheme getScheme() {
        return new bm_learning_set_buffer_size_argsTupleScheme();
      }
    }

    private static class bm_learning_set_buffer_size_argsTupleScheme extends TupleScheme<bm_learning_set_buffer_size_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_learning_set_buffer_size_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetList_id()) {
          optionals.set(1);
        }
        if (struct.isSetNb_samples()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetList_id()) {
          oprot.writeI32(struct.list_id);
        }
        if (struct.isSetNb_samples()) {
          oprot.writeI32(struct.nb_samples);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_learning_set_buffer_size_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.list_id = iprot.readI32();
          struct.setList_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nb_samples = iprot.readI32();
          struct.setNb_samplesIsSet(true);
        }
      }
    }

  }

  public static class bm_learning_set_buffer_size_result implements org.apache.thrift.TBase<bm_learning_set_buffer_size_result, bm_learning_set_buffer_size_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_learning_set_buffer_size_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_learning_set_buffer_size_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_learning_set_buffer_size_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_learning_set_buffer_size_resultTupleSchemeFactory());
    }

    public InvalidLearnOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_learning_set_buffer_size_result.class, metaDataMap);
    }

    public bm_learning_set_buffer_size_result() {
    }

    public bm_learning_set_buffer_size_result(
      InvalidLearnOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_learning_set_buffer_size_result(bm_learning_set_buffer_size_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidLearnOperation(other.ouch);
      }
    }

    public bm_learning_set_buffer_size_result deepCopy() {
      return new bm_learning_set_buffer_size_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidLearnOperation getOuch() {
      return this.ouch;
    }

    public bm_learning_set_buffer_size_result setOuch(InvalidLearnOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidLearnOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_learning_set_buffer_size_result)
        return this.equals((bm_learning_set_buffer_size_result)that);
      return false;
    }

    public boolean equals(bm_learning_set_buffer_size_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_learning_set_buffer_size_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_learning_set_buffer_size_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_learning_set_buffer_size_resultStandardSchemeFactory implements SchemeFactory {
      public bm_learning_set_buffer_size_resultStandardScheme getScheme() {
        return new bm_learning_set_buffer_size_resultStandardScheme();
      }
    }

    private static class bm_learning_set_buffer_size_resultStandardScheme extends StandardScheme<bm_learning_set_buffer_size_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_learning_set_buffer_size_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidLearnOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_learning_set_buffer_size_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_learning_set_buffer_size_resultTupleSchemeFactory implements SchemeFactory {
      public bm_learning_set_buffer_size_resultTupleScheme getScheme() {
        return new bm_learning_set_buffer_size_resultTupleScheme();
      }
    }

    private static class bm_learning_set_buffer_size_resultTupleScheme extends TupleScheme<bm_learning_set_buffer_size_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_learning_set_buffer_size_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_learning_set_buffer_size_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidLearnOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_load_new_config_args implements org.apache.thrift.TBase<bm_load_new_config_args, bm_load_new_config_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_load_new_config_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_load_new_config_args");

    private static final org.apache.thrift.protocol.TField CONFIG_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("config_str", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_load_new_config_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_load_new_config_argsTupleSchemeFactory());
    }

    public String config_str; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_STR((short)1, "config_str");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_STR
            return CONFIG_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_STR, new org.apache.thrift.meta_data.FieldMetaData("config_str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_load_new_config_args.class, metaDataMap);
    }

    public bm_load_new_config_args() {
    }

    public bm_load_new_config_args(
      String config_str)
    {
      this();
      this.config_str = config_str;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_load_new_config_args(bm_load_new_config_args other) {
      if (other.isSetConfig_str()) {
        this.config_str = other.config_str;
      }
    }

    public bm_load_new_config_args deepCopy() {
      return new bm_load_new_config_args(this);
    }

    @Override
    public void clear() {
      this.config_str = null;
    }

    public String getConfig_str() {
      return this.config_str;
    }

    public bm_load_new_config_args setConfig_str(String config_str) {
      this.config_str = config_str;
      return this;
    }

    public void unsetConfig_str() {
      this.config_str = null;
    }

    /** Returns true if field config_str is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig_str() {
      return this.config_str != null;
    }

    public void setConfig_strIsSet(boolean value) {
      if (!value) {
        this.config_str = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_STR:
        if (value == null) {
          unsetConfig_str();
        } else {
          setConfig_str((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_STR:
        return getConfig_str();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_STR:
        return isSetConfig_str();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_load_new_config_args)
        return this.equals((bm_load_new_config_args)that);
      return false;
    }

    public boolean equals(bm_load_new_config_args that) {
      if (that == null)
        return false;

      boolean this_present_config_str = true && this.isSetConfig_str();
      boolean that_present_config_str = true && that.isSetConfig_str();
      if (this_present_config_str || that_present_config_str) {
        if (!(this_present_config_str && that_present_config_str))
          return false;
        if (!this.config_str.equals(that.config_str))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_config_str = true && (isSetConfig_str());
      list.add(present_config_str);
      if (present_config_str)
        list.add(config_str);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_load_new_config_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfig_str()).compareTo(other.isSetConfig_str());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig_str()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config_str, other.config_str);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_load_new_config_args(");
      boolean first = true;

      sb.append("config_str:");
      if (this.config_str == null) {
        sb.append("null");
      } else {
        sb.append(this.config_str);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_load_new_config_argsStandardSchemeFactory implements SchemeFactory {
      public bm_load_new_config_argsStandardScheme getScheme() {
        return new bm_load_new_config_argsStandardScheme();
      }
    }

    private static class bm_load_new_config_argsStandardScheme extends StandardScheme<bm_load_new_config_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_load_new_config_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.config_str = iprot.readString();
                struct.setConfig_strIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_load_new_config_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.config_str != null) {
          oprot.writeFieldBegin(CONFIG_STR_FIELD_DESC);
          oprot.writeString(struct.config_str);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_load_new_config_argsTupleSchemeFactory implements SchemeFactory {
      public bm_load_new_config_argsTupleScheme getScheme() {
        return new bm_load_new_config_argsTupleScheme();
      }
    }

    private static class bm_load_new_config_argsTupleScheme extends TupleScheme<bm_load_new_config_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_load_new_config_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfig_str()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfig_str()) {
          oprot.writeString(struct.config_str);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_load_new_config_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.config_str = iprot.readString();
          struct.setConfig_strIsSet(true);
        }
      }
    }

  }

  public static class bm_load_new_config_result implements org.apache.thrift.TBase<bm_load_new_config_result, bm_load_new_config_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_load_new_config_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_load_new_config_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_load_new_config_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_load_new_config_resultTupleSchemeFactory());
    }

    public InvalidSwapOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_load_new_config_result.class, metaDataMap);
    }

    public bm_load_new_config_result() {
    }

    public bm_load_new_config_result(
      InvalidSwapOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_load_new_config_result(bm_load_new_config_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidSwapOperation(other.ouch);
      }
    }

    public bm_load_new_config_result deepCopy() {
      return new bm_load_new_config_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidSwapOperation getOuch() {
      return this.ouch;
    }

    public bm_load_new_config_result setOuch(InvalidSwapOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidSwapOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_load_new_config_result)
        return this.equals((bm_load_new_config_result)that);
      return false;
    }

    public boolean equals(bm_load_new_config_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_load_new_config_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_load_new_config_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_load_new_config_resultStandardSchemeFactory implements SchemeFactory {
      public bm_load_new_config_resultStandardScheme getScheme() {
        return new bm_load_new_config_resultStandardScheme();
      }
    }

    private static class bm_load_new_config_resultStandardScheme extends StandardScheme<bm_load_new_config_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_load_new_config_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidSwapOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_load_new_config_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_load_new_config_resultTupleSchemeFactory implements SchemeFactory {
      public bm_load_new_config_resultTupleScheme getScheme() {
        return new bm_load_new_config_resultTupleScheme();
      }
    }

    private static class bm_load_new_config_resultTupleScheme extends TupleScheme<bm_load_new_config_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_load_new_config_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_load_new_config_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidSwapOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_swap_configs_args implements org.apache.thrift.TBase<bm_swap_configs_args, bm_swap_configs_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_swap_configs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_swap_configs_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_swap_configs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_swap_configs_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_swap_configs_args.class, metaDataMap);
    }

    public bm_swap_configs_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_swap_configs_args(bm_swap_configs_args other) {
    }

    public bm_swap_configs_args deepCopy() {
      return new bm_swap_configs_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_swap_configs_args)
        return this.equals((bm_swap_configs_args)that);
      return false;
    }

    public boolean equals(bm_swap_configs_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_swap_configs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_swap_configs_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_swap_configs_argsStandardSchemeFactory implements SchemeFactory {
      public bm_swap_configs_argsStandardScheme getScheme() {
        return new bm_swap_configs_argsStandardScheme();
      }
    }

    private static class bm_swap_configs_argsStandardScheme extends StandardScheme<bm_swap_configs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_swap_configs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_swap_configs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_swap_configs_argsTupleSchemeFactory implements SchemeFactory {
      public bm_swap_configs_argsTupleScheme getScheme() {
        return new bm_swap_configs_argsTupleScheme();
      }
    }

    private static class bm_swap_configs_argsTupleScheme extends TupleScheme<bm_swap_configs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_swap_configs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_swap_configs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bm_swap_configs_result implements org.apache.thrift.TBase<bm_swap_configs_result, bm_swap_configs_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_swap_configs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_swap_configs_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_swap_configs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_swap_configs_resultTupleSchemeFactory());
    }

    public InvalidSwapOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_swap_configs_result.class, metaDataMap);
    }

    public bm_swap_configs_result() {
    }

    public bm_swap_configs_result(
      InvalidSwapOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_swap_configs_result(bm_swap_configs_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidSwapOperation(other.ouch);
      }
    }

    public bm_swap_configs_result deepCopy() {
      return new bm_swap_configs_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidSwapOperation getOuch() {
      return this.ouch;
    }

    public bm_swap_configs_result setOuch(InvalidSwapOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidSwapOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_swap_configs_result)
        return this.equals((bm_swap_configs_result)that);
      return false;
    }

    public boolean equals(bm_swap_configs_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_swap_configs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_swap_configs_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_swap_configs_resultStandardSchemeFactory implements SchemeFactory {
      public bm_swap_configs_resultStandardScheme getScheme() {
        return new bm_swap_configs_resultStandardScheme();
      }
    }

    private static class bm_swap_configs_resultStandardScheme extends StandardScheme<bm_swap_configs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_swap_configs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidSwapOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_swap_configs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_swap_configs_resultTupleSchemeFactory implements SchemeFactory {
      public bm_swap_configs_resultTupleScheme getScheme() {
        return new bm_swap_configs_resultTupleScheme();
      }
    }

    private static class bm_swap_configs_resultTupleScheme extends TupleScheme<bm_swap_configs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_swap_configs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_swap_configs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidSwapOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_meter_array_set_rates_args implements org.apache.thrift.TBase<bm_meter_array_set_rates_args, bm_meter_array_set_rates_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_meter_array_set_rates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_meter_array_set_rates_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField METER_ARRAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("meter_array_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("rates", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_meter_array_set_rates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_meter_array_set_rates_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String meter_array_name; // required
    public List<BmMeterRateConfig> rates; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      METER_ARRAY_NAME((short)2, "meter_array_name"),
      RATES((short)3, "rates");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // METER_ARRAY_NAME
            return METER_ARRAY_NAME;
          case 3: // RATES
            return RATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.METER_ARRAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("meter_array_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RATES, new org.apache.thrift.meta_data.FieldMetaData("rates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMeterRateConfig.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_meter_array_set_rates_args.class, metaDataMap);
    }

    public bm_meter_array_set_rates_args() {
    }

    public bm_meter_array_set_rates_args(
      int cxt_id,
      String meter_array_name,
      List<BmMeterRateConfig> rates)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.meter_array_name = meter_array_name;
      this.rates = rates;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_meter_array_set_rates_args(bm_meter_array_set_rates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetMeter_array_name()) {
        this.meter_array_name = other.meter_array_name;
      }
      if (other.isSetRates()) {
        List<BmMeterRateConfig> __this__rates = new ArrayList<BmMeterRateConfig>(other.rates.size());
        for (BmMeterRateConfig other_element : other.rates) {
          __this__rates.add(new BmMeterRateConfig(other_element));
        }
        this.rates = __this__rates;
      }
    }

    public bm_meter_array_set_rates_args deepCopy() {
      return new bm_meter_array_set_rates_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.meter_array_name = null;
      this.rates = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_meter_array_set_rates_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getMeter_array_name() {
      return this.meter_array_name;
    }

    public bm_meter_array_set_rates_args setMeter_array_name(String meter_array_name) {
      this.meter_array_name = meter_array_name;
      return this;
    }

    public void unsetMeter_array_name() {
      this.meter_array_name = null;
    }

    /** Returns true if field meter_array_name is set (has been assigned a value) and false otherwise */
    public boolean isSetMeter_array_name() {
      return this.meter_array_name != null;
    }

    public void setMeter_array_nameIsSet(boolean value) {
      if (!value) {
        this.meter_array_name = null;
      }
    }

    public int getRatesSize() {
      return (this.rates == null) ? 0 : this.rates.size();
    }

    public java.util.Iterator<BmMeterRateConfig> getRatesIterator() {
      return (this.rates == null) ? null : this.rates.iterator();
    }

    public void addToRates(BmMeterRateConfig elem) {
      if (this.rates == null) {
        this.rates = new ArrayList<BmMeterRateConfig>();
      }
      this.rates.add(elem);
    }

    public List<BmMeterRateConfig> getRates() {
      return this.rates;
    }

    public bm_meter_array_set_rates_args setRates(List<BmMeterRateConfig> rates) {
      this.rates = rates;
      return this;
    }

    public void unsetRates() {
      this.rates = null;
    }

    /** Returns true if field rates is set (has been assigned a value) and false otherwise */
    public boolean isSetRates() {
      return this.rates != null;
    }

    public void setRatesIsSet(boolean value) {
      if (!value) {
        this.rates = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case METER_ARRAY_NAME:
        if (value == null) {
          unsetMeter_array_name();
        } else {
          setMeter_array_name((String)value);
        }
        break;

      case RATES:
        if (value == null) {
          unsetRates();
        } else {
          setRates((List<BmMeterRateConfig>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case METER_ARRAY_NAME:
        return getMeter_array_name();

      case RATES:
        return getRates();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case METER_ARRAY_NAME:
        return isSetMeter_array_name();
      case RATES:
        return isSetRates();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_meter_array_set_rates_args)
        return this.equals((bm_meter_array_set_rates_args)that);
      return false;
    }

    public boolean equals(bm_meter_array_set_rates_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_meter_array_name = true && this.isSetMeter_array_name();
      boolean that_present_meter_array_name = true && that.isSetMeter_array_name();
      if (this_present_meter_array_name || that_present_meter_array_name) {
        if (!(this_present_meter_array_name && that_present_meter_array_name))
          return false;
        if (!this.meter_array_name.equals(that.meter_array_name))
          return false;
      }

      boolean this_present_rates = true && this.isSetRates();
      boolean that_present_rates = true && that.isSetRates();
      if (this_present_rates || that_present_rates) {
        if (!(this_present_rates && that_present_rates))
          return false;
        if (!this.rates.equals(that.rates))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_meter_array_name = true && (isSetMeter_array_name());
      list.add(present_meter_array_name);
      if (present_meter_array_name)
        list.add(meter_array_name);

      boolean present_rates = true && (isSetRates());
      list.add(present_rates);
      if (present_rates)
        list.add(rates);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_meter_array_set_rates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMeter_array_name()).compareTo(other.isSetMeter_array_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeter_array_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meter_array_name, other.meter_array_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRates()).compareTo(other.isSetRates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rates, other.rates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_meter_array_set_rates_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("meter_array_name:");
      if (this.meter_array_name == null) {
        sb.append("null");
      } else {
        sb.append(this.meter_array_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rates:");
      if (this.rates == null) {
        sb.append("null");
      } else {
        sb.append(this.rates);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_meter_array_set_rates_argsStandardSchemeFactory implements SchemeFactory {
      public bm_meter_array_set_rates_argsStandardScheme getScheme() {
        return new bm_meter_array_set_rates_argsStandardScheme();
      }
    }

    private static class bm_meter_array_set_rates_argsStandardScheme extends StandardScheme<bm_meter_array_set_rates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_meter_array_set_rates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METER_ARRAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meter_array_name = iprot.readString();
                struct.setMeter_array_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.rates = new ArrayList<BmMeterRateConfig>(_list146.size);
                  BmMeterRateConfig _elem147;
                  for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                  {
                    _elem147 = new BmMeterRateConfig();
                    _elem147.read(iprot);
                    struct.rates.add(_elem147);
                  }
                  iprot.readListEnd();
                }
                struct.setRatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_meter_array_set_rates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.meter_array_name != null) {
          oprot.writeFieldBegin(METER_ARRAY_NAME_FIELD_DESC);
          oprot.writeString(struct.meter_array_name);
          oprot.writeFieldEnd();
        }
        if (struct.rates != null) {
          oprot.writeFieldBegin(RATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rates.size()));
            for (BmMeterRateConfig _iter149 : struct.rates)
            {
              _iter149.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_meter_array_set_rates_argsTupleSchemeFactory implements SchemeFactory {
      public bm_meter_array_set_rates_argsTupleScheme getScheme() {
        return new bm_meter_array_set_rates_argsTupleScheme();
      }
    }

    private static class bm_meter_array_set_rates_argsTupleScheme extends TupleScheme<bm_meter_array_set_rates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_meter_array_set_rates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetMeter_array_name()) {
          optionals.set(1);
        }
        if (struct.isSetRates()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetMeter_array_name()) {
          oprot.writeString(struct.meter_array_name);
        }
        if (struct.isSetRates()) {
          {
            oprot.writeI32(struct.rates.size());
            for (BmMeterRateConfig _iter150 : struct.rates)
            {
              _iter150.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_meter_array_set_rates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.meter_array_name = iprot.readString();
          struct.setMeter_array_nameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.rates = new ArrayList<BmMeterRateConfig>(_list151.size);
            BmMeterRateConfig _elem152;
            for (int _i153 = 0; _i153 < _list151.size; ++_i153)
            {
              _elem152 = new BmMeterRateConfig();
              _elem152.read(iprot);
              struct.rates.add(_elem152);
            }
          }
          struct.setRatesIsSet(true);
        }
      }
    }

  }

  public static class bm_meter_array_set_rates_result implements org.apache.thrift.TBase<bm_meter_array_set_rates_result, bm_meter_array_set_rates_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_meter_array_set_rates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_meter_array_set_rates_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_meter_array_set_rates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_meter_array_set_rates_resultTupleSchemeFactory());
    }

    public InvalidMeterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_meter_array_set_rates_result.class, metaDataMap);
    }

    public bm_meter_array_set_rates_result() {
    }

    public bm_meter_array_set_rates_result(
      InvalidMeterOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_meter_array_set_rates_result(bm_meter_array_set_rates_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidMeterOperation(other.ouch);
      }
    }

    public bm_meter_array_set_rates_result deepCopy() {
      return new bm_meter_array_set_rates_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidMeterOperation getOuch() {
      return this.ouch;
    }

    public bm_meter_array_set_rates_result setOuch(InvalidMeterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMeterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_meter_array_set_rates_result)
        return this.equals((bm_meter_array_set_rates_result)that);
      return false;
    }

    public boolean equals(bm_meter_array_set_rates_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_meter_array_set_rates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_meter_array_set_rates_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_meter_array_set_rates_resultStandardSchemeFactory implements SchemeFactory {
      public bm_meter_array_set_rates_resultStandardScheme getScheme() {
        return new bm_meter_array_set_rates_resultStandardScheme();
      }
    }

    private static class bm_meter_array_set_rates_resultStandardScheme extends StandardScheme<bm_meter_array_set_rates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_meter_array_set_rates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMeterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_meter_array_set_rates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_meter_array_set_rates_resultTupleSchemeFactory implements SchemeFactory {
      public bm_meter_array_set_rates_resultTupleScheme getScheme() {
        return new bm_meter_array_set_rates_resultTupleScheme();
      }
    }

    private static class bm_meter_array_set_rates_resultTupleScheme extends TupleScheme<bm_meter_array_set_rates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_meter_array_set_rates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_meter_array_set_rates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidMeterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_meter_set_rates_args implements org.apache.thrift.TBase<bm_meter_set_rates_args, bm_meter_set_rates_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_meter_set_rates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_meter_set_rates_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField METER_ARRAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("meter_array_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("rates", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_meter_set_rates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_meter_set_rates_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String meter_array_name; // required
    public int index; // required
    public List<BmMeterRateConfig> rates; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      METER_ARRAY_NAME((short)2, "meter_array_name"),
      INDEX((short)3, "index"),
      RATES((short)4, "rates");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // METER_ARRAY_NAME
            return METER_ARRAY_NAME;
          case 3: // INDEX
            return INDEX;
          case 4: // RATES
            return RATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __INDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.METER_ARRAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("meter_array_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RATES, new org.apache.thrift.meta_data.FieldMetaData("rates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMeterRateConfig.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_meter_set_rates_args.class, metaDataMap);
    }

    public bm_meter_set_rates_args() {
    }

    public bm_meter_set_rates_args(
      int cxt_id,
      String meter_array_name,
      int index,
      List<BmMeterRateConfig> rates)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.meter_array_name = meter_array_name;
      this.index = index;
      setIndexIsSet(true);
      this.rates = rates;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_meter_set_rates_args(bm_meter_set_rates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetMeter_array_name()) {
        this.meter_array_name = other.meter_array_name;
      }
      this.index = other.index;
      if (other.isSetRates()) {
        List<BmMeterRateConfig> __this__rates = new ArrayList<BmMeterRateConfig>(other.rates.size());
        for (BmMeterRateConfig other_element : other.rates) {
          __this__rates.add(new BmMeterRateConfig(other_element));
        }
        this.rates = __this__rates;
      }
    }

    public bm_meter_set_rates_args deepCopy() {
      return new bm_meter_set_rates_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.meter_array_name = null;
      setIndexIsSet(false);
      this.index = 0;
      this.rates = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_meter_set_rates_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getMeter_array_name() {
      return this.meter_array_name;
    }

    public bm_meter_set_rates_args setMeter_array_name(String meter_array_name) {
      this.meter_array_name = meter_array_name;
      return this;
    }

    public void unsetMeter_array_name() {
      this.meter_array_name = null;
    }

    /** Returns true if field meter_array_name is set (has been assigned a value) and false otherwise */
    public boolean isSetMeter_array_name() {
      return this.meter_array_name != null;
    }

    public void setMeter_array_nameIsSet(boolean value) {
      if (!value) {
        this.meter_array_name = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public bm_meter_set_rates_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public int getRatesSize() {
      return (this.rates == null) ? 0 : this.rates.size();
    }

    public java.util.Iterator<BmMeterRateConfig> getRatesIterator() {
      return (this.rates == null) ? null : this.rates.iterator();
    }

    public void addToRates(BmMeterRateConfig elem) {
      if (this.rates == null) {
        this.rates = new ArrayList<BmMeterRateConfig>();
      }
      this.rates.add(elem);
    }

    public List<BmMeterRateConfig> getRates() {
      return this.rates;
    }

    public bm_meter_set_rates_args setRates(List<BmMeterRateConfig> rates) {
      this.rates = rates;
      return this;
    }

    public void unsetRates() {
      this.rates = null;
    }

    /** Returns true if field rates is set (has been assigned a value) and false otherwise */
    public boolean isSetRates() {
      return this.rates != null;
    }

    public void setRatesIsSet(boolean value) {
      if (!value) {
        this.rates = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case METER_ARRAY_NAME:
        if (value == null) {
          unsetMeter_array_name();
        } else {
          setMeter_array_name((String)value);
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      case RATES:
        if (value == null) {
          unsetRates();
        } else {
          setRates((List<BmMeterRateConfig>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case METER_ARRAY_NAME:
        return getMeter_array_name();

      case INDEX:
        return getIndex();

      case RATES:
        return getRates();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case METER_ARRAY_NAME:
        return isSetMeter_array_name();
      case INDEX:
        return isSetIndex();
      case RATES:
        return isSetRates();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_meter_set_rates_args)
        return this.equals((bm_meter_set_rates_args)that);
      return false;
    }

    public boolean equals(bm_meter_set_rates_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_meter_array_name = true && this.isSetMeter_array_name();
      boolean that_present_meter_array_name = true && that.isSetMeter_array_name();
      if (this_present_meter_array_name || that_present_meter_array_name) {
        if (!(this_present_meter_array_name && that_present_meter_array_name))
          return false;
        if (!this.meter_array_name.equals(that.meter_array_name))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      boolean this_present_rates = true && this.isSetRates();
      boolean that_present_rates = true && that.isSetRates();
      if (this_present_rates || that_present_rates) {
        if (!(this_present_rates && that_present_rates))
          return false;
        if (!this.rates.equals(that.rates))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_meter_array_name = true && (isSetMeter_array_name());
      list.add(present_meter_array_name);
      if (present_meter_array_name)
        list.add(meter_array_name);

      boolean present_index = true;
      list.add(present_index);
      if (present_index)
        list.add(index);

      boolean present_rates = true && (isSetRates());
      list.add(present_rates);
      if (present_rates)
        list.add(rates);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_meter_set_rates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMeter_array_name()).compareTo(other.isSetMeter_array_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeter_array_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meter_array_name, other.meter_array_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRates()).compareTo(other.isSetRates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rates, other.rates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_meter_set_rates_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("meter_array_name:");
      if (this.meter_array_name == null) {
        sb.append("null");
      } else {
        sb.append(this.meter_array_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rates:");
      if (this.rates == null) {
        sb.append("null");
      } else {
        sb.append(this.rates);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_meter_set_rates_argsStandardSchemeFactory implements SchemeFactory {
      public bm_meter_set_rates_argsStandardScheme getScheme() {
        return new bm_meter_set_rates_argsStandardScheme();
      }
    }

    private static class bm_meter_set_rates_argsStandardScheme extends StandardScheme<bm_meter_set_rates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_meter_set_rates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METER_ARRAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meter_array_name = iprot.readString();
                struct.setMeter_array_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                  struct.rates = new ArrayList<BmMeterRateConfig>(_list154.size);
                  BmMeterRateConfig _elem155;
                  for (int _i156 = 0; _i156 < _list154.size; ++_i156)
                  {
                    _elem155 = new BmMeterRateConfig();
                    _elem155.read(iprot);
                    struct.rates.add(_elem155);
                  }
                  iprot.readListEnd();
                }
                struct.setRatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_meter_set_rates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.meter_array_name != null) {
          oprot.writeFieldBegin(METER_ARRAY_NAME_FIELD_DESC);
          oprot.writeString(struct.meter_array_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        if (struct.rates != null) {
          oprot.writeFieldBegin(RATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rates.size()));
            for (BmMeterRateConfig _iter157 : struct.rates)
            {
              _iter157.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_meter_set_rates_argsTupleSchemeFactory implements SchemeFactory {
      public bm_meter_set_rates_argsTupleScheme getScheme() {
        return new bm_meter_set_rates_argsTupleScheme();
      }
    }

    private static class bm_meter_set_rates_argsTupleScheme extends TupleScheme<bm_meter_set_rates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_meter_set_rates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetMeter_array_name()) {
          optionals.set(1);
        }
        if (struct.isSetIndex()) {
          optionals.set(2);
        }
        if (struct.isSetRates()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetMeter_array_name()) {
          oprot.writeString(struct.meter_array_name);
        }
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
        if (struct.isSetRates()) {
          {
            oprot.writeI32(struct.rates.size());
            for (BmMeterRateConfig _iter158 : struct.rates)
            {
              _iter158.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_meter_set_rates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.meter_array_name = iprot.readString();
          struct.setMeter_array_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.rates = new ArrayList<BmMeterRateConfig>(_list159.size);
            BmMeterRateConfig _elem160;
            for (int _i161 = 0; _i161 < _list159.size; ++_i161)
            {
              _elem160 = new BmMeterRateConfig();
              _elem160.read(iprot);
              struct.rates.add(_elem160);
            }
          }
          struct.setRatesIsSet(true);
        }
      }
    }

  }

  public static class bm_meter_set_rates_result implements org.apache.thrift.TBase<bm_meter_set_rates_result, bm_meter_set_rates_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_meter_set_rates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_meter_set_rates_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_meter_set_rates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_meter_set_rates_resultTupleSchemeFactory());
    }

    public InvalidMeterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_meter_set_rates_result.class, metaDataMap);
    }

    public bm_meter_set_rates_result() {
    }

    public bm_meter_set_rates_result(
      InvalidMeterOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_meter_set_rates_result(bm_meter_set_rates_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidMeterOperation(other.ouch);
      }
    }

    public bm_meter_set_rates_result deepCopy() {
      return new bm_meter_set_rates_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidMeterOperation getOuch() {
      return this.ouch;
    }

    public bm_meter_set_rates_result setOuch(InvalidMeterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMeterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_meter_set_rates_result)
        return this.equals((bm_meter_set_rates_result)that);
      return false;
    }

    public boolean equals(bm_meter_set_rates_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_meter_set_rates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_meter_set_rates_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_meter_set_rates_resultStandardSchemeFactory implements SchemeFactory {
      public bm_meter_set_rates_resultStandardScheme getScheme() {
        return new bm_meter_set_rates_resultStandardScheme();
      }
    }

    private static class bm_meter_set_rates_resultStandardScheme extends StandardScheme<bm_meter_set_rates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_meter_set_rates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMeterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_meter_set_rates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_meter_set_rates_resultTupleSchemeFactory implements SchemeFactory {
      public bm_meter_set_rates_resultTupleScheme getScheme() {
        return new bm_meter_set_rates_resultTupleScheme();
      }
    }

    private static class bm_meter_set_rates_resultTupleScheme extends TupleScheme<bm_meter_set_rates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_meter_set_rates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_meter_set_rates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidMeterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_register_read_args implements org.apache.thrift.TBase<bm_register_read_args, bm_register_read_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_register_read_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_register_read_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTER_ARRAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("register_array_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("idx", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_register_read_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_register_read_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String register_array_name; // required
    public int idx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      REGISTER_ARRAY_NAME((short)2, "register_array_name"),
      IDX((short)3, "idx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // REGISTER_ARRAY_NAME
            return REGISTER_ARRAY_NAME;
          case 3: // IDX
            return IDX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __IDX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGISTER_ARRAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("register_array_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IDX, new org.apache.thrift.meta_data.FieldMetaData("idx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_register_read_args.class, metaDataMap);
    }

    public bm_register_read_args() {
    }

    public bm_register_read_args(
      int cxt_id,
      String register_array_name,
      int idx)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.register_array_name = register_array_name;
      this.idx = idx;
      setIdxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_register_read_args(bm_register_read_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetRegister_array_name()) {
        this.register_array_name = other.register_array_name;
      }
      this.idx = other.idx;
    }

    public bm_register_read_args deepCopy() {
      return new bm_register_read_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.register_array_name = null;
      setIdxIsSet(false);
      this.idx = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_register_read_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getRegister_array_name() {
      return this.register_array_name;
    }

    public bm_register_read_args setRegister_array_name(String register_array_name) {
      this.register_array_name = register_array_name;
      return this;
    }

    public void unsetRegister_array_name() {
      this.register_array_name = null;
    }

    /** Returns true if field register_array_name is set (has been assigned a value) and false otherwise */
    public boolean isSetRegister_array_name() {
      return this.register_array_name != null;
    }

    public void setRegister_array_nameIsSet(boolean value) {
      if (!value) {
        this.register_array_name = null;
      }
    }

    public int getIdx() {
      return this.idx;
    }

    public bm_register_read_args setIdx(int idx) {
      this.idx = idx;
      setIdxIsSet(true);
      return this;
    }

    public void unsetIdx() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDX_ISSET_ID);
    }

    /** Returns true if field idx is set (has been assigned a value) and false otherwise */
    public boolean isSetIdx() {
      return EncodingUtils.testBit(__isset_bitfield, __IDX_ISSET_ID);
    }

    public void setIdxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case REGISTER_ARRAY_NAME:
        if (value == null) {
          unsetRegister_array_name();
        } else {
          setRegister_array_name((String)value);
        }
        break;

      case IDX:
        if (value == null) {
          unsetIdx();
        } else {
          setIdx((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case REGISTER_ARRAY_NAME:
        return getRegister_array_name();

      case IDX:
        return getIdx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case REGISTER_ARRAY_NAME:
        return isSetRegister_array_name();
      case IDX:
        return isSetIdx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_register_read_args)
        return this.equals((bm_register_read_args)that);
      return false;
    }

    public boolean equals(bm_register_read_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_register_array_name = true && this.isSetRegister_array_name();
      boolean that_present_register_array_name = true && that.isSetRegister_array_name();
      if (this_present_register_array_name || that_present_register_array_name) {
        if (!(this_present_register_array_name && that_present_register_array_name))
          return false;
        if (!this.register_array_name.equals(that.register_array_name))
          return false;
      }

      boolean this_present_idx = true;
      boolean that_present_idx = true;
      if (this_present_idx || that_present_idx) {
        if (!(this_present_idx && that_present_idx))
          return false;
        if (this.idx != that.idx)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_register_array_name = true && (isSetRegister_array_name());
      list.add(present_register_array_name);
      if (present_register_array_name)
        list.add(register_array_name);

      boolean present_idx = true;
      list.add(present_idx);
      if (present_idx)
        list.add(idx);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_register_read_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegister_array_name()).compareTo(other.isSetRegister_array_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegister_array_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.register_array_name, other.register_array_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdx()).compareTo(other.isSetIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idx, other.idx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_register_read_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("register_array_name:");
      if (this.register_array_name == null) {
        sb.append("null");
      } else {
        sb.append(this.register_array_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idx:");
      sb.append(this.idx);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_register_read_argsStandardSchemeFactory implements SchemeFactory {
      public bm_register_read_argsStandardScheme getScheme() {
        return new bm_register_read_argsStandardScheme();
      }
    }

    private static class bm_register_read_argsStandardScheme extends StandardScheme<bm_register_read_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_register_read_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTER_ARRAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.register_array_name = iprot.readString();
                struct.setRegister_array_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idx = iprot.readI32();
                struct.setIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_register_read_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.register_array_name != null) {
          oprot.writeFieldBegin(REGISTER_ARRAY_NAME_FIELD_DESC);
          oprot.writeString(struct.register_array_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IDX_FIELD_DESC);
        oprot.writeI32(struct.idx);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_register_read_argsTupleSchemeFactory implements SchemeFactory {
      public bm_register_read_argsTupleScheme getScheme() {
        return new bm_register_read_argsTupleScheme();
      }
    }

    private static class bm_register_read_argsTupleScheme extends TupleScheme<bm_register_read_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_register_read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetRegister_array_name()) {
          optionals.set(1);
        }
        if (struct.isSetIdx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetRegister_array_name()) {
          oprot.writeString(struct.register_array_name);
        }
        if (struct.isSetIdx()) {
          oprot.writeI32(struct.idx);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_register_read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.register_array_name = iprot.readString();
          struct.setRegister_array_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.idx = iprot.readI32();
          struct.setIdxIsSet(true);
        }
      }
    }

  }

  public static class bm_register_read_result implements org.apache.thrift.TBase<bm_register_read_result, bm_register_read_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_register_read_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_register_read_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_register_read_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_register_read_resultTupleSchemeFactory());
    }

    public long success; // required
    public InvalidRegisterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmRegisterValue")));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_register_read_result.class, metaDataMap);
    }

    public bm_register_read_result() {
    }

    public bm_register_read_result(
      long success,
      InvalidRegisterOperation ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_register_read_result(bm_register_read_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new InvalidRegisterOperation(other.ouch);
      }
    }

    public bm_register_read_result deepCopy() {
      return new bm_register_read_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public bm_register_read_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidRegisterOperation getOuch() {
      return this.ouch;
    }

    public bm_register_read_result setOuch(InvalidRegisterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidRegisterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_register_read_result)
        return this.equals((bm_register_read_result)that);
      return false;
    }

    public boolean equals(bm_register_read_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_register_read_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_register_read_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_register_read_resultStandardSchemeFactory implements SchemeFactory {
      public bm_register_read_resultStandardScheme getScheme() {
        return new bm_register_read_resultStandardScheme();
      }
    }

    private static class bm_register_read_resultStandardScheme extends StandardScheme<bm_register_read_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_register_read_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidRegisterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_register_read_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_register_read_resultTupleSchemeFactory implements SchemeFactory {
      public bm_register_read_resultTupleScheme getScheme() {
        return new bm_register_read_resultTupleScheme();
      }
    }

    private static class bm_register_read_resultTupleScheme extends TupleScheme<bm_register_read_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_register_read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_register_read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidRegisterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_register_write_args implements org.apache.thrift.TBase<bm_register_write_args, bm_register_write_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_register_write_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_register_write_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTER_ARRAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("register_array_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_register_write_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_register_write_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String register_array_name; // required
    public int index; // required
    public long value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      REGISTER_ARRAY_NAME((short)2, "register_array_name"),
      INDEX((short)3, "index"),
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // REGISTER_ARRAY_NAME
            return REGISTER_ARRAY_NAME;
          case 3: // INDEX
            return INDEX;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __INDEX_ISSET_ID = 1;
    private static final int __VALUE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGISTER_ARRAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("register_array_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmRegisterValue")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_register_write_args.class, metaDataMap);
    }

    public bm_register_write_args() {
    }

    public bm_register_write_args(
      int cxt_id,
      String register_array_name,
      int index,
      long value)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.register_array_name = register_array_name;
      this.index = index;
      setIndexIsSet(true);
      this.value = value;
      setValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_register_write_args(bm_register_write_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetRegister_array_name()) {
        this.register_array_name = other.register_array_name;
      }
      this.index = other.index;
      this.value = other.value;
    }

    public bm_register_write_args deepCopy() {
      return new bm_register_write_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.register_array_name = null;
      setIndexIsSet(false);
      this.index = 0;
      setValueIsSet(false);
      this.value = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_register_write_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getRegister_array_name() {
      return this.register_array_name;
    }

    public bm_register_write_args setRegister_array_name(String register_array_name) {
      this.register_array_name = register_array_name;
      return this;
    }

    public void unsetRegister_array_name() {
      this.register_array_name = null;
    }

    /** Returns true if field register_array_name is set (has been assigned a value) and false otherwise */
    public boolean isSetRegister_array_name() {
      return this.register_array_name != null;
    }

    public void setRegister_array_nameIsSet(boolean value) {
      if (!value) {
        this.register_array_name = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public bm_register_write_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public long getValue() {
      return this.value;
    }

    public bm_register_write_args setValue(long value) {
      this.value = value;
      setValueIsSet(true);
      return this;
    }

    public void unsetValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    public void setValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case REGISTER_ARRAY_NAME:
        if (value == null) {
          unsetRegister_array_name();
        } else {
          setRegister_array_name((String)value);
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case REGISTER_ARRAY_NAME:
        return getRegister_array_name();

      case INDEX:
        return getIndex();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case REGISTER_ARRAY_NAME:
        return isSetRegister_array_name();
      case INDEX:
        return isSetIndex();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_register_write_args)
        return this.equals((bm_register_write_args)that);
      return false;
    }

    public boolean equals(bm_register_write_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_register_array_name = true && this.isSetRegister_array_name();
      boolean that_present_register_array_name = true && that.isSetRegister_array_name();
      if (this_present_register_array_name || that_present_register_array_name) {
        if (!(this_present_register_array_name && that_present_register_array_name))
          return false;
        if (!this.register_array_name.equals(that.register_array_name))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      boolean this_present_value = true;
      boolean that_present_value = true;
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (this.value != that.value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_register_array_name = true && (isSetRegister_array_name());
      list.add(present_register_array_name);
      if (present_register_array_name)
        list.add(register_array_name);

      boolean present_index = true;
      list.add(present_index);
      if (present_index)
        list.add(index);

      boolean present_value = true;
      list.add(present_value);
      if (present_value)
        list.add(value);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_register_write_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegister_array_name()).compareTo(other.isSetRegister_array_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegister_array_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.register_array_name, other.register_array_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_register_write_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("register_array_name:");
      if (this.register_array_name == null) {
        sb.append("null");
      } else {
        sb.append(this.register_array_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_register_write_argsStandardSchemeFactory implements SchemeFactory {
      public bm_register_write_argsStandardScheme getScheme() {
        return new bm_register_write_argsStandardScheme();
      }
    }

    private static class bm_register_write_argsStandardScheme extends StandardScheme<bm_register_write_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_register_write_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTER_ARRAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.register_array_name = iprot.readString();
                struct.setRegister_array_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.value = iprot.readI64();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_register_write_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.register_array_name != null) {
          oprot.writeFieldBegin(REGISTER_ARRAY_NAME_FIELD_DESC);
          oprot.writeString(struct.register_array_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeI64(struct.value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_register_write_argsTupleSchemeFactory implements SchemeFactory {
      public bm_register_write_argsTupleScheme getScheme() {
        return new bm_register_write_argsTupleScheme();
      }
    }

    private static class bm_register_write_argsTupleScheme extends TupleScheme<bm_register_write_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_register_write_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetRegister_array_name()) {
          optionals.set(1);
        }
        if (struct.isSetIndex()) {
          optionals.set(2);
        }
        if (struct.isSetValue()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetRegister_array_name()) {
          oprot.writeString(struct.register_array_name);
        }
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
        if (struct.isSetValue()) {
          oprot.writeI64(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_register_write_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.register_array_name = iprot.readString();
          struct.setRegister_array_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.value = iprot.readI64();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class bm_register_write_result implements org.apache.thrift.TBase<bm_register_write_result, bm_register_write_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_register_write_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_register_write_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_register_write_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_register_write_resultTupleSchemeFactory());
    }

    public InvalidRegisterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_register_write_result.class, metaDataMap);
    }

    public bm_register_write_result() {
    }

    public bm_register_write_result(
      InvalidRegisterOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_register_write_result(bm_register_write_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidRegisterOperation(other.ouch);
      }
    }

    public bm_register_write_result deepCopy() {
      return new bm_register_write_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidRegisterOperation getOuch() {
      return this.ouch;
    }

    public bm_register_write_result setOuch(InvalidRegisterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidRegisterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_register_write_result)
        return this.equals((bm_register_write_result)that);
      return false;
    }

    public boolean equals(bm_register_write_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_register_write_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_register_write_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_register_write_resultStandardSchemeFactory implements SchemeFactory {
      public bm_register_write_resultStandardScheme getScheme() {
        return new bm_register_write_resultStandardScheme();
      }
    }

    private static class bm_register_write_resultStandardScheme extends StandardScheme<bm_register_write_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_register_write_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidRegisterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_register_write_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_register_write_resultTupleSchemeFactory implements SchemeFactory {
      public bm_register_write_resultTupleScheme getScheme() {
        return new bm_register_write_resultTupleScheme();
      }
    }

    private static class bm_register_write_resultTupleScheme extends TupleScheme<bm_register_write_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_register_write_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_register_write_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidRegisterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_register_write_range_args implements org.apache.thrift.TBase<bm_register_write_range_args, bm_register_write_range_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_register_write_range_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_register_write_range_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTER_ARRAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("register_array_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("start_index", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField END_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("end_index", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_register_write_range_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_register_write_range_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String register_array_name; // required
    public int start_index; // required
    public int end_index; // required
    public long value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      REGISTER_ARRAY_NAME((short)2, "register_array_name"),
      START_INDEX((short)3, "start_index"),
      END_INDEX((short)4, "end_index"),
      VALUE((short)5, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // REGISTER_ARRAY_NAME
            return REGISTER_ARRAY_NAME;
          case 3: // START_INDEX
            return START_INDEX;
          case 4: // END_INDEX
            return END_INDEX;
          case 5: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __START_INDEX_ISSET_ID = 1;
    private static final int __END_INDEX_ISSET_ID = 2;
    private static final int __VALUE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGISTER_ARRAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("register_array_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("start_index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_INDEX, new org.apache.thrift.meta_data.FieldMetaData("end_index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "BmRegisterValue")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_register_write_range_args.class, metaDataMap);
    }

    public bm_register_write_range_args() {
    }

    public bm_register_write_range_args(
      int cxt_id,
      String register_array_name,
      int start_index,
      int end_index,
      long value)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.register_array_name = register_array_name;
      this.start_index = start_index;
      setStart_indexIsSet(true);
      this.end_index = end_index;
      setEnd_indexIsSet(true);
      this.value = value;
      setValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_register_write_range_args(bm_register_write_range_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetRegister_array_name()) {
        this.register_array_name = other.register_array_name;
      }
      this.start_index = other.start_index;
      this.end_index = other.end_index;
      this.value = other.value;
    }

    public bm_register_write_range_args deepCopy() {
      return new bm_register_write_range_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.register_array_name = null;
      setStart_indexIsSet(false);
      this.start_index = 0;
      setEnd_indexIsSet(false);
      this.end_index = 0;
      setValueIsSet(false);
      this.value = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_register_write_range_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getRegister_array_name() {
      return this.register_array_name;
    }

    public bm_register_write_range_args setRegister_array_name(String register_array_name) {
      this.register_array_name = register_array_name;
      return this;
    }

    public void unsetRegister_array_name() {
      this.register_array_name = null;
    }

    /** Returns true if field register_array_name is set (has been assigned a value) and false otherwise */
    public boolean isSetRegister_array_name() {
      return this.register_array_name != null;
    }

    public void setRegister_array_nameIsSet(boolean value) {
      if (!value) {
        this.register_array_name = null;
      }
    }

    public int getStart_index() {
      return this.start_index;
    }

    public bm_register_write_range_args setStart_index(int start_index) {
      this.start_index = start_index;
      setStart_indexIsSet(true);
      return this;
    }

    public void unsetStart_index() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_INDEX_ISSET_ID);
    }

    /** Returns true if field start_index is set (has been assigned a value) and false otherwise */
    public boolean isSetStart_index() {
      return EncodingUtils.testBit(__isset_bitfield, __START_INDEX_ISSET_ID);
    }

    public void setStart_indexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_INDEX_ISSET_ID, value);
    }

    public int getEnd_index() {
      return this.end_index;
    }

    public bm_register_write_range_args setEnd_index(int end_index) {
      this.end_index = end_index;
      setEnd_indexIsSet(true);
      return this;
    }

    public void unsetEnd_index() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __END_INDEX_ISSET_ID);
    }

    /** Returns true if field end_index is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_index() {
      return EncodingUtils.testBit(__isset_bitfield, __END_INDEX_ISSET_ID);
    }

    public void setEnd_indexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __END_INDEX_ISSET_ID, value);
    }

    public long getValue() {
      return this.value;
    }

    public bm_register_write_range_args setValue(long value) {
      this.value = value;
      setValueIsSet(true);
      return this;
    }

    public void unsetValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    public void setValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case REGISTER_ARRAY_NAME:
        if (value == null) {
          unsetRegister_array_name();
        } else {
          setRegister_array_name((String)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStart_index();
        } else {
          setStart_index((Integer)value);
        }
        break;

      case END_INDEX:
        if (value == null) {
          unsetEnd_index();
        } else {
          setEnd_index((Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case REGISTER_ARRAY_NAME:
        return getRegister_array_name();

      case START_INDEX:
        return getStart_index();

      case END_INDEX:
        return getEnd_index();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case REGISTER_ARRAY_NAME:
        return isSetRegister_array_name();
      case START_INDEX:
        return isSetStart_index();
      case END_INDEX:
        return isSetEnd_index();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_register_write_range_args)
        return this.equals((bm_register_write_range_args)that);
      return false;
    }

    public boolean equals(bm_register_write_range_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_register_array_name = true && this.isSetRegister_array_name();
      boolean that_present_register_array_name = true && that.isSetRegister_array_name();
      if (this_present_register_array_name || that_present_register_array_name) {
        if (!(this_present_register_array_name && that_present_register_array_name))
          return false;
        if (!this.register_array_name.equals(that.register_array_name))
          return false;
      }

      boolean this_present_start_index = true;
      boolean that_present_start_index = true;
      if (this_present_start_index || that_present_start_index) {
        if (!(this_present_start_index && that_present_start_index))
          return false;
        if (this.start_index != that.start_index)
          return false;
      }

      boolean this_present_end_index = true;
      boolean that_present_end_index = true;
      if (this_present_end_index || that_present_end_index) {
        if (!(this_present_end_index && that_present_end_index))
          return false;
        if (this.end_index != that.end_index)
          return false;
      }

      boolean this_present_value = true;
      boolean that_present_value = true;
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (this.value != that.value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_register_array_name = true && (isSetRegister_array_name());
      list.add(present_register_array_name);
      if (present_register_array_name)
        list.add(register_array_name);

      boolean present_start_index = true;
      list.add(present_start_index);
      if (present_start_index)
        list.add(start_index);

      boolean present_end_index = true;
      list.add(present_end_index);
      if (present_end_index)
        list.add(end_index);

      boolean present_value = true;
      list.add(present_value);
      if (present_value)
        list.add(value);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_register_write_range_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegister_array_name()).compareTo(other.isSetRegister_array_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegister_array_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.register_array_name, other.register_array_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart_index()).compareTo(other.isSetStart_index());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart_index()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_index, other.start_index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnd_index()).compareTo(other.isSetEnd_index());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_index()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_index, other.end_index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_register_write_range_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("register_array_name:");
      if (this.register_array_name == null) {
        sb.append("null");
      } else {
        sb.append(this.register_array_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start_index:");
      sb.append(this.start_index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_index:");
      sb.append(this.end_index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_register_write_range_argsStandardSchemeFactory implements SchemeFactory {
      public bm_register_write_range_argsStandardScheme getScheme() {
        return new bm_register_write_range_argsStandardScheme();
      }
    }

    private static class bm_register_write_range_argsStandardScheme extends StandardScheme<bm_register_write_range_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_register_write_range_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTER_ARRAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.register_array_name = iprot.readString();
                struct.setRegister_array_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start_index = iprot.readI32();
                struct.setStart_indexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.end_index = iprot.readI32();
                struct.setEnd_indexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.value = iprot.readI64();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_register_write_range_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.register_array_name != null) {
          oprot.writeFieldBegin(REGISTER_ARRAY_NAME_FIELD_DESC);
          oprot.writeString(struct.register_array_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.start_index);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_INDEX_FIELD_DESC);
        oprot.writeI32(struct.end_index);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeI64(struct.value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_register_write_range_argsTupleSchemeFactory implements SchemeFactory {
      public bm_register_write_range_argsTupleScheme getScheme() {
        return new bm_register_write_range_argsTupleScheme();
      }
    }

    private static class bm_register_write_range_argsTupleScheme extends TupleScheme<bm_register_write_range_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_register_write_range_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetRegister_array_name()) {
          optionals.set(1);
        }
        if (struct.isSetStart_index()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_index()) {
          optionals.set(3);
        }
        if (struct.isSetValue()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetRegister_array_name()) {
          oprot.writeString(struct.register_array_name);
        }
        if (struct.isSetStart_index()) {
          oprot.writeI32(struct.start_index);
        }
        if (struct.isSetEnd_index()) {
          oprot.writeI32(struct.end_index);
        }
        if (struct.isSetValue()) {
          oprot.writeI64(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_register_write_range_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.register_array_name = iprot.readString();
          struct.setRegister_array_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start_index = iprot.readI32();
          struct.setStart_indexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_index = iprot.readI32();
          struct.setEnd_indexIsSet(true);
        }
        if (incoming.get(4)) {
          struct.value = iprot.readI64();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class bm_register_write_range_result implements org.apache.thrift.TBase<bm_register_write_range_result, bm_register_write_range_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_register_write_range_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_register_write_range_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_register_write_range_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_register_write_range_resultTupleSchemeFactory());
    }

    public InvalidRegisterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_register_write_range_result.class, metaDataMap);
    }

    public bm_register_write_range_result() {
    }

    public bm_register_write_range_result(
      InvalidRegisterOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_register_write_range_result(bm_register_write_range_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidRegisterOperation(other.ouch);
      }
    }

    public bm_register_write_range_result deepCopy() {
      return new bm_register_write_range_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidRegisterOperation getOuch() {
      return this.ouch;
    }

    public bm_register_write_range_result setOuch(InvalidRegisterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidRegisterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_register_write_range_result)
        return this.equals((bm_register_write_range_result)that);
      return false;
    }

    public boolean equals(bm_register_write_range_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_register_write_range_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_register_write_range_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_register_write_range_resultStandardSchemeFactory implements SchemeFactory {
      public bm_register_write_range_resultStandardScheme getScheme() {
        return new bm_register_write_range_resultStandardScheme();
      }
    }

    private static class bm_register_write_range_resultStandardScheme extends StandardScheme<bm_register_write_range_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_register_write_range_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidRegisterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_register_write_range_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_register_write_range_resultTupleSchemeFactory implements SchemeFactory {
      public bm_register_write_range_resultTupleScheme getScheme() {
        return new bm_register_write_range_resultTupleScheme();
      }
    }

    private static class bm_register_write_range_resultTupleScheme extends TupleScheme<bm_register_write_range_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_register_write_range_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_register_write_range_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidRegisterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_register_reset_args implements org.apache.thrift.TBase<bm_register_reset_args, bm_register_reset_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_register_reset_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_register_reset_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTER_ARRAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("register_array_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_register_reset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_register_reset_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String register_array_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      REGISTER_ARRAY_NAME((short)2, "register_array_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // REGISTER_ARRAY_NAME
            return REGISTER_ARRAY_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGISTER_ARRAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("register_array_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_register_reset_args.class, metaDataMap);
    }

    public bm_register_reset_args() {
    }

    public bm_register_reset_args(
      int cxt_id,
      String register_array_name)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.register_array_name = register_array_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_register_reset_args(bm_register_reset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetRegister_array_name()) {
        this.register_array_name = other.register_array_name;
      }
    }

    public bm_register_reset_args deepCopy() {
      return new bm_register_reset_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.register_array_name = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_register_reset_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getRegister_array_name() {
      return this.register_array_name;
    }

    public bm_register_reset_args setRegister_array_name(String register_array_name) {
      this.register_array_name = register_array_name;
      return this;
    }

    public void unsetRegister_array_name() {
      this.register_array_name = null;
    }

    /** Returns true if field register_array_name is set (has been assigned a value) and false otherwise */
    public boolean isSetRegister_array_name() {
      return this.register_array_name != null;
    }

    public void setRegister_array_nameIsSet(boolean value) {
      if (!value) {
        this.register_array_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case REGISTER_ARRAY_NAME:
        if (value == null) {
          unsetRegister_array_name();
        } else {
          setRegister_array_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case REGISTER_ARRAY_NAME:
        return getRegister_array_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case REGISTER_ARRAY_NAME:
        return isSetRegister_array_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_register_reset_args)
        return this.equals((bm_register_reset_args)that);
      return false;
    }

    public boolean equals(bm_register_reset_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_register_array_name = true && this.isSetRegister_array_name();
      boolean that_present_register_array_name = true && that.isSetRegister_array_name();
      if (this_present_register_array_name || that_present_register_array_name) {
        if (!(this_present_register_array_name && that_present_register_array_name))
          return false;
        if (!this.register_array_name.equals(that.register_array_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_register_array_name = true && (isSetRegister_array_name());
      list.add(present_register_array_name);
      if (present_register_array_name)
        list.add(register_array_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_register_reset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegister_array_name()).compareTo(other.isSetRegister_array_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegister_array_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.register_array_name, other.register_array_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_register_reset_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("register_array_name:");
      if (this.register_array_name == null) {
        sb.append("null");
      } else {
        sb.append(this.register_array_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_register_reset_argsStandardSchemeFactory implements SchemeFactory {
      public bm_register_reset_argsStandardScheme getScheme() {
        return new bm_register_reset_argsStandardScheme();
      }
    }

    private static class bm_register_reset_argsStandardScheme extends StandardScheme<bm_register_reset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_register_reset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTER_ARRAY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.register_array_name = iprot.readString();
                struct.setRegister_array_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_register_reset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.register_array_name != null) {
          oprot.writeFieldBegin(REGISTER_ARRAY_NAME_FIELD_DESC);
          oprot.writeString(struct.register_array_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_register_reset_argsTupleSchemeFactory implements SchemeFactory {
      public bm_register_reset_argsTupleScheme getScheme() {
        return new bm_register_reset_argsTupleScheme();
      }
    }

    private static class bm_register_reset_argsTupleScheme extends TupleScheme<bm_register_reset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_register_reset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetRegister_array_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetRegister_array_name()) {
          oprot.writeString(struct.register_array_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_register_reset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.register_array_name = iprot.readString();
          struct.setRegister_array_nameIsSet(true);
        }
      }
    }

  }

  public static class bm_register_reset_result implements org.apache.thrift.TBase<bm_register_reset_result, bm_register_reset_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_register_reset_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_register_reset_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_register_reset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_register_reset_resultTupleSchemeFactory());
    }

    public InvalidRegisterOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_register_reset_result.class, metaDataMap);
    }

    public bm_register_reset_result() {
    }

    public bm_register_reset_result(
      InvalidRegisterOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_register_reset_result(bm_register_reset_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidRegisterOperation(other.ouch);
      }
    }

    public bm_register_reset_result deepCopy() {
      return new bm_register_reset_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidRegisterOperation getOuch() {
      return this.ouch;
    }

    public bm_register_reset_result setOuch(InvalidRegisterOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidRegisterOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_register_reset_result)
        return this.equals((bm_register_reset_result)that);
      return false;
    }

    public boolean equals(bm_register_reset_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_register_reset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_register_reset_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_register_reset_resultStandardSchemeFactory implements SchemeFactory {
      public bm_register_reset_resultStandardScheme getScheme() {
        return new bm_register_reset_resultStandardScheme();
      }
    }

    private static class bm_register_reset_resultStandardScheme extends StandardScheme<bm_register_reset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_register_reset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidRegisterOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_register_reset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_register_reset_resultTupleSchemeFactory implements SchemeFactory {
      public bm_register_reset_resultTupleScheme getScheme() {
        return new bm_register_reset_resultTupleScheme();
      }
    }

    private static class bm_register_reset_resultTupleScheme extends TupleScheme<bm_register_reset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_register_reset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_register_reset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidRegisterOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_dev_mgr_add_port_args implements org.apache.thrift.TBase<bm_dev_mgr_add_port_args, bm_dev_mgr_add_port_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_dev_mgr_add_port_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_dev_mgr_add_port_args");

    private static final org.apache.thrift.protocol.TField IFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("iface_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("port_num", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PCAP_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("pcap_path", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_dev_mgr_add_port_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_dev_mgr_add_port_argsTupleSchemeFactory());
    }

    public String iface_name; // required
    public int port_num; // required
    public String pcap_path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IFACE_NAME((short)1, "iface_name"),
      PORT_NUM((short)2, "port_num"),
      PCAP_PATH((short)3, "pcap_path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IFACE_NAME
            return IFACE_NAME;
          case 2: // PORT_NUM
            return PORT_NUM;
          case 3: // PCAP_PATH
            return PCAP_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("iface_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT_NUM, new org.apache.thrift.meta_data.FieldMetaData("port_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PCAP_PATH, new org.apache.thrift.meta_data.FieldMetaData("pcap_path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_dev_mgr_add_port_args.class, metaDataMap);
    }

    public bm_dev_mgr_add_port_args() {
    }

    public bm_dev_mgr_add_port_args(
      String iface_name,
      int port_num,
      String pcap_path)
    {
      this();
      this.iface_name = iface_name;
      this.port_num = port_num;
      setPort_numIsSet(true);
      this.pcap_path = pcap_path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_dev_mgr_add_port_args(bm_dev_mgr_add_port_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIface_name()) {
        this.iface_name = other.iface_name;
      }
      this.port_num = other.port_num;
      if (other.isSetPcap_path()) {
        this.pcap_path = other.pcap_path;
      }
    }

    public bm_dev_mgr_add_port_args deepCopy() {
      return new bm_dev_mgr_add_port_args(this);
    }

    @Override
    public void clear() {
      this.iface_name = null;
      setPort_numIsSet(false);
      this.port_num = 0;
      this.pcap_path = null;
    }

    public String getIface_name() {
      return this.iface_name;
    }

    public bm_dev_mgr_add_port_args setIface_name(String iface_name) {
      this.iface_name = iface_name;
      return this;
    }

    public void unsetIface_name() {
      this.iface_name = null;
    }

    /** Returns true if field iface_name is set (has been assigned a value) and false otherwise */
    public boolean isSetIface_name() {
      return this.iface_name != null;
    }

    public void setIface_nameIsSet(boolean value) {
      if (!value) {
        this.iface_name = null;
      }
    }

    public int getPort_num() {
      return this.port_num;
    }

    public bm_dev_mgr_add_port_args setPort_num(int port_num) {
      this.port_num = port_num;
      setPort_numIsSet(true);
      return this;
    }

    public void unsetPort_num() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_NUM_ISSET_ID);
    }

    /** Returns true if field port_num is set (has been assigned a value) and false otherwise */
    public boolean isSetPort_num() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_NUM_ISSET_ID);
    }

    public void setPort_numIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_NUM_ISSET_ID, value);
    }

    public String getPcap_path() {
      return this.pcap_path;
    }

    public bm_dev_mgr_add_port_args setPcap_path(String pcap_path) {
      this.pcap_path = pcap_path;
      return this;
    }

    public void unsetPcap_path() {
      this.pcap_path = null;
    }

    /** Returns true if field pcap_path is set (has been assigned a value) and false otherwise */
    public boolean isSetPcap_path() {
      return this.pcap_path != null;
    }

    public void setPcap_pathIsSet(boolean value) {
      if (!value) {
        this.pcap_path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IFACE_NAME:
        if (value == null) {
          unsetIface_name();
        } else {
          setIface_name((String)value);
        }
        break;

      case PORT_NUM:
        if (value == null) {
          unsetPort_num();
        } else {
          setPort_num((Integer)value);
        }
        break;

      case PCAP_PATH:
        if (value == null) {
          unsetPcap_path();
        } else {
          setPcap_path((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IFACE_NAME:
        return getIface_name();

      case PORT_NUM:
        return getPort_num();

      case PCAP_PATH:
        return getPcap_path();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IFACE_NAME:
        return isSetIface_name();
      case PORT_NUM:
        return isSetPort_num();
      case PCAP_PATH:
        return isSetPcap_path();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_dev_mgr_add_port_args)
        return this.equals((bm_dev_mgr_add_port_args)that);
      return false;
    }

    public boolean equals(bm_dev_mgr_add_port_args that) {
      if (that == null)
        return false;

      boolean this_present_iface_name = true && this.isSetIface_name();
      boolean that_present_iface_name = true && that.isSetIface_name();
      if (this_present_iface_name || that_present_iface_name) {
        if (!(this_present_iface_name && that_present_iface_name))
          return false;
        if (!this.iface_name.equals(that.iface_name))
          return false;
      }

      boolean this_present_port_num = true;
      boolean that_present_port_num = true;
      if (this_present_port_num || that_present_port_num) {
        if (!(this_present_port_num && that_present_port_num))
          return false;
        if (this.port_num != that.port_num)
          return false;
      }

      boolean this_present_pcap_path = true && this.isSetPcap_path();
      boolean that_present_pcap_path = true && that.isSetPcap_path();
      if (this_present_pcap_path || that_present_pcap_path) {
        if (!(this_present_pcap_path && that_present_pcap_path))
          return false;
        if (!this.pcap_path.equals(that.pcap_path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_iface_name = true && (isSetIface_name());
      list.add(present_iface_name);
      if (present_iface_name)
        list.add(iface_name);

      boolean present_port_num = true;
      list.add(present_port_num);
      if (present_port_num)
        list.add(port_num);

      boolean present_pcap_path = true && (isSetPcap_path());
      list.add(present_pcap_path);
      if (present_pcap_path)
        list.add(pcap_path);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_dev_mgr_add_port_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIface_name()).compareTo(other.isSetIface_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIface_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iface_name, other.iface_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort_num()).compareTo(other.isSetPort_num());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort_num()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_num, other.port_num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPcap_path()).compareTo(other.isSetPcap_path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPcap_path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcap_path, other.pcap_path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_dev_mgr_add_port_args(");
      boolean first = true;

      sb.append("iface_name:");
      if (this.iface_name == null) {
        sb.append("null");
      } else {
        sb.append(this.iface_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port_num:");
      sb.append(this.port_num);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pcap_path:");
      if (this.pcap_path == null) {
        sb.append("null");
      } else {
        sb.append(this.pcap_path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_dev_mgr_add_port_argsStandardSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_add_port_argsStandardScheme getScheme() {
        return new bm_dev_mgr_add_port_argsStandardScheme();
      }
    }

    private static class bm_dev_mgr_add_port_argsStandardScheme extends StandardScheme<bm_dev_mgr_add_port_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_dev_mgr_add_port_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IFACE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.iface_name = iprot.readString();
                struct.setIface_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port_num = iprot.readI32();
                struct.setPort_numIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PCAP_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pcap_path = iprot.readString();
                struct.setPcap_pathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_dev_mgr_add_port_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.iface_name != null) {
          oprot.writeFieldBegin(IFACE_NAME_FIELD_DESC);
          oprot.writeString(struct.iface_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_NUM_FIELD_DESC);
        oprot.writeI32(struct.port_num);
        oprot.writeFieldEnd();
        if (struct.pcap_path != null) {
          oprot.writeFieldBegin(PCAP_PATH_FIELD_DESC);
          oprot.writeString(struct.pcap_path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_dev_mgr_add_port_argsTupleSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_add_port_argsTupleScheme getScheme() {
        return new bm_dev_mgr_add_port_argsTupleScheme();
      }
    }

    private static class bm_dev_mgr_add_port_argsTupleScheme extends TupleScheme<bm_dev_mgr_add_port_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_add_port_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIface_name()) {
          optionals.set(0);
        }
        if (struct.isSetPort_num()) {
          optionals.set(1);
        }
        if (struct.isSetPcap_path()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIface_name()) {
          oprot.writeString(struct.iface_name);
        }
        if (struct.isSetPort_num()) {
          oprot.writeI32(struct.port_num);
        }
        if (struct.isSetPcap_path()) {
          oprot.writeString(struct.pcap_path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_add_port_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.iface_name = iprot.readString();
          struct.setIface_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port_num = iprot.readI32();
          struct.setPort_numIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pcap_path = iprot.readString();
          struct.setPcap_pathIsSet(true);
        }
      }
    }

  }

  public static class bm_dev_mgr_add_port_result implements org.apache.thrift.TBase<bm_dev_mgr_add_port_result, bm_dev_mgr_add_port_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_dev_mgr_add_port_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_dev_mgr_add_port_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_dev_mgr_add_port_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_dev_mgr_add_port_resultTupleSchemeFactory());
    }

    public InvalidDevMgrOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_dev_mgr_add_port_result.class, metaDataMap);
    }

    public bm_dev_mgr_add_port_result() {
    }

    public bm_dev_mgr_add_port_result(
      InvalidDevMgrOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_dev_mgr_add_port_result(bm_dev_mgr_add_port_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidDevMgrOperation(other.ouch);
      }
    }

    public bm_dev_mgr_add_port_result deepCopy() {
      return new bm_dev_mgr_add_port_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidDevMgrOperation getOuch() {
      return this.ouch;
    }

    public bm_dev_mgr_add_port_result setOuch(InvalidDevMgrOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidDevMgrOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_dev_mgr_add_port_result)
        return this.equals((bm_dev_mgr_add_port_result)that);
      return false;
    }

    public boolean equals(bm_dev_mgr_add_port_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_dev_mgr_add_port_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_dev_mgr_add_port_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_dev_mgr_add_port_resultStandardSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_add_port_resultStandardScheme getScheme() {
        return new bm_dev_mgr_add_port_resultStandardScheme();
      }
    }

    private static class bm_dev_mgr_add_port_resultStandardScheme extends StandardScheme<bm_dev_mgr_add_port_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_dev_mgr_add_port_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidDevMgrOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_dev_mgr_add_port_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_dev_mgr_add_port_resultTupleSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_add_port_resultTupleScheme getScheme() {
        return new bm_dev_mgr_add_port_resultTupleScheme();
      }
    }

    private static class bm_dev_mgr_add_port_resultTupleScheme extends TupleScheme<bm_dev_mgr_add_port_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_add_port_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_add_port_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidDevMgrOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_dev_mgr_remove_port_args implements org.apache.thrift.TBase<bm_dev_mgr_remove_port_args, bm_dev_mgr_remove_port_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_dev_mgr_remove_port_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_dev_mgr_remove_port_args");

    private static final org.apache.thrift.protocol.TField PORT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("port_num", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_dev_mgr_remove_port_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_dev_mgr_remove_port_argsTupleSchemeFactory());
    }

    public int port_num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PORT_NUM((short)1, "port_num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PORT_NUM
            return PORT_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PORT_NUM, new org.apache.thrift.meta_data.FieldMetaData("port_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_dev_mgr_remove_port_args.class, metaDataMap);
    }

    public bm_dev_mgr_remove_port_args() {
    }

    public bm_dev_mgr_remove_port_args(
      int port_num)
    {
      this();
      this.port_num = port_num;
      setPort_numIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_dev_mgr_remove_port_args(bm_dev_mgr_remove_port_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.port_num = other.port_num;
    }

    public bm_dev_mgr_remove_port_args deepCopy() {
      return new bm_dev_mgr_remove_port_args(this);
    }

    @Override
    public void clear() {
      setPort_numIsSet(false);
      this.port_num = 0;
    }

    public int getPort_num() {
      return this.port_num;
    }

    public bm_dev_mgr_remove_port_args setPort_num(int port_num) {
      this.port_num = port_num;
      setPort_numIsSet(true);
      return this;
    }

    public void unsetPort_num() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_NUM_ISSET_ID);
    }

    /** Returns true if field port_num is set (has been assigned a value) and false otherwise */
    public boolean isSetPort_num() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_NUM_ISSET_ID);
    }

    public void setPort_numIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PORT_NUM:
        if (value == null) {
          unsetPort_num();
        } else {
          setPort_num((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PORT_NUM:
        return getPort_num();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PORT_NUM:
        return isSetPort_num();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_dev_mgr_remove_port_args)
        return this.equals((bm_dev_mgr_remove_port_args)that);
      return false;
    }

    public boolean equals(bm_dev_mgr_remove_port_args that) {
      if (that == null)
        return false;

      boolean this_present_port_num = true;
      boolean that_present_port_num = true;
      if (this_present_port_num || that_present_port_num) {
        if (!(this_present_port_num && that_present_port_num))
          return false;
        if (this.port_num != that.port_num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_port_num = true;
      list.add(present_port_num);
      if (present_port_num)
        list.add(port_num);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_dev_mgr_remove_port_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPort_num()).compareTo(other.isSetPort_num());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort_num()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_num, other.port_num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_dev_mgr_remove_port_args(");
      boolean first = true;

      sb.append("port_num:");
      sb.append(this.port_num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_dev_mgr_remove_port_argsStandardSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_remove_port_argsStandardScheme getScheme() {
        return new bm_dev_mgr_remove_port_argsStandardScheme();
      }
    }

    private static class bm_dev_mgr_remove_port_argsStandardScheme extends StandardScheme<bm_dev_mgr_remove_port_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_dev_mgr_remove_port_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PORT_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port_num = iprot.readI32();
                struct.setPort_numIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_dev_mgr_remove_port_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PORT_NUM_FIELD_DESC);
        oprot.writeI32(struct.port_num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_dev_mgr_remove_port_argsTupleSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_remove_port_argsTupleScheme getScheme() {
        return new bm_dev_mgr_remove_port_argsTupleScheme();
      }
    }

    private static class bm_dev_mgr_remove_port_argsTupleScheme extends TupleScheme<bm_dev_mgr_remove_port_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_remove_port_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPort_num()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPort_num()) {
          oprot.writeI32(struct.port_num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_remove_port_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.port_num = iprot.readI32();
          struct.setPort_numIsSet(true);
        }
      }
    }

  }

  public static class bm_dev_mgr_remove_port_result implements org.apache.thrift.TBase<bm_dev_mgr_remove_port_result, bm_dev_mgr_remove_port_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_dev_mgr_remove_port_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_dev_mgr_remove_port_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_dev_mgr_remove_port_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_dev_mgr_remove_port_resultTupleSchemeFactory());
    }

    public InvalidDevMgrOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_dev_mgr_remove_port_result.class, metaDataMap);
    }

    public bm_dev_mgr_remove_port_result() {
    }

    public bm_dev_mgr_remove_port_result(
      InvalidDevMgrOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_dev_mgr_remove_port_result(bm_dev_mgr_remove_port_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidDevMgrOperation(other.ouch);
      }
    }

    public bm_dev_mgr_remove_port_result deepCopy() {
      return new bm_dev_mgr_remove_port_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidDevMgrOperation getOuch() {
      return this.ouch;
    }

    public bm_dev_mgr_remove_port_result setOuch(InvalidDevMgrOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidDevMgrOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_dev_mgr_remove_port_result)
        return this.equals((bm_dev_mgr_remove_port_result)that);
      return false;
    }

    public boolean equals(bm_dev_mgr_remove_port_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_dev_mgr_remove_port_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_dev_mgr_remove_port_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_dev_mgr_remove_port_resultStandardSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_remove_port_resultStandardScheme getScheme() {
        return new bm_dev_mgr_remove_port_resultStandardScheme();
      }
    }

    private static class bm_dev_mgr_remove_port_resultStandardScheme extends StandardScheme<bm_dev_mgr_remove_port_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_dev_mgr_remove_port_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidDevMgrOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_dev_mgr_remove_port_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_dev_mgr_remove_port_resultTupleSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_remove_port_resultTupleScheme getScheme() {
        return new bm_dev_mgr_remove_port_resultTupleScheme();
      }
    }

    private static class bm_dev_mgr_remove_port_resultTupleScheme extends TupleScheme<bm_dev_mgr_remove_port_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_remove_port_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_remove_port_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidDevMgrOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_dev_mgr_show_ports_args implements org.apache.thrift.TBase<bm_dev_mgr_show_ports_args, bm_dev_mgr_show_ports_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_dev_mgr_show_ports_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_dev_mgr_show_ports_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_dev_mgr_show_ports_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_dev_mgr_show_ports_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_dev_mgr_show_ports_args.class, metaDataMap);
    }

    public bm_dev_mgr_show_ports_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_dev_mgr_show_ports_args(bm_dev_mgr_show_ports_args other) {
    }

    public bm_dev_mgr_show_ports_args deepCopy() {
      return new bm_dev_mgr_show_ports_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_dev_mgr_show_ports_args)
        return this.equals((bm_dev_mgr_show_ports_args)that);
      return false;
    }

    public boolean equals(bm_dev_mgr_show_ports_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_dev_mgr_show_ports_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_dev_mgr_show_ports_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_dev_mgr_show_ports_argsStandardSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_show_ports_argsStandardScheme getScheme() {
        return new bm_dev_mgr_show_ports_argsStandardScheme();
      }
    }

    private static class bm_dev_mgr_show_ports_argsStandardScheme extends StandardScheme<bm_dev_mgr_show_ports_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_dev_mgr_show_ports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_dev_mgr_show_ports_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_dev_mgr_show_ports_argsTupleSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_show_ports_argsTupleScheme getScheme() {
        return new bm_dev_mgr_show_ports_argsTupleScheme();
      }
    }

    private static class bm_dev_mgr_show_ports_argsTupleScheme extends TupleScheme<bm_dev_mgr_show_ports_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_show_ports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_show_ports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bm_dev_mgr_show_ports_result implements org.apache.thrift.TBase<bm_dev_mgr_show_ports_result, bm_dev_mgr_show_ports_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_dev_mgr_show_ports_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_dev_mgr_show_ports_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_dev_mgr_show_ports_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_dev_mgr_show_ports_resultTupleSchemeFactory());
    }

    public List<DevMgrPortInfo> success; // required
    public InvalidDevMgrOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DevMgrPortInfo.class))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_dev_mgr_show_ports_result.class, metaDataMap);
    }

    public bm_dev_mgr_show_ports_result() {
    }

    public bm_dev_mgr_show_ports_result(
      List<DevMgrPortInfo> success,
      InvalidDevMgrOperation ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_dev_mgr_show_ports_result(bm_dev_mgr_show_ports_result other) {
      if (other.isSetSuccess()) {
        List<DevMgrPortInfo> __this__success = new ArrayList<DevMgrPortInfo>(other.success.size());
        for (DevMgrPortInfo other_element : other.success) {
          __this__success.add(new DevMgrPortInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new InvalidDevMgrOperation(other.ouch);
      }
    }

    public bm_dev_mgr_show_ports_result deepCopy() {
      return new bm_dev_mgr_show_ports_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DevMgrPortInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DevMgrPortInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<DevMgrPortInfo>();
      }
      this.success.add(elem);
    }

    public List<DevMgrPortInfo> getSuccess() {
      return this.success;
    }

    public bm_dev_mgr_show_ports_result setSuccess(List<DevMgrPortInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidDevMgrOperation getOuch() {
      return this.ouch;
    }

    public bm_dev_mgr_show_ports_result setOuch(InvalidDevMgrOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DevMgrPortInfo>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidDevMgrOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_dev_mgr_show_ports_result)
        return this.equals((bm_dev_mgr_show_ports_result)that);
      return false;
    }

    public boolean equals(bm_dev_mgr_show_ports_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_dev_mgr_show_ports_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_dev_mgr_show_ports_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_dev_mgr_show_ports_resultStandardSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_show_ports_resultStandardScheme getScheme() {
        return new bm_dev_mgr_show_ports_resultStandardScheme();
      }
    }

    private static class bm_dev_mgr_show_ports_resultStandardScheme extends StandardScheme<bm_dev_mgr_show_ports_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_dev_mgr_show_ports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                  struct.success = new ArrayList<DevMgrPortInfo>(_list162.size);
                  DevMgrPortInfo _elem163;
                  for (int _i164 = 0; _i164 < _list162.size; ++_i164)
                  {
                    _elem163 = new DevMgrPortInfo();
                    _elem163.read(iprot);
                    struct.success.add(_elem163);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidDevMgrOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_dev_mgr_show_ports_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DevMgrPortInfo _iter165 : struct.success)
            {
              _iter165.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_dev_mgr_show_ports_resultTupleSchemeFactory implements SchemeFactory {
      public bm_dev_mgr_show_ports_resultTupleScheme getScheme() {
        return new bm_dev_mgr_show_ports_resultTupleScheme();
      }
    }

    private static class bm_dev_mgr_show_ports_resultTupleScheme extends TupleScheme<bm_dev_mgr_show_ports_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_show_ports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DevMgrPortInfo _iter166 : struct.success)
            {
              _iter166.write(oprot);
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_dev_mgr_show_ports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DevMgrPortInfo>(_list167.size);
            DevMgrPortInfo _elem168;
            for (int _i169 = 0; _i169 < _list167.size; ++_i169)
            {
              _elem168 = new DevMgrPortInfo();
              _elem168.read(iprot);
              struct.success.add(_elem168);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidDevMgrOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mgmt_get_info_args implements org.apache.thrift.TBase<bm_mgmt_get_info_args, bm_mgmt_get_info_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mgmt_get_info_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mgmt_get_info_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mgmt_get_info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mgmt_get_info_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mgmt_get_info_args.class, metaDataMap);
    }

    public bm_mgmt_get_info_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mgmt_get_info_args(bm_mgmt_get_info_args other) {
    }

    public bm_mgmt_get_info_args deepCopy() {
      return new bm_mgmt_get_info_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mgmt_get_info_args)
        return this.equals((bm_mgmt_get_info_args)that);
      return false;
    }

    public boolean equals(bm_mgmt_get_info_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mgmt_get_info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mgmt_get_info_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mgmt_get_info_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mgmt_get_info_argsStandardScheme getScheme() {
        return new bm_mgmt_get_info_argsStandardScheme();
      }
    }

    private static class bm_mgmt_get_info_argsStandardScheme extends StandardScheme<bm_mgmt_get_info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mgmt_get_info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mgmt_get_info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mgmt_get_info_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mgmt_get_info_argsTupleScheme getScheme() {
        return new bm_mgmt_get_info_argsTupleScheme();
      }
    }

    private static class bm_mgmt_get_info_argsTupleScheme extends TupleScheme<bm_mgmt_get_info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mgmt_get_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mgmt_get_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bm_mgmt_get_info_result implements org.apache.thrift.TBase<bm_mgmt_get_info_result, bm_mgmt_get_info_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mgmt_get_info_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mgmt_get_info_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mgmt_get_info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mgmt_get_info_resultTupleSchemeFactory());
    }

    public BmConfig success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mgmt_get_info_result.class, metaDataMap);
    }

    public bm_mgmt_get_info_result() {
    }

    public bm_mgmt_get_info_result(
      BmConfig success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mgmt_get_info_result(bm_mgmt_get_info_result other) {
      if (other.isSetSuccess()) {
        this.success = new BmConfig(other.success);
      }
    }

    public bm_mgmt_get_info_result deepCopy() {
      return new bm_mgmt_get_info_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BmConfig getSuccess() {
      return this.success;
    }

    public bm_mgmt_get_info_result setSuccess(BmConfig success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BmConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mgmt_get_info_result)
        return this.equals((bm_mgmt_get_info_result)that);
      return false;
    }

    public boolean equals(bm_mgmt_get_info_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mgmt_get_info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mgmt_get_info_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mgmt_get_info_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mgmt_get_info_resultStandardScheme getScheme() {
        return new bm_mgmt_get_info_resultStandardScheme();
      }
    }

    private static class bm_mgmt_get_info_resultStandardScheme extends StandardScheme<bm_mgmt_get_info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mgmt_get_info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BmConfig();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mgmt_get_info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mgmt_get_info_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mgmt_get_info_resultTupleScheme getScheme() {
        return new bm_mgmt_get_info_resultTupleScheme();
      }
    }

    private static class bm_mgmt_get_info_resultTupleScheme extends TupleScheme<bm_mgmt_get_info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mgmt_get_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mgmt_get_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BmConfig();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bm_set_crc16_custom_parameters_args implements org.apache.thrift.TBase<bm_set_crc16_custom_parameters_args, bm_set_crc16_custom_parameters_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_set_crc16_custom_parameters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_set_crc16_custom_parameters_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CALC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("calc_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CRC16_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("crc16_config", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_set_crc16_custom_parameters_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_set_crc16_custom_parameters_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String calc_name; // required
    public BmCrc16Config crc16_config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      CALC_NAME((short)2, "calc_name"),
      CRC16_CONFIG((short)3, "crc16_config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // CALC_NAME
            return CALC_NAME;
          case 3: // CRC16_CONFIG
            return CRC16_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CALC_NAME, new org.apache.thrift.meta_data.FieldMetaData("calc_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CRC16_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("crc16_config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmCrc16Config.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_set_crc16_custom_parameters_args.class, metaDataMap);
    }

    public bm_set_crc16_custom_parameters_args() {
    }

    public bm_set_crc16_custom_parameters_args(
      int cxt_id,
      String calc_name,
      BmCrc16Config crc16_config)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.calc_name = calc_name;
      this.crc16_config = crc16_config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_set_crc16_custom_parameters_args(bm_set_crc16_custom_parameters_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetCalc_name()) {
        this.calc_name = other.calc_name;
      }
      if (other.isSetCrc16_config()) {
        this.crc16_config = new BmCrc16Config(other.crc16_config);
      }
    }

    public bm_set_crc16_custom_parameters_args deepCopy() {
      return new bm_set_crc16_custom_parameters_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.calc_name = null;
      this.crc16_config = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_set_crc16_custom_parameters_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getCalc_name() {
      return this.calc_name;
    }

    public bm_set_crc16_custom_parameters_args setCalc_name(String calc_name) {
      this.calc_name = calc_name;
      return this;
    }

    public void unsetCalc_name() {
      this.calc_name = null;
    }

    /** Returns true if field calc_name is set (has been assigned a value) and false otherwise */
    public boolean isSetCalc_name() {
      return this.calc_name != null;
    }

    public void setCalc_nameIsSet(boolean value) {
      if (!value) {
        this.calc_name = null;
      }
    }

    public BmCrc16Config getCrc16_config() {
      return this.crc16_config;
    }

    public bm_set_crc16_custom_parameters_args setCrc16_config(BmCrc16Config crc16_config) {
      this.crc16_config = crc16_config;
      return this;
    }

    public void unsetCrc16_config() {
      this.crc16_config = null;
    }

    /** Returns true if field crc16_config is set (has been assigned a value) and false otherwise */
    public boolean isSetCrc16_config() {
      return this.crc16_config != null;
    }

    public void setCrc16_configIsSet(boolean value) {
      if (!value) {
        this.crc16_config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case CALC_NAME:
        if (value == null) {
          unsetCalc_name();
        } else {
          setCalc_name((String)value);
        }
        break;

      case CRC16_CONFIG:
        if (value == null) {
          unsetCrc16_config();
        } else {
          setCrc16_config((BmCrc16Config)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case CALC_NAME:
        return getCalc_name();

      case CRC16_CONFIG:
        return getCrc16_config();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case CALC_NAME:
        return isSetCalc_name();
      case CRC16_CONFIG:
        return isSetCrc16_config();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_set_crc16_custom_parameters_args)
        return this.equals((bm_set_crc16_custom_parameters_args)that);
      return false;
    }

    public boolean equals(bm_set_crc16_custom_parameters_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_calc_name = true && this.isSetCalc_name();
      boolean that_present_calc_name = true && that.isSetCalc_name();
      if (this_present_calc_name || that_present_calc_name) {
        if (!(this_present_calc_name && that_present_calc_name))
          return false;
        if (!this.calc_name.equals(that.calc_name))
          return false;
      }

      boolean this_present_crc16_config = true && this.isSetCrc16_config();
      boolean that_present_crc16_config = true && that.isSetCrc16_config();
      if (this_present_crc16_config || that_present_crc16_config) {
        if (!(this_present_crc16_config && that_present_crc16_config))
          return false;
        if (!this.crc16_config.equals(that.crc16_config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_calc_name = true && (isSetCalc_name());
      list.add(present_calc_name);
      if (present_calc_name)
        list.add(calc_name);

      boolean present_crc16_config = true && (isSetCrc16_config());
      list.add(present_crc16_config);
      if (present_crc16_config)
        list.add(crc16_config);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_set_crc16_custom_parameters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCalc_name()).compareTo(other.isSetCalc_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCalc_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calc_name, other.calc_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCrc16_config()).compareTo(other.isSetCrc16_config());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCrc16_config()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crc16_config, other.crc16_config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_set_crc16_custom_parameters_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("calc_name:");
      if (this.calc_name == null) {
        sb.append("null");
      } else {
        sb.append(this.calc_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("crc16_config:");
      if (this.crc16_config == null) {
        sb.append("null");
      } else {
        sb.append(this.crc16_config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (crc16_config != null) {
        crc16_config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_set_crc16_custom_parameters_argsStandardSchemeFactory implements SchemeFactory {
      public bm_set_crc16_custom_parameters_argsStandardScheme getScheme() {
        return new bm_set_crc16_custom_parameters_argsStandardScheme();
      }
    }

    private static class bm_set_crc16_custom_parameters_argsStandardScheme extends StandardScheme<bm_set_crc16_custom_parameters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_set_crc16_custom_parameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALC_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.calc_name = iprot.readString();
                struct.setCalc_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CRC16_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.crc16_config = new BmCrc16Config();
                struct.crc16_config.read(iprot);
                struct.setCrc16_configIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_set_crc16_custom_parameters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.calc_name != null) {
          oprot.writeFieldBegin(CALC_NAME_FIELD_DESC);
          oprot.writeString(struct.calc_name);
          oprot.writeFieldEnd();
        }
        if (struct.crc16_config != null) {
          oprot.writeFieldBegin(CRC16_CONFIG_FIELD_DESC);
          struct.crc16_config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_set_crc16_custom_parameters_argsTupleSchemeFactory implements SchemeFactory {
      public bm_set_crc16_custom_parameters_argsTupleScheme getScheme() {
        return new bm_set_crc16_custom_parameters_argsTupleScheme();
      }
    }

    private static class bm_set_crc16_custom_parameters_argsTupleScheme extends TupleScheme<bm_set_crc16_custom_parameters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_set_crc16_custom_parameters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetCalc_name()) {
          optionals.set(1);
        }
        if (struct.isSetCrc16_config()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetCalc_name()) {
          oprot.writeString(struct.calc_name);
        }
        if (struct.isSetCrc16_config()) {
          struct.crc16_config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_set_crc16_custom_parameters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.calc_name = iprot.readString();
          struct.setCalc_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.crc16_config = new BmCrc16Config();
          struct.crc16_config.read(iprot);
          struct.setCrc16_configIsSet(true);
        }
      }
    }

  }

  public static class bm_set_crc16_custom_parameters_result implements org.apache.thrift.TBase<bm_set_crc16_custom_parameters_result, bm_set_crc16_custom_parameters_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_set_crc16_custom_parameters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_set_crc16_custom_parameters_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_set_crc16_custom_parameters_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_set_crc16_custom_parameters_resultTupleSchemeFactory());
    }

    public InvalidCrcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_set_crc16_custom_parameters_result.class, metaDataMap);
    }

    public bm_set_crc16_custom_parameters_result() {
    }

    public bm_set_crc16_custom_parameters_result(
      InvalidCrcOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_set_crc16_custom_parameters_result(bm_set_crc16_custom_parameters_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidCrcOperation(other.ouch);
      }
    }

    public bm_set_crc16_custom_parameters_result deepCopy() {
      return new bm_set_crc16_custom_parameters_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidCrcOperation getOuch() {
      return this.ouch;
    }

    public bm_set_crc16_custom_parameters_result setOuch(InvalidCrcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidCrcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_set_crc16_custom_parameters_result)
        return this.equals((bm_set_crc16_custom_parameters_result)that);
      return false;
    }

    public boolean equals(bm_set_crc16_custom_parameters_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_set_crc16_custom_parameters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_set_crc16_custom_parameters_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_set_crc16_custom_parameters_resultStandardSchemeFactory implements SchemeFactory {
      public bm_set_crc16_custom_parameters_resultStandardScheme getScheme() {
        return new bm_set_crc16_custom_parameters_resultStandardScheme();
      }
    }

    private static class bm_set_crc16_custom_parameters_resultStandardScheme extends StandardScheme<bm_set_crc16_custom_parameters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_set_crc16_custom_parameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidCrcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_set_crc16_custom_parameters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_set_crc16_custom_parameters_resultTupleSchemeFactory implements SchemeFactory {
      public bm_set_crc16_custom_parameters_resultTupleScheme getScheme() {
        return new bm_set_crc16_custom_parameters_resultTupleScheme();
      }
    }

    private static class bm_set_crc16_custom_parameters_resultTupleScheme extends TupleScheme<bm_set_crc16_custom_parameters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_set_crc16_custom_parameters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_set_crc16_custom_parameters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidCrcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_set_crc32_custom_parameters_args implements org.apache.thrift.TBase<bm_set_crc32_custom_parameters_args, bm_set_crc32_custom_parameters_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_set_crc32_custom_parameters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_set_crc32_custom_parameters_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CALC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("calc_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CRC32_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("crc32_config", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_set_crc32_custom_parameters_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_set_crc32_custom_parameters_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public String calc_name; // required
    public BmCrc32Config crc32_config; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      CALC_NAME((short)2, "calc_name"),
      CRC32_CONFIG((short)3, "crc32_config");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // CALC_NAME
            return CALC_NAME;
          case 3: // CRC32_CONFIG
            return CRC32_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CALC_NAME, new org.apache.thrift.meta_data.FieldMetaData("calc_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CRC32_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("crc32_config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmCrc32Config.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_set_crc32_custom_parameters_args.class, metaDataMap);
    }

    public bm_set_crc32_custom_parameters_args() {
    }

    public bm_set_crc32_custom_parameters_args(
      int cxt_id,
      String calc_name,
      BmCrc32Config crc32_config)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.calc_name = calc_name;
      this.crc32_config = crc32_config;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_set_crc32_custom_parameters_args(bm_set_crc32_custom_parameters_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      if (other.isSetCalc_name()) {
        this.calc_name = other.calc_name;
      }
      if (other.isSetCrc32_config()) {
        this.crc32_config = new BmCrc32Config(other.crc32_config);
      }
    }

    public bm_set_crc32_custom_parameters_args deepCopy() {
      return new bm_set_crc32_custom_parameters_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      this.calc_name = null;
      this.crc32_config = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_set_crc32_custom_parameters_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public String getCalc_name() {
      return this.calc_name;
    }

    public bm_set_crc32_custom_parameters_args setCalc_name(String calc_name) {
      this.calc_name = calc_name;
      return this;
    }

    public void unsetCalc_name() {
      this.calc_name = null;
    }

    /** Returns true if field calc_name is set (has been assigned a value) and false otherwise */
    public boolean isSetCalc_name() {
      return this.calc_name != null;
    }

    public void setCalc_nameIsSet(boolean value) {
      if (!value) {
        this.calc_name = null;
      }
    }

    public BmCrc32Config getCrc32_config() {
      return this.crc32_config;
    }

    public bm_set_crc32_custom_parameters_args setCrc32_config(BmCrc32Config crc32_config) {
      this.crc32_config = crc32_config;
      return this;
    }

    public void unsetCrc32_config() {
      this.crc32_config = null;
    }

    /** Returns true if field crc32_config is set (has been assigned a value) and false otherwise */
    public boolean isSetCrc32_config() {
      return this.crc32_config != null;
    }

    public void setCrc32_configIsSet(boolean value) {
      if (!value) {
        this.crc32_config = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case CALC_NAME:
        if (value == null) {
          unsetCalc_name();
        } else {
          setCalc_name((String)value);
        }
        break;

      case CRC32_CONFIG:
        if (value == null) {
          unsetCrc32_config();
        } else {
          setCrc32_config((BmCrc32Config)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case CALC_NAME:
        return getCalc_name();

      case CRC32_CONFIG:
        return getCrc32_config();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case CALC_NAME:
        return isSetCalc_name();
      case CRC32_CONFIG:
        return isSetCrc32_config();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_set_crc32_custom_parameters_args)
        return this.equals((bm_set_crc32_custom_parameters_args)that);
      return false;
    }

    public boolean equals(bm_set_crc32_custom_parameters_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_calc_name = true && this.isSetCalc_name();
      boolean that_present_calc_name = true && that.isSetCalc_name();
      if (this_present_calc_name || that_present_calc_name) {
        if (!(this_present_calc_name && that_present_calc_name))
          return false;
        if (!this.calc_name.equals(that.calc_name))
          return false;
      }

      boolean this_present_crc32_config = true && this.isSetCrc32_config();
      boolean that_present_crc32_config = true && that.isSetCrc32_config();
      if (this_present_crc32_config || that_present_crc32_config) {
        if (!(this_present_crc32_config && that_present_crc32_config))
          return false;
        if (!this.crc32_config.equals(that.crc32_config))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_calc_name = true && (isSetCalc_name());
      list.add(present_calc_name);
      if (present_calc_name)
        list.add(calc_name);

      boolean present_crc32_config = true && (isSetCrc32_config());
      list.add(present_crc32_config);
      if (present_crc32_config)
        list.add(crc32_config);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_set_crc32_custom_parameters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCalc_name()).compareTo(other.isSetCalc_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCalc_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calc_name, other.calc_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCrc32_config()).compareTo(other.isSetCrc32_config());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCrc32_config()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crc32_config, other.crc32_config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_set_crc32_custom_parameters_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("calc_name:");
      if (this.calc_name == null) {
        sb.append("null");
      } else {
        sb.append(this.calc_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("crc32_config:");
      if (this.crc32_config == null) {
        sb.append("null");
      } else {
        sb.append(this.crc32_config);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (crc32_config != null) {
        crc32_config.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_set_crc32_custom_parameters_argsStandardSchemeFactory implements SchemeFactory {
      public bm_set_crc32_custom_parameters_argsStandardScheme getScheme() {
        return new bm_set_crc32_custom_parameters_argsStandardScheme();
      }
    }

    private static class bm_set_crc32_custom_parameters_argsStandardScheme extends StandardScheme<bm_set_crc32_custom_parameters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_set_crc32_custom_parameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALC_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.calc_name = iprot.readString();
                struct.setCalc_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CRC32_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.crc32_config = new BmCrc32Config();
                struct.crc32_config.read(iprot);
                struct.setCrc32_configIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_set_crc32_custom_parameters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        if (struct.calc_name != null) {
          oprot.writeFieldBegin(CALC_NAME_FIELD_DESC);
          oprot.writeString(struct.calc_name);
          oprot.writeFieldEnd();
        }
        if (struct.crc32_config != null) {
          oprot.writeFieldBegin(CRC32_CONFIG_FIELD_DESC);
          struct.crc32_config.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_set_crc32_custom_parameters_argsTupleSchemeFactory implements SchemeFactory {
      public bm_set_crc32_custom_parameters_argsTupleScheme getScheme() {
        return new bm_set_crc32_custom_parameters_argsTupleScheme();
      }
    }

    private static class bm_set_crc32_custom_parameters_argsTupleScheme extends TupleScheme<bm_set_crc32_custom_parameters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_set_crc32_custom_parameters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetCalc_name()) {
          optionals.set(1);
        }
        if (struct.isSetCrc32_config()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetCalc_name()) {
          oprot.writeString(struct.calc_name);
        }
        if (struct.isSetCrc32_config()) {
          struct.crc32_config.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_set_crc32_custom_parameters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.calc_name = iprot.readString();
          struct.setCalc_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.crc32_config = new BmCrc32Config();
          struct.crc32_config.read(iprot);
          struct.setCrc32_configIsSet(true);
        }
      }
    }

  }

  public static class bm_set_crc32_custom_parameters_result implements org.apache.thrift.TBase<bm_set_crc32_custom_parameters_result, bm_set_crc32_custom_parameters_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_set_crc32_custom_parameters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_set_crc32_custom_parameters_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_set_crc32_custom_parameters_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_set_crc32_custom_parameters_resultTupleSchemeFactory());
    }

    public InvalidCrcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_set_crc32_custom_parameters_result.class, metaDataMap);
    }

    public bm_set_crc32_custom_parameters_result() {
    }

    public bm_set_crc32_custom_parameters_result(
      InvalidCrcOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_set_crc32_custom_parameters_result(bm_set_crc32_custom_parameters_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidCrcOperation(other.ouch);
      }
    }

    public bm_set_crc32_custom_parameters_result deepCopy() {
      return new bm_set_crc32_custom_parameters_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidCrcOperation getOuch() {
      return this.ouch;
    }

    public bm_set_crc32_custom_parameters_result setOuch(InvalidCrcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidCrcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_set_crc32_custom_parameters_result)
        return this.equals((bm_set_crc32_custom_parameters_result)that);
      return false;
    }

    public boolean equals(bm_set_crc32_custom_parameters_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_set_crc32_custom_parameters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_set_crc32_custom_parameters_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_set_crc32_custom_parameters_resultStandardSchemeFactory implements SchemeFactory {
      public bm_set_crc32_custom_parameters_resultStandardScheme getScheme() {
        return new bm_set_crc32_custom_parameters_resultStandardScheme();
      }
    }

    private static class bm_set_crc32_custom_parameters_resultStandardScheme extends StandardScheme<bm_set_crc32_custom_parameters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_set_crc32_custom_parameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidCrcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_set_crc32_custom_parameters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_set_crc32_custom_parameters_resultTupleSchemeFactory implements SchemeFactory {
      public bm_set_crc32_custom_parameters_resultTupleScheme getScheme() {
        return new bm_set_crc32_custom_parameters_resultTupleScheme();
      }
    }

    private static class bm_set_crc32_custom_parameters_resultTupleScheme extends TupleScheme<bm_set_crc32_custom_parameters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_set_crc32_custom_parameters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_set_crc32_custom_parameters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidCrcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_reset_state_args implements org.apache.thrift.TBase<bm_reset_state_args, bm_reset_state_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_reset_state_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_reset_state_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_reset_state_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_reset_state_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_reset_state_args.class, metaDataMap);
    }

    public bm_reset_state_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_reset_state_args(bm_reset_state_args other) {
    }

    public bm_reset_state_args deepCopy() {
      return new bm_reset_state_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_reset_state_args)
        return this.equals((bm_reset_state_args)that);
      return false;
    }

    public boolean equals(bm_reset_state_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_reset_state_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_reset_state_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_reset_state_argsStandardSchemeFactory implements SchemeFactory {
      public bm_reset_state_argsStandardScheme getScheme() {
        return new bm_reset_state_argsStandardScheme();
      }
    }

    private static class bm_reset_state_argsStandardScheme extends StandardScheme<bm_reset_state_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_reset_state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_reset_state_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_reset_state_argsTupleSchemeFactory implements SchemeFactory {
      public bm_reset_state_argsTupleScheme getScheme() {
        return new bm_reset_state_argsTupleScheme();
      }
    }

    private static class bm_reset_state_argsTupleScheme extends TupleScheme<bm_reset_state_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_reset_state_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_reset_state_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bm_reset_state_result implements org.apache.thrift.TBase<bm_reset_state_result, bm_reset_state_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_reset_state_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_reset_state_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_reset_state_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_reset_state_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_reset_state_result.class, metaDataMap);
    }

    public bm_reset_state_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_reset_state_result(bm_reset_state_result other) {
    }

    public bm_reset_state_result deepCopy() {
      return new bm_reset_state_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_reset_state_result)
        return this.equals((bm_reset_state_result)that);
      return false;
    }

    public boolean equals(bm_reset_state_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_reset_state_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_reset_state_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_reset_state_resultStandardSchemeFactory implements SchemeFactory {
      public bm_reset_state_resultStandardScheme getScheme() {
        return new bm_reset_state_resultStandardScheme();
      }
    }

    private static class bm_reset_state_resultStandardScheme extends StandardScheme<bm_reset_state_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_reset_state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_reset_state_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_reset_state_resultTupleSchemeFactory implements SchemeFactory {
      public bm_reset_state_resultTupleScheme getScheme() {
        return new bm_reset_state_resultTupleScheme();
      }
    }

    private static class bm_reset_state_resultTupleScheme extends TupleScheme<bm_reset_state_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_reset_state_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_reset_state_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bm_get_config_args implements org.apache.thrift.TBase<bm_get_config_args, bm_get_config_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_get_config_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_get_config_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_get_config_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_get_config_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_get_config_args.class, metaDataMap);
    }

    public bm_get_config_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_get_config_args(bm_get_config_args other) {
    }

    public bm_get_config_args deepCopy() {
      return new bm_get_config_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_get_config_args)
        return this.equals((bm_get_config_args)that);
      return false;
    }

    public boolean equals(bm_get_config_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_get_config_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_get_config_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_get_config_argsStandardSchemeFactory implements SchemeFactory {
      public bm_get_config_argsStandardScheme getScheme() {
        return new bm_get_config_argsStandardScheme();
      }
    }

    private static class bm_get_config_argsStandardScheme extends StandardScheme<bm_get_config_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_get_config_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_get_config_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_get_config_argsTupleSchemeFactory implements SchemeFactory {
      public bm_get_config_argsTupleScheme getScheme() {
        return new bm_get_config_argsTupleScheme();
      }
    }

    private static class bm_get_config_argsTupleScheme extends TupleScheme<bm_get_config_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_get_config_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_get_config_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bm_get_config_result implements org.apache.thrift.TBase<bm_get_config_result, bm_get_config_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_get_config_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_get_config_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_get_config_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_get_config_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_get_config_result.class, metaDataMap);
    }

    public bm_get_config_result() {
    }

    public bm_get_config_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_get_config_result(bm_get_config_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public bm_get_config_result deepCopy() {
      return new bm_get_config_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public bm_get_config_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_get_config_result)
        return this.equals((bm_get_config_result)that);
      return false;
    }

    public boolean equals(bm_get_config_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_get_config_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_get_config_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_get_config_resultStandardSchemeFactory implements SchemeFactory {
      public bm_get_config_resultStandardScheme getScheme() {
        return new bm_get_config_resultStandardScheme();
      }
    }

    private static class bm_get_config_resultStandardScheme extends StandardScheme<bm_get_config_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_get_config_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_get_config_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_get_config_resultTupleSchemeFactory implements SchemeFactory {
      public bm_get_config_resultTupleScheme getScheme() {
        return new bm_get_config_resultTupleScheme();
      }
    }

    private static class bm_get_config_resultTupleScheme extends TupleScheme<bm_get_config_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_get_config_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_get_config_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bm_get_config_md5_args implements org.apache.thrift.TBase<bm_get_config_md5_args, bm_get_config_md5_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_get_config_md5_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_get_config_md5_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_get_config_md5_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_get_config_md5_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_get_config_md5_args.class, metaDataMap);
    }

    public bm_get_config_md5_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_get_config_md5_args(bm_get_config_md5_args other) {
    }

    public bm_get_config_md5_args deepCopy() {
      return new bm_get_config_md5_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_get_config_md5_args)
        return this.equals((bm_get_config_md5_args)that);
      return false;
    }

    public boolean equals(bm_get_config_md5_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_get_config_md5_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_get_config_md5_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_get_config_md5_argsStandardSchemeFactory implements SchemeFactory {
      public bm_get_config_md5_argsStandardScheme getScheme() {
        return new bm_get_config_md5_argsStandardScheme();
      }
    }

    private static class bm_get_config_md5_argsStandardScheme extends StandardScheme<bm_get_config_md5_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_get_config_md5_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_get_config_md5_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_get_config_md5_argsTupleSchemeFactory implements SchemeFactory {
      public bm_get_config_md5_argsTupleScheme getScheme() {
        return new bm_get_config_md5_argsTupleScheme();
      }
    }

    private static class bm_get_config_md5_argsTupleScheme extends TupleScheme<bm_get_config_md5_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_get_config_md5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_get_config_md5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bm_get_config_md5_result implements org.apache.thrift.TBase<bm_get_config_md5_result, bm_get_config_md5_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_get_config_md5_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_get_config_md5_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_get_config_md5_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_get_config_md5_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_get_config_md5_result.class, metaDataMap);
    }

    public bm_get_config_md5_result() {
    }

    public bm_get_config_md5_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_get_config_md5_result(bm_get_config_md5_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public bm_get_config_md5_result deepCopy() {
      return new bm_get_config_md5_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public bm_get_config_md5_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_get_config_md5_result)
        return this.equals((bm_get_config_md5_result)that);
      return false;
    }

    public boolean equals(bm_get_config_md5_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_get_config_md5_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_get_config_md5_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_get_config_md5_resultStandardSchemeFactory implements SchemeFactory {
      public bm_get_config_md5_resultStandardScheme getScheme() {
        return new bm_get_config_md5_resultStandardScheme();
      }
    }

    private static class bm_get_config_md5_resultStandardScheme extends StandardScheme<bm_get_config_md5_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_get_config_md5_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_get_config_md5_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_get_config_md5_resultTupleSchemeFactory implements SchemeFactory {
      public bm_get_config_md5_resultTupleScheme getScheme() {
        return new bm_get_config_md5_resultTupleScheme();
      }
    }

    private static class bm_get_config_md5_resultTupleScheme extends TupleScheme<bm_get_config_md5_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_get_config_md5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_get_config_md5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bm_serialize_state_args implements org.apache.thrift.TBase<bm_serialize_state_args, bm_serialize_state_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_serialize_state_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_serialize_state_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_serialize_state_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_serialize_state_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_serialize_state_args.class, metaDataMap);
    }

    public bm_serialize_state_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_serialize_state_args(bm_serialize_state_args other) {
    }

    public bm_serialize_state_args deepCopy() {
      return new bm_serialize_state_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_serialize_state_args)
        return this.equals((bm_serialize_state_args)that);
      return false;
    }

    public boolean equals(bm_serialize_state_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_serialize_state_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_serialize_state_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_serialize_state_argsStandardSchemeFactory implements SchemeFactory {
      public bm_serialize_state_argsStandardScheme getScheme() {
        return new bm_serialize_state_argsStandardScheme();
      }
    }

    private static class bm_serialize_state_argsStandardScheme extends StandardScheme<bm_serialize_state_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_serialize_state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_serialize_state_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_serialize_state_argsTupleSchemeFactory implements SchemeFactory {
      public bm_serialize_state_argsTupleScheme getScheme() {
        return new bm_serialize_state_argsTupleScheme();
      }
    }

    private static class bm_serialize_state_argsTupleScheme extends TupleScheme<bm_serialize_state_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_serialize_state_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_serialize_state_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bm_serialize_state_result implements org.apache.thrift.TBase<bm_serialize_state_result, bm_serialize_state_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_serialize_state_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_serialize_state_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_serialize_state_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_serialize_state_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_serialize_state_result.class, metaDataMap);
    }

    public bm_serialize_state_result() {
    }

    public bm_serialize_state_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_serialize_state_result(bm_serialize_state_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public bm_serialize_state_result deepCopy() {
      return new bm_serialize_state_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public bm_serialize_state_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_serialize_state_result)
        return this.equals((bm_serialize_state_result)that);
      return false;
    }

    public boolean equals(bm_serialize_state_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_serialize_state_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_serialize_state_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_serialize_state_resultStandardSchemeFactory implements SchemeFactory {
      public bm_serialize_state_resultStandardScheme getScheme() {
        return new bm_serialize_state_resultStandardScheme();
      }
    }

    private static class bm_serialize_state_resultStandardScheme extends StandardScheme<bm_serialize_state_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_serialize_state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_serialize_state_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_serialize_state_resultTupleSchemeFactory implements SchemeFactory {
      public bm_serialize_state_resultTupleScheme getScheme() {
        return new bm_serialize_state_resultTupleScheme();
      }
    }

    private static class bm_serialize_state_resultTupleScheme extends TupleScheme<bm_serialize_state_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_serialize_state_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_serialize_state_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
