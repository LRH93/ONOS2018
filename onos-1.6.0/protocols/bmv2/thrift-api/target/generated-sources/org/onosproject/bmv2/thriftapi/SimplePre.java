/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.onosproject.bmv2.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-14")
public class SimplePre {

  public interface Iface {

    public int bm_mc_mgrp_create(int cxt_id, int mgrp) throws InvalidMcOperation, org.apache.thrift.TException;

    public void bm_mc_mgrp_destroy(int cxt_id, int mgrp_handle) throws InvalidMcOperation, org.apache.thrift.TException;

    public int bm_mc_node_create(int cxt_id, int rid, String port_map) throws InvalidMcOperation, org.apache.thrift.TException;

    public void bm_mc_node_associate(int cxt_id, int mgrp_handle, int l1_handle) throws InvalidMcOperation, org.apache.thrift.TException;

    public void bm_mc_node_dissociate(int cxt_id, int mgrp_handle, int l1_handle) throws InvalidMcOperation, org.apache.thrift.TException;

    public void bm_mc_node_destroy(int cxt_id, int l1_handle) throws InvalidMcOperation, org.apache.thrift.TException;

    public void bm_mc_node_update(int cxt_id, int l1_handle, String port_map) throws InvalidMcOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void bm_mc_mgrp_create(int cxt_id, int mgrp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mc_mgrp_destroy(int cxt_id, int mgrp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mc_node_create(int cxt_id, int rid, String port_map, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mc_node_associate(int cxt_id, int mgrp_handle, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mc_node_dissociate(int cxt_id, int mgrp_handle, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mc_node_destroy(int cxt_id, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bm_mc_node_update(int cxt_id, int l1_handle, String port_map, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int bm_mc_mgrp_create(int cxt_id, int mgrp) throws InvalidMcOperation, org.apache.thrift.TException
    {
      send_bm_mc_mgrp_create(cxt_id, mgrp);
      return recv_bm_mc_mgrp_create();
    }

    public void send_bm_mc_mgrp_create(int cxt_id, int mgrp) throws org.apache.thrift.TException
    {
      bm_mc_mgrp_create_args args = new bm_mc_mgrp_create_args();
      args.setCxt_id(cxt_id);
      args.setMgrp(mgrp);
      sendBase("bm_mc_mgrp_create", args);
    }

    public int recv_bm_mc_mgrp_create() throws InvalidMcOperation, org.apache.thrift.TException
    {
      bm_mc_mgrp_create_result result = new bm_mc_mgrp_create_result();
      receiveBase(result, "bm_mc_mgrp_create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mc_mgrp_create failed: unknown result");
    }

    public void bm_mc_mgrp_destroy(int cxt_id, int mgrp_handle) throws InvalidMcOperation, org.apache.thrift.TException
    {
      send_bm_mc_mgrp_destroy(cxt_id, mgrp_handle);
      recv_bm_mc_mgrp_destroy();
    }

    public void send_bm_mc_mgrp_destroy(int cxt_id, int mgrp_handle) throws org.apache.thrift.TException
    {
      bm_mc_mgrp_destroy_args args = new bm_mc_mgrp_destroy_args();
      args.setCxt_id(cxt_id);
      args.setMgrp_handle(mgrp_handle);
      sendBase("bm_mc_mgrp_destroy", args);
    }

    public void recv_bm_mc_mgrp_destroy() throws InvalidMcOperation, org.apache.thrift.TException
    {
      bm_mc_mgrp_destroy_result result = new bm_mc_mgrp_destroy_result();
      receiveBase(result, "bm_mc_mgrp_destroy");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public int bm_mc_node_create(int cxt_id, int rid, String port_map) throws InvalidMcOperation, org.apache.thrift.TException
    {
      send_bm_mc_node_create(cxt_id, rid, port_map);
      return recv_bm_mc_node_create();
    }

    public void send_bm_mc_node_create(int cxt_id, int rid, String port_map) throws org.apache.thrift.TException
    {
      bm_mc_node_create_args args = new bm_mc_node_create_args();
      args.setCxt_id(cxt_id);
      args.setRid(rid);
      args.setPort_map(port_map);
      sendBase("bm_mc_node_create", args);
    }

    public int recv_bm_mc_node_create() throws InvalidMcOperation, org.apache.thrift.TException
    {
      bm_mc_node_create_result result = new bm_mc_node_create_result();
      receiveBase(result, "bm_mc_node_create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bm_mc_node_create failed: unknown result");
    }

    public void bm_mc_node_associate(int cxt_id, int mgrp_handle, int l1_handle) throws InvalidMcOperation, org.apache.thrift.TException
    {
      send_bm_mc_node_associate(cxt_id, mgrp_handle, l1_handle);
      recv_bm_mc_node_associate();
    }

    public void send_bm_mc_node_associate(int cxt_id, int mgrp_handle, int l1_handle) throws org.apache.thrift.TException
    {
      bm_mc_node_associate_args args = new bm_mc_node_associate_args();
      args.setCxt_id(cxt_id);
      args.setMgrp_handle(mgrp_handle);
      args.setL1_handle(l1_handle);
      sendBase("bm_mc_node_associate", args);
    }

    public void recv_bm_mc_node_associate() throws InvalidMcOperation, org.apache.thrift.TException
    {
      bm_mc_node_associate_result result = new bm_mc_node_associate_result();
      receiveBase(result, "bm_mc_node_associate");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mc_node_dissociate(int cxt_id, int mgrp_handle, int l1_handle) throws InvalidMcOperation, org.apache.thrift.TException
    {
      send_bm_mc_node_dissociate(cxt_id, mgrp_handle, l1_handle);
      recv_bm_mc_node_dissociate();
    }

    public void send_bm_mc_node_dissociate(int cxt_id, int mgrp_handle, int l1_handle) throws org.apache.thrift.TException
    {
      bm_mc_node_dissociate_args args = new bm_mc_node_dissociate_args();
      args.setCxt_id(cxt_id);
      args.setMgrp_handle(mgrp_handle);
      args.setL1_handle(l1_handle);
      sendBase("bm_mc_node_dissociate", args);
    }

    public void recv_bm_mc_node_dissociate() throws InvalidMcOperation, org.apache.thrift.TException
    {
      bm_mc_node_dissociate_result result = new bm_mc_node_dissociate_result();
      receiveBase(result, "bm_mc_node_dissociate");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mc_node_destroy(int cxt_id, int l1_handle) throws InvalidMcOperation, org.apache.thrift.TException
    {
      send_bm_mc_node_destroy(cxt_id, l1_handle);
      recv_bm_mc_node_destroy();
    }

    public void send_bm_mc_node_destroy(int cxt_id, int l1_handle) throws org.apache.thrift.TException
    {
      bm_mc_node_destroy_args args = new bm_mc_node_destroy_args();
      args.setCxt_id(cxt_id);
      args.setL1_handle(l1_handle);
      sendBase("bm_mc_node_destroy", args);
    }

    public void recv_bm_mc_node_destroy() throws InvalidMcOperation, org.apache.thrift.TException
    {
      bm_mc_node_destroy_result result = new bm_mc_node_destroy_result();
      receiveBase(result, "bm_mc_node_destroy");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

    public void bm_mc_node_update(int cxt_id, int l1_handle, String port_map) throws InvalidMcOperation, org.apache.thrift.TException
    {
      send_bm_mc_node_update(cxt_id, l1_handle, port_map);
      recv_bm_mc_node_update();
    }

    public void send_bm_mc_node_update(int cxt_id, int l1_handle, String port_map) throws org.apache.thrift.TException
    {
      bm_mc_node_update_args args = new bm_mc_node_update_args();
      args.setCxt_id(cxt_id);
      args.setL1_handle(l1_handle);
      args.setPort_map(port_map);
      sendBase("bm_mc_node_update", args);
    }

    public void recv_bm_mc_node_update() throws InvalidMcOperation, org.apache.thrift.TException
    {
      bm_mc_node_update_result result = new bm_mc_node_update_result();
      receiveBase(result, "bm_mc_node_update");
      if (result.ouch != null) {
        throw result.ouch;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void bm_mc_mgrp_create(int cxt_id, int mgrp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mc_mgrp_create_call method_call = new bm_mc_mgrp_create_call(cxt_id, mgrp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mc_mgrp_create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int mgrp;
      public bm_mc_mgrp_create_call(int cxt_id, int mgrp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.mgrp = mgrp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mc_mgrp_create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mc_mgrp_create_args args = new bm_mc_mgrp_create_args();
        args.setCxt_id(cxt_id);
        args.setMgrp(mgrp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws InvalidMcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mc_mgrp_create();
      }
    }

    public void bm_mc_mgrp_destroy(int cxt_id, int mgrp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mc_mgrp_destroy_call method_call = new bm_mc_mgrp_destroy_call(cxt_id, mgrp_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mc_mgrp_destroy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int mgrp_handle;
      public bm_mc_mgrp_destroy_call(int cxt_id, int mgrp_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.mgrp_handle = mgrp_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mc_mgrp_destroy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mc_mgrp_destroy_args args = new bm_mc_mgrp_destroy_args();
        args.setCxt_id(cxt_id);
        args.setMgrp_handle(mgrp_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidMcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mc_mgrp_destroy();
      }
    }

    public void bm_mc_node_create(int cxt_id, int rid, String port_map, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mc_node_create_call method_call = new bm_mc_node_create_call(cxt_id, rid, port_map, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mc_node_create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int rid;
      private String port_map;
      public bm_mc_node_create_call(int cxt_id, int rid, String port_map, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.rid = rid;
        this.port_map = port_map;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mc_node_create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mc_node_create_args args = new bm_mc_node_create_args();
        args.setCxt_id(cxt_id);
        args.setRid(rid);
        args.setPort_map(port_map);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws InvalidMcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bm_mc_node_create();
      }
    }

    public void bm_mc_node_associate(int cxt_id, int mgrp_handle, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mc_node_associate_call method_call = new bm_mc_node_associate_call(cxt_id, mgrp_handle, l1_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mc_node_associate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int mgrp_handle;
      private int l1_handle;
      public bm_mc_node_associate_call(int cxt_id, int mgrp_handle, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.mgrp_handle = mgrp_handle;
        this.l1_handle = l1_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mc_node_associate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mc_node_associate_args args = new bm_mc_node_associate_args();
        args.setCxt_id(cxt_id);
        args.setMgrp_handle(mgrp_handle);
        args.setL1_handle(l1_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidMcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mc_node_associate();
      }
    }

    public void bm_mc_node_dissociate(int cxt_id, int mgrp_handle, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mc_node_dissociate_call method_call = new bm_mc_node_dissociate_call(cxt_id, mgrp_handle, l1_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mc_node_dissociate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int mgrp_handle;
      private int l1_handle;
      public bm_mc_node_dissociate_call(int cxt_id, int mgrp_handle, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.mgrp_handle = mgrp_handle;
        this.l1_handle = l1_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mc_node_dissociate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mc_node_dissociate_args args = new bm_mc_node_dissociate_args();
        args.setCxt_id(cxt_id);
        args.setMgrp_handle(mgrp_handle);
        args.setL1_handle(l1_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidMcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mc_node_dissociate();
      }
    }

    public void bm_mc_node_destroy(int cxt_id, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mc_node_destroy_call method_call = new bm_mc_node_destroy_call(cxt_id, l1_handle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mc_node_destroy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int l1_handle;
      public bm_mc_node_destroy_call(int cxt_id, int l1_handle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.l1_handle = l1_handle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mc_node_destroy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mc_node_destroy_args args = new bm_mc_node_destroy_args();
        args.setCxt_id(cxt_id);
        args.setL1_handle(l1_handle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidMcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mc_node_destroy();
      }
    }

    public void bm_mc_node_update(int cxt_id, int l1_handle, String port_map, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bm_mc_node_update_call method_call = new bm_mc_node_update_call(cxt_id, l1_handle, port_map, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bm_mc_node_update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cxt_id;
      private int l1_handle;
      private String port_map;
      public bm_mc_node_update_call(int cxt_id, int l1_handle, String port_map, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cxt_id = cxt_id;
        this.l1_handle = l1_handle;
        this.port_map = port_map;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bm_mc_node_update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bm_mc_node_update_args args = new bm_mc_node_update_args();
        args.setCxt_id(cxt_id);
        args.setL1_handle(l1_handle);
        args.setPort_map(port_map);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidMcOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bm_mc_node_update();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("bm_mc_mgrp_create", new bm_mc_mgrp_create());
      processMap.put("bm_mc_mgrp_destroy", new bm_mc_mgrp_destroy());
      processMap.put("bm_mc_node_create", new bm_mc_node_create());
      processMap.put("bm_mc_node_associate", new bm_mc_node_associate());
      processMap.put("bm_mc_node_dissociate", new bm_mc_node_dissociate());
      processMap.put("bm_mc_node_destroy", new bm_mc_node_destroy());
      processMap.put("bm_mc_node_update", new bm_mc_node_update());
      return processMap;
    }

    public static class bm_mc_mgrp_create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mc_mgrp_create_args> {
      public bm_mc_mgrp_create() {
        super("bm_mc_mgrp_create");
      }

      public bm_mc_mgrp_create_args getEmptyArgsInstance() {
        return new bm_mc_mgrp_create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mc_mgrp_create_result getResult(I iface, bm_mc_mgrp_create_args args) throws org.apache.thrift.TException {
        bm_mc_mgrp_create_result result = new bm_mc_mgrp_create_result();
        try {
          result.success = iface.bm_mc_mgrp_create(args.cxt_id, args.mgrp);
          result.setSuccessIsSet(true);
        } catch (InvalidMcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mc_mgrp_destroy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mc_mgrp_destroy_args> {
      public bm_mc_mgrp_destroy() {
        super("bm_mc_mgrp_destroy");
      }

      public bm_mc_mgrp_destroy_args getEmptyArgsInstance() {
        return new bm_mc_mgrp_destroy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mc_mgrp_destroy_result getResult(I iface, bm_mc_mgrp_destroy_args args) throws org.apache.thrift.TException {
        bm_mc_mgrp_destroy_result result = new bm_mc_mgrp_destroy_result();
        try {
          iface.bm_mc_mgrp_destroy(args.cxt_id, args.mgrp_handle);
        } catch (InvalidMcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mc_node_create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mc_node_create_args> {
      public bm_mc_node_create() {
        super("bm_mc_node_create");
      }

      public bm_mc_node_create_args getEmptyArgsInstance() {
        return new bm_mc_node_create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mc_node_create_result getResult(I iface, bm_mc_node_create_args args) throws org.apache.thrift.TException {
        bm_mc_node_create_result result = new bm_mc_node_create_result();
        try {
          result.success = iface.bm_mc_node_create(args.cxt_id, args.rid, args.port_map);
          result.setSuccessIsSet(true);
        } catch (InvalidMcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mc_node_associate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mc_node_associate_args> {
      public bm_mc_node_associate() {
        super("bm_mc_node_associate");
      }

      public bm_mc_node_associate_args getEmptyArgsInstance() {
        return new bm_mc_node_associate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mc_node_associate_result getResult(I iface, bm_mc_node_associate_args args) throws org.apache.thrift.TException {
        bm_mc_node_associate_result result = new bm_mc_node_associate_result();
        try {
          iface.bm_mc_node_associate(args.cxt_id, args.mgrp_handle, args.l1_handle);
        } catch (InvalidMcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mc_node_dissociate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mc_node_dissociate_args> {
      public bm_mc_node_dissociate() {
        super("bm_mc_node_dissociate");
      }

      public bm_mc_node_dissociate_args getEmptyArgsInstance() {
        return new bm_mc_node_dissociate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mc_node_dissociate_result getResult(I iface, bm_mc_node_dissociate_args args) throws org.apache.thrift.TException {
        bm_mc_node_dissociate_result result = new bm_mc_node_dissociate_result();
        try {
          iface.bm_mc_node_dissociate(args.cxt_id, args.mgrp_handle, args.l1_handle);
        } catch (InvalidMcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mc_node_destroy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mc_node_destroy_args> {
      public bm_mc_node_destroy() {
        super("bm_mc_node_destroy");
      }

      public bm_mc_node_destroy_args getEmptyArgsInstance() {
        return new bm_mc_node_destroy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mc_node_destroy_result getResult(I iface, bm_mc_node_destroy_args args) throws org.apache.thrift.TException {
        bm_mc_node_destroy_result result = new bm_mc_node_destroy_result();
        try {
          iface.bm_mc_node_destroy(args.cxt_id, args.l1_handle);
        } catch (InvalidMcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class bm_mc_node_update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bm_mc_node_update_args> {
      public bm_mc_node_update() {
        super("bm_mc_node_update");
      }

      public bm_mc_node_update_args getEmptyArgsInstance() {
        return new bm_mc_node_update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bm_mc_node_update_result getResult(I iface, bm_mc_node_update_args args) throws org.apache.thrift.TException {
        bm_mc_node_update_result result = new bm_mc_node_update_result();
        try {
          iface.bm_mc_node_update(args.cxt_id, args.l1_handle, args.port_map);
        } catch (InvalidMcOperation ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("bm_mc_mgrp_create", new bm_mc_mgrp_create());
      processMap.put("bm_mc_mgrp_destroy", new bm_mc_mgrp_destroy());
      processMap.put("bm_mc_node_create", new bm_mc_node_create());
      processMap.put("bm_mc_node_associate", new bm_mc_node_associate());
      processMap.put("bm_mc_node_dissociate", new bm_mc_node_dissociate());
      processMap.put("bm_mc_node_destroy", new bm_mc_node_destroy());
      processMap.put("bm_mc_node_update", new bm_mc_node_update());
      return processMap;
    }

    public static class bm_mc_mgrp_create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mc_mgrp_create_args, Integer> {
      public bm_mc_mgrp_create() {
        super("bm_mc_mgrp_create");
      }

      public bm_mc_mgrp_create_args getEmptyArgsInstance() {
        return new bm_mc_mgrp_create_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            bm_mc_mgrp_create_result result = new bm_mc_mgrp_create_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mc_mgrp_create_result result = new bm_mc_mgrp_create_result();
            if (e instanceof InvalidMcOperation) {
                        result.ouch = (InvalidMcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mc_mgrp_create_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.bm_mc_mgrp_create(args.cxt_id, args.mgrp,resultHandler);
      }
    }

    public static class bm_mc_mgrp_destroy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mc_mgrp_destroy_args, Void> {
      public bm_mc_mgrp_destroy() {
        super("bm_mc_mgrp_destroy");
      }

      public bm_mc_mgrp_destroy_args getEmptyArgsInstance() {
        return new bm_mc_mgrp_destroy_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mc_mgrp_destroy_result result = new bm_mc_mgrp_destroy_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mc_mgrp_destroy_result result = new bm_mc_mgrp_destroy_result();
            if (e instanceof InvalidMcOperation) {
                        result.ouch = (InvalidMcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mc_mgrp_destroy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mc_mgrp_destroy(args.cxt_id, args.mgrp_handle,resultHandler);
      }
    }

    public static class bm_mc_node_create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mc_node_create_args, Integer> {
      public bm_mc_node_create() {
        super("bm_mc_node_create");
      }

      public bm_mc_node_create_args getEmptyArgsInstance() {
        return new bm_mc_node_create_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            bm_mc_node_create_result result = new bm_mc_node_create_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mc_node_create_result result = new bm_mc_node_create_result();
            if (e instanceof InvalidMcOperation) {
                        result.ouch = (InvalidMcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mc_node_create_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.bm_mc_node_create(args.cxt_id, args.rid, args.port_map,resultHandler);
      }
    }

    public static class bm_mc_node_associate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mc_node_associate_args, Void> {
      public bm_mc_node_associate() {
        super("bm_mc_node_associate");
      }

      public bm_mc_node_associate_args getEmptyArgsInstance() {
        return new bm_mc_node_associate_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mc_node_associate_result result = new bm_mc_node_associate_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mc_node_associate_result result = new bm_mc_node_associate_result();
            if (e instanceof InvalidMcOperation) {
                        result.ouch = (InvalidMcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mc_node_associate_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mc_node_associate(args.cxt_id, args.mgrp_handle, args.l1_handle,resultHandler);
      }
    }

    public static class bm_mc_node_dissociate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mc_node_dissociate_args, Void> {
      public bm_mc_node_dissociate() {
        super("bm_mc_node_dissociate");
      }

      public bm_mc_node_dissociate_args getEmptyArgsInstance() {
        return new bm_mc_node_dissociate_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mc_node_dissociate_result result = new bm_mc_node_dissociate_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mc_node_dissociate_result result = new bm_mc_node_dissociate_result();
            if (e instanceof InvalidMcOperation) {
                        result.ouch = (InvalidMcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mc_node_dissociate_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mc_node_dissociate(args.cxt_id, args.mgrp_handle, args.l1_handle,resultHandler);
      }
    }

    public static class bm_mc_node_destroy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mc_node_destroy_args, Void> {
      public bm_mc_node_destroy() {
        super("bm_mc_node_destroy");
      }

      public bm_mc_node_destroy_args getEmptyArgsInstance() {
        return new bm_mc_node_destroy_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mc_node_destroy_result result = new bm_mc_node_destroy_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mc_node_destroy_result result = new bm_mc_node_destroy_result();
            if (e instanceof InvalidMcOperation) {
                        result.ouch = (InvalidMcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mc_node_destroy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mc_node_destroy(args.cxt_id, args.l1_handle,resultHandler);
      }
    }

    public static class bm_mc_node_update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bm_mc_node_update_args, Void> {
      public bm_mc_node_update() {
        super("bm_mc_node_update");
      }

      public bm_mc_node_update_args getEmptyArgsInstance() {
        return new bm_mc_node_update_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bm_mc_node_update_result result = new bm_mc_node_update_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bm_mc_node_update_result result = new bm_mc_node_update_result();
            if (e instanceof InvalidMcOperation) {
                        result.ouch = (InvalidMcOperation) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bm_mc_node_update_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bm_mc_node_update(args.cxt_id, args.l1_handle, args.port_map,resultHandler);
      }
    }

  }

  public static class bm_mc_mgrp_create_args implements org.apache.thrift.TBase<bm_mc_mgrp_create_args, bm_mc_mgrp_create_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_mgrp_create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_mgrp_create_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MGRP_FIELD_DESC = new org.apache.thrift.protocol.TField("mgrp", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_mgrp_create_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_mgrp_create_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int mgrp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      MGRP((short)2, "mgrp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // MGRP
            return MGRP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MGRP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MGRP, new org.apache.thrift.meta_data.FieldMetaData("mgrp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcMgrp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_mgrp_create_args.class, metaDataMap);
    }

    public bm_mc_mgrp_create_args() {
    }

    public bm_mc_mgrp_create_args(
      int cxt_id,
      int mgrp)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.mgrp = mgrp;
      setMgrpIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_mgrp_create_args(bm_mc_mgrp_create_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.mgrp = other.mgrp;
    }

    public bm_mc_mgrp_create_args deepCopy() {
      return new bm_mc_mgrp_create_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setMgrpIsSet(false);
      this.mgrp = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mc_mgrp_create_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getMgrp() {
      return this.mgrp;
    }

    public bm_mc_mgrp_create_args setMgrp(int mgrp) {
      this.mgrp = mgrp;
      setMgrpIsSet(true);
      return this;
    }

    public void unsetMgrp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MGRP_ISSET_ID);
    }

    /** Returns true if field mgrp is set (has been assigned a value) and false otherwise */
    public boolean isSetMgrp() {
      return EncodingUtils.testBit(__isset_bitfield, __MGRP_ISSET_ID);
    }

    public void setMgrpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MGRP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case MGRP:
        if (value == null) {
          unsetMgrp();
        } else {
          setMgrp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case MGRP:
        return getMgrp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case MGRP:
        return isSetMgrp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_mgrp_create_args)
        return this.equals((bm_mc_mgrp_create_args)that);
      return false;
    }

    public boolean equals(bm_mc_mgrp_create_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_mgrp = true;
      boolean that_present_mgrp = true;
      if (this_present_mgrp || that_present_mgrp) {
        if (!(this_present_mgrp && that_present_mgrp))
          return false;
        if (this.mgrp != that.mgrp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_mgrp = true;
      list.add(present_mgrp);
      if (present_mgrp)
        list.add(mgrp);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_mgrp_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMgrp()).compareTo(other.isSetMgrp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMgrp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mgrp, other.mgrp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_mgrp_create_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mgrp:");
      sb.append(this.mgrp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_mgrp_create_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mc_mgrp_create_argsStandardScheme getScheme() {
        return new bm_mc_mgrp_create_argsStandardScheme();
      }
    }

    private static class bm_mc_mgrp_create_argsStandardScheme extends StandardScheme<bm_mc_mgrp_create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_mgrp_create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MGRP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mgrp = iprot.readI32();
                struct.setMgrpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_mgrp_create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MGRP_FIELD_DESC);
        oprot.writeI32(struct.mgrp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_mgrp_create_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mc_mgrp_create_argsTupleScheme getScheme() {
        return new bm_mc_mgrp_create_argsTupleScheme();
      }
    }

    private static class bm_mc_mgrp_create_argsTupleScheme extends TupleScheme<bm_mc_mgrp_create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_mgrp_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetMgrp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetMgrp()) {
          oprot.writeI32(struct.mgrp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_mgrp_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mgrp = iprot.readI32();
          struct.setMgrpIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_mgrp_create_result implements org.apache.thrift.TBase<bm_mc_mgrp_create_result, bm_mc_mgrp_create_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_mgrp_create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_mgrp_create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_mgrp_create_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_mgrp_create_resultTupleSchemeFactory());
    }

    public int success; // required
    public InvalidMcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcMgrpHandle")));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_mgrp_create_result.class, metaDataMap);
    }

    public bm_mc_mgrp_create_result() {
    }

    public bm_mc_mgrp_create_result(
      int success,
      InvalidMcOperation ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_mgrp_create_result(bm_mc_mgrp_create_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new InvalidMcOperation(other.ouch);
      }
    }

    public bm_mc_mgrp_create_result deepCopy() {
      return new bm_mc_mgrp_create_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public bm_mc_mgrp_create_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidMcOperation getOuch() {
      return this.ouch;
    }

    public bm_mc_mgrp_create_result setOuch(InvalidMcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_mgrp_create_result)
        return this.equals((bm_mc_mgrp_create_result)that);
      return false;
    }

    public boolean equals(bm_mc_mgrp_create_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_mgrp_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_mgrp_create_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_mgrp_create_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mc_mgrp_create_resultStandardScheme getScheme() {
        return new bm_mc_mgrp_create_resultStandardScheme();
      }
    }

    private static class bm_mc_mgrp_create_resultStandardScheme extends StandardScheme<bm_mc_mgrp_create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_mgrp_create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_mgrp_create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_mgrp_create_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mc_mgrp_create_resultTupleScheme getScheme() {
        return new bm_mc_mgrp_create_resultTupleScheme();
      }
    }

    private static class bm_mc_mgrp_create_resultTupleScheme extends TupleScheme<bm_mc_mgrp_create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_mgrp_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_mgrp_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidMcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_mgrp_destroy_args implements org.apache.thrift.TBase<bm_mc_mgrp_destroy_args, bm_mc_mgrp_destroy_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_mgrp_destroy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_mgrp_destroy_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MGRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mgrp_handle", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_mgrp_destroy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_mgrp_destroy_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int mgrp_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      MGRP_HANDLE((short)2, "mgrp_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // MGRP_HANDLE
            return MGRP_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MGRP_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MGRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mgrp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcMgrpHandle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_mgrp_destroy_args.class, metaDataMap);
    }

    public bm_mc_mgrp_destroy_args() {
    }

    public bm_mc_mgrp_destroy_args(
      int cxt_id,
      int mgrp_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.mgrp_handle = mgrp_handle;
      setMgrp_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_mgrp_destroy_args(bm_mc_mgrp_destroy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.mgrp_handle = other.mgrp_handle;
    }

    public bm_mc_mgrp_destroy_args deepCopy() {
      return new bm_mc_mgrp_destroy_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setMgrp_handleIsSet(false);
      this.mgrp_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mc_mgrp_destroy_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getMgrp_handle() {
      return this.mgrp_handle;
    }

    public bm_mc_mgrp_destroy_args setMgrp_handle(int mgrp_handle) {
      this.mgrp_handle = mgrp_handle;
      setMgrp_handleIsSet(true);
      return this;
    }

    public void unsetMgrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field mgrp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMgrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID);
    }

    public void setMgrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case MGRP_HANDLE:
        if (value == null) {
          unsetMgrp_handle();
        } else {
          setMgrp_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case MGRP_HANDLE:
        return getMgrp_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case MGRP_HANDLE:
        return isSetMgrp_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_mgrp_destroy_args)
        return this.equals((bm_mc_mgrp_destroy_args)that);
      return false;
    }

    public boolean equals(bm_mc_mgrp_destroy_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_mgrp_handle = true;
      boolean that_present_mgrp_handle = true;
      if (this_present_mgrp_handle || that_present_mgrp_handle) {
        if (!(this_present_mgrp_handle && that_present_mgrp_handle))
          return false;
        if (this.mgrp_handle != that.mgrp_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_mgrp_handle = true;
      list.add(present_mgrp_handle);
      if (present_mgrp_handle)
        list.add(mgrp_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_mgrp_destroy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMgrp_handle()).compareTo(other.isSetMgrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMgrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mgrp_handle, other.mgrp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_mgrp_destroy_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mgrp_handle:");
      sb.append(this.mgrp_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_mgrp_destroy_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mc_mgrp_destroy_argsStandardScheme getScheme() {
        return new bm_mc_mgrp_destroy_argsStandardScheme();
      }
    }

    private static class bm_mc_mgrp_destroy_argsStandardScheme extends StandardScheme<bm_mc_mgrp_destroy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_mgrp_destroy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MGRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mgrp_handle = iprot.readI32();
                struct.setMgrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_mgrp_destroy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MGRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mgrp_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_mgrp_destroy_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mc_mgrp_destroy_argsTupleScheme getScheme() {
        return new bm_mc_mgrp_destroy_argsTupleScheme();
      }
    }

    private static class bm_mc_mgrp_destroy_argsTupleScheme extends TupleScheme<bm_mc_mgrp_destroy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_mgrp_destroy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetMgrp_handle()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetMgrp_handle()) {
          oprot.writeI32(struct.mgrp_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_mgrp_destroy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mgrp_handle = iprot.readI32();
          struct.setMgrp_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_mgrp_destroy_result implements org.apache.thrift.TBase<bm_mc_mgrp_destroy_result, bm_mc_mgrp_destroy_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_mgrp_destroy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_mgrp_destroy_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_mgrp_destroy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_mgrp_destroy_resultTupleSchemeFactory());
    }

    public InvalidMcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_mgrp_destroy_result.class, metaDataMap);
    }

    public bm_mc_mgrp_destroy_result() {
    }

    public bm_mc_mgrp_destroy_result(
      InvalidMcOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_mgrp_destroy_result(bm_mc_mgrp_destroy_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidMcOperation(other.ouch);
      }
    }

    public bm_mc_mgrp_destroy_result deepCopy() {
      return new bm_mc_mgrp_destroy_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidMcOperation getOuch() {
      return this.ouch;
    }

    public bm_mc_mgrp_destroy_result setOuch(InvalidMcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_mgrp_destroy_result)
        return this.equals((bm_mc_mgrp_destroy_result)that);
      return false;
    }

    public boolean equals(bm_mc_mgrp_destroy_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_mgrp_destroy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_mgrp_destroy_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_mgrp_destroy_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mc_mgrp_destroy_resultStandardScheme getScheme() {
        return new bm_mc_mgrp_destroy_resultStandardScheme();
      }
    }

    private static class bm_mc_mgrp_destroy_resultStandardScheme extends StandardScheme<bm_mc_mgrp_destroy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_mgrp_destroy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_mgrp_destroy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_mgrp_destroy_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mc_mgrp_destroy_resultTupleScheme getScheme() {
        return new bm_mc_mgrp_destroy_resultTupleScheme();
      }
    }

    private static class bm_mc_mgrp_destroy_resultTupleScheme extends TupleScheme<bm_mc_mgrp_destroy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_mgrp_destroy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_mgrp_destroy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidMcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_create_args implements org.apache.thrift.TBase<bm_mc_node_create_args, bm_mc_node_create_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_create_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PORT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("port_map", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_create_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_create_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int rid; // required
    public String port_map; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      RID((short)2, "rid"),
      PORT_MAP((short)3, "port_map");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // RID
            return RID;
          case 3: // PORT_MAP
            return PORT_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __RID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcRid")));
      tmpMap.put(_Fields.PORT_MAP, new org.apache.thrift.meta_data.FieldMetaData("port_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "BmMcPortMap")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_create_args.class, metaDataMap);
    }

    public bm_mc_node_create_args() {
    }

    public bm_mc_node_create_args(
      int cxt_id,
      int rid,
      String port_map)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.rid = rid;
      setRidIsSet(true);
      this.port_map = port_map;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_create_args(bm_mc_node_create_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.rid = other.rid;
      if (other.isSetPort_map()) {
        this.port_map = other.port_map;
      }
    }

    public bm_mc_node_create_args deepCopy() {
      return new bm_mc_node_create_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setRidIsSet(false);
      this.rid = 0;
      this.port_map = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mc_node_create_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getRid() {
      return this.rid;
    }

    public bm_mc_node_create_args setRid(int rid) {
      this.rid = rid;
      setRidIsSet(true);
      return this;
    }

    public void unsetRid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RID_ISSET_ID);
    }

    /** Returns true if field rid is set (has been assigned a value) and false otherwise */
    public boolean isSetRid() {
      return EncodingUtils.testBit(__isset_bitfield, __RID_ISSET_ID);
    }

    public void setRidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RID_ISSET_ID, value);
    }

    public String getPort_map() {
      return this.port_map;
    }

    public bm_mc_node_create_args setPort_map(String port_map) {
      this.port_map = port_map;
      return this;
    }

    public void unsetPort_map() {
      this.port_map = null;
    }

    /** Returns true if field port_map is set (has been assigned a value) and false otherwise */
    public boolean isSetPort_map() {
      return this.port_map != null;
    }

    public void setPort_mapIsSet(boolean value) {
      if (!value) {
        this.port_map = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case RID:
        if (value == null) {
          unsetRid();
        } else {
          setRid((Integer)value);
        }
        break;

      case PORT_MAP:
        if (value == null) {
          unsetPort_map();
        } else {
          setPort_map((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case RID:
        return getRid();

      case PORT_MAP:
        return getPort_map();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case RID:
        return isSetRid();
      case PORT_MAP:
        return isSetPort_map();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_create_args)
        return this.equals((bm_mc_node_create_args)that);
      return false;
    }

    public boolean equals(bm_mc_node_create_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_rid = true;
      boolean that_present_rid = true;
      if (this_present_rid || that_present_rid) {
        if (!(this_present_rid && that_present_rid))
          return false;
        if (this.rid != that.rid)
          return false;
      }

      boolean this_present_port_map = true && this.isSetPort_map();
      boolean that_present_port_map = true && that.isSetPort_map();
      if (this_present_port_map || that_present_port_map) {
        if (!(this_present_port_map && that_present_port_map))
          return false;
        if (!this.port_map.equals(that.port_map))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_rid = true;
      list.add(present_rid);
      if (present_rid)
        list.add(rid);

      boolean present_port_map = true && (isSetPort_map());
      list.add(present_port_map);
      if (present_port_map)
        list.add(port_map);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort_map()).compareTo(other.isSetPort_map());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort_map()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_map, other.port_map);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_create_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rid:");
      sb.append(this.rid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("port_map:");
      if (this.port_map == null) {
        sb.append("null");
      } else {
        sb.append(this.port_map);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_create_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_create_argsStandardScheme getScheme() {
        return new bm_mc_node_create_argsStandardScheme();
      }
    }

    private static class bm_mc_node_create_argsStandardScheme extends StandardScheme<bm_mc_node_create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rid = iprot.readI32();
                struct.setRidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORT_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.port_map = iprot.readString();
                struct.setPort_mapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RID_FIELD_DESC);
        oprot.writeI32(struct.rid);
        oprot.writeFieldEnd();
        if (struct.port_map != null) {
          oprot.writeFieldBegin(PORT_MAP_FIELD_DESC);
          oprot.writeString(struct.port_map);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_create_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_create_argsTupleScheme getScheme() {
        return new bm_mc_node_create_argsTupleScheme();
      }
    }

    private static class bm_mc_node_create_argsTupleScheme extends TupleScheme<bm_mc_node_create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetRid()) {
          optionals.set(1);
        }
        if (struct.isSetPort_map()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetRid()) {
          oprot.writeI32(struct.rid);
        }
        if (struct.isSetPort_map()) {
          oprot.writeString(struct.port_map);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rid = iprot.readI32();
          struct.setRidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.port_map = iprot.readString();
          struct.setPort_mapIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_create_result implements org.apache.thrift.TBase<bm_mc_node_create_result, bm_mc_node_create_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_create_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_create_resultTupleSchemeFactory());
    }

    public int success; // required
    public InvalidMcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcL1Handle")));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_create_result.class, metaDataMap);
    }

    public bm_mc_node_create_result() {
    }

    public bm_mc_node_create_result(
      int success,
      InvalidMcOperation ouch)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_create_result(bm_mc_node_create_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOuch()) {
        this.ouch = new InvalidMcOperation(other.ouch);
      }
    }

    public bm_mc_node_create_result deepCopy() {
      return new bm_mc_node_create_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ouch = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public bm_mc_node_create_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidMcOperation getOuch() {
      return this.ouch;
    }

    public bm_mc_node_create_result setOuch(InvalidMcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_create_result)
        return this.equals((bm_mc_node_create_result)that);
      return false;
    }

    public boolean equals(bm_mc_node_create_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_create_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_create_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_create_resultStandardScheme getScheme() {
        return new bm_mc_node_create_resultStandardScheme();
      }
    }

    private static class bm_mc_node_create_resultStandardScheme extends StandardScheme<bm_mc_node_create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_create_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_create_resultTupleScheme getScheme() {
        return new bm_mc_node_create_resultTupleScheme();
      }
    }

    private static class bm_mc_node_create_resultTupleScheme extends TupleScheme<bm_mc_node_create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new InvalidMcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_associate_args implements org.apache.thrift.TBase<bm_mc_node_associate_args, bm_mc_node_associate_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_associate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_associate_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MGRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mgrp_handle", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField L1_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("l1_handle", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_associate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_associate_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int mgrp_handle; // required
    public int l1_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      MGRP_HANDLE((short)2, "mgrp_handle"),
      L1_HANDLE((short)3, "l1_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // MGRP_HANDLE
            return MGRP_HANDLE;
          case 3: // L1_HANDLE
            return L1_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MGRP_HANDLE_ISSET_ID = 1;
    private static final int __L1_HANDLE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MGRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mgrp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcMgrpHandle")));
      tmpMap.put(_Fields.L1_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("l1_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcL1Handle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_associate_args.class, metaDataMap);
    }

    public bm_mc_node_associate_args() {
    }

    public bm_mc_node_associate_args(
      int cxt_id,
      int mgrp_handle,
      int l1_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.mgrp_handle = mgrp_handle;
      setMgrp_handleIsSet(true);
      this.l1_handle = l1_handle;
      setL1_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_associate_args(bm_mc_node_associate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.mgrp_handle = other.mgrp_handle;
      this.l1_handle = other.l1_handle;
    }

    public bm_mc_node_associate_args deepCopy() {
      return new bm_mc_node_associate_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setMgrp_handleIsSet(false);
      this.mgrp_handle = 0;
      setL1_handleIsSet(false);
      this.l1_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mc_node_associate_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getMgrp_handle() {
      return this.mgrp_handle;
    }

    public bm_mc_node_associate_args setMgrp_handle(int mgrp_handle) {
      this.mgrp_handle = mgrp_handle;
      setMgrp_handleIsSet(true);
      return this;
    }

    public void unsetMgrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field mgrp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMgrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID);
    }

    public void setMgrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID, value);
    }

    public int getL1_handle() {
      return this.l1_handle;
    }

    public bm_mc_node_associate_args setL1_handle(int l1_handle) {
      this.l1_handle = l1_handle;
      setL1_handleIsSet(true);
      return this;
    }

    public void unsetL1_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __L1_HANDLE_ISSET_ID);
    }

    /** Returns true if field l1_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetL1_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __L1_HANDLE_ISSET_ID);
    }

    public void setL1_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __L1_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case MGRP_HANDLE:
        if (value == null) {
          unsetMgrp_handle();
        } else {
          setMgrp_handle((Integer)value);
        }
        break;

      case L1_HANDLE:
        if (value == null) {
          unsetL1_handle();
        } else {
          setL1_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case MGRP_HANDLE:
        return getMgrp_handle();

      case L1_HANDLE:
        return getL1_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case MGRP_HANDLE:
        return isSetMgrp_handle();
      case L1_HANDLE:
        return isSetL1_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_associate_args)
        return this.equals((bm_mc_node_associate_args)that);
      return false;
    }

    public boolean equals(bm_mc_node_associate_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_mgrp_handle = true;
      boolean that_present_mgrp_handle = true;
      if (this_present_mgrp_handle || that_present_mgrp_handle) {
        if (!(this_present_mgrp_handle && that_present_mgrp_handle))
          return false;
        if (this.mgrp_handle != that.mgrp_handle)
          return false;
      }

      boolean this_present_l1_handle = true;
      boolean that_present_l1_handle = true;
      if (this_present_l1_handle || that_present_l1_handle) {
        if (!(this_present_l1_handle && that_present_l1_handle))
          return false;
        if (this.l1_handle != that.l1_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_mgrp_handle = true;
      list.add(present_mgrp_handle);
      if (present_mgrp_handle)
        list.add(mgrp_handle);

      boolean present_l1_handle = true;
      list.add(present_l1_handle);
      if (present_l1_handle)
        list.add(l1_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_associate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMgrp_handle()).compareTo(other.isSetMgrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMgrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mgrp_handle, other.mgrp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetL1_handle()).compareTo(other.isSetL1_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetL1_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l1_handle, other.l1_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_associate_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mgrp_handle:");
      sb.append(this.mgrp_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("l1_handle:");
      sb.append(this.l1_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_associate_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_associate_argsStandardScheme getScheme() {
        return new bm_mc_node_associate_argsStandardScheme();
      }
    }

    private static class bm_mc_node_associate_argsStandardScheme extends StandardScheme<bm_mc_node_associate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_associate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MGRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mgrp_handle = iprot.readI32();
                struct.setMgrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // L1_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.l1_handle = iprot.readI32();
                struct.setL1_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_associate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MGRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mgrp_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(L1_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.l1_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_associate_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_associate_argsTupleScheme getScheme() {
        return new bm_mc_node_associate_argsTupleScheme();
      }
    }

    private static class bm_mc_node_associate_argsTupleScheme extends TupleScheme<bm_mc_node_associate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_associate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetMgrp_handle()) {
          optionals.set(1);
        }
        if (struct.isSetL1_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetMgrp_handle()) {
          oprot.writeI32(struct.mgrp_handle);
        }
        if (struct.isSetL1_handle()) {
          oprot.writeI32(struct.l1_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_associate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mgrp_handle = iprot.readI32();
          struct.setMgrp_handleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.l1_handle = iprot.readI32();
          struct.setL1_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_associate_result implements org.apache.thrift.TBase<bm_mc_node_associate_result, bm_mc_node_associate_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_associate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_associate_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_associate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_associate_resultTupleSchemeFactory());
    }

    public InvalidMcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_associate_result.class, metaDataMap);
    }

    public bm_mc_node_associate_result() {
    }

    public bm_mc_node_associate_result(
      InvalidMcOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_associate_result(bm_mc_node_associate_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidMcOperation(other.ouch);
      }
    }

    public bm_mc_node_associate_result deepCopy() {
      return new bm_mc_node_associate_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidMcOperation getOuch() {
      return this.ouch;
    }

    public bm_mc_node_associate_result setOuch(InvalidMcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_associate_result)
        return this.equals((bm_mc_node_associate_result)that);
      return false;
    }

    public boolean equals(bm_mc_node_associate_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_associate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_associate_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_associate_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_associate_resultStandardScheme getScheme() {
        return new bm_mc_node_associate_resultStandardScheme();
      }
    }

    private static class bm_mc_node_associate_resultStandardScheme extends StandardScheme<bm_mc_node_associate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_associate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_associate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_associate_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_associate_resultTupleScheme getScheme() {
        return new bm_mc_node_associate_resultTupleScheme();
      }
    }

    private static class bm_mc_node_associate_resultTupleScheme extends TupleScheme<bm_mc_node_associate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_associate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_associate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidMcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_dissociate_args implements org.apache.thrift.TBase<bm_mc_node_dissociate_args, bm_mc_node_dissociate_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_dissociate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_dissociate_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MGRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mgrp_handle", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField L1_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("l1_handle", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_dissociate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_dissociate_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int mgrp_handle; // required
    public int l1_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      MGRP_HANDLE((short)2, "mgrp_handle"),
      L1_HANDLE((short)3, "l1_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // MGRP_HANDLE
            return MGRP_HANDLE;
          case 3: // L1_HANDLE
            return L1_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __MGRP_HANDLE_ISSET_ID = 1;
    private static final int __L1_HANDLE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MGRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("mgrp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcMgrpHandle")));
      tmpMap.put(_Fields.L1_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("l1_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcL1Handle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_dissociate_args.class, metaDataMap);
    }

    public bm_mc_node_dissociate_args() {
    }

    public bm_mc_node_dissociate_args(
      int cxt_id,
      int mgrp_handle,
      int l1_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.mgrp_handle = mgrp_handle;
      setMgrp_handleIsSet(true);
      this.l1_handle = l1_handle;
      setL1_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_dissociate_args(bm_mc_node_dissociate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.mgrp_handle = other.mgrp_handle;
      this.l1_handle = other.l1_handle;
    }

    public bm_mc_node_dissociate_args deepCopy() {
      return new bm_mc_node_dissociate_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setMgrp_handleIsSet(false);
      this.mgrp_handle = 0;
      setL1_handleIsSet(false);
      this.l1_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mc_node_dissociate_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getMgrp_handle() {
      return this.mgrp_handle;
    }

    public bm_mc_node_dissociate_args setMgrp_handle(int mgrp_handle) {
      this.mgrp_handle = mgrp_handle;
      setMgrp_handleIsSet(true);
      return this;
    }

    public void unsetMgrp_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID);
    }

    /** Returns true if field mgrp_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetMgrp_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID);
    }

    public void setMgrp_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MGRP_HANDLE_ISSET_ID, value);
    }

    public int getL1_handle() {
      return this.l1_handle;
    }

    public bm_mc_node_dissociate_args setL1_handle(int l1_handle) {
      this.l1_handle = l1_handle;
      setL1_handleIsSet(true);
      return this;
    }

    public void unsetL1_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __L1_HANDLE_ISSET_ID);
    }

    /** Returns true if field l1_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetL1_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __L1_HANDLE_ISSET_ID);
    }

    public void setL1_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __L1_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case MGRP_HANDLE:
        if (value == null) {
          unsetMgrp_handle();
        } else {
          setMgrp_handle((Integer)value);
        }
        break;

      case L1_HANDLE:
        if (value == null) {
          unsetL1_handle();
        } else {
          setL1_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case MGRP_HANDLE:
        return getMgrp_handle();

      case L1_HANDLE:
        return getL1_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case MGRP_HANDLE:
        return isSetMgrp_handle();
      case L1_HANDLE:
        return isSetL1_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_dissociate_args)
        return this.equals((bm_mc_node_dissociate_args)that);
      return false;
    }

    public boolean equals(bm_mc_node_dissociate_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_mgrp_handle = true;
      boolean that_present_mgrp_handle = true;
      if (this_present_mgrp_handle || that_present_mgrp_handle) {
        if (!(this_present_mgrp_handle && that_present_mgrp_handle))
          return false;
        if (this.mgrp_handle != that.mgrp_handle)
          return false;
      }

      boolean this_present_l1_handle = true;
      boolean that_present_l1_handle = true;
      if (this_present_l1_handle || that_present_l1_handle) {
        if (!(this_present_l1_handle && that_present_l1_handle))
          return false;
        if (this.l1_handle != that.l1_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_mgrp_handle = true;
      list.add(present_mgrp_handle);
      if (present_mgrp_handle)
        list.add(mgrp_handle);

      boolean present_l1_handle = true;
      list.add(present_l1_handle);
      if (present_l1_handle)
        list.add(l1_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_dissociate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMgrp_handle()).compareTo(other.isSetMgrp_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMgrp_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mgrp_handle, other.mgrp_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetL1_handle()).compareTo(other.isSetL1_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetL1_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l1_handle, other.l1_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_dissociate_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mgrp_handle:");
      sb.append(this.mgrp_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("l1_handle:");
      sb.append(this.l1_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_dissociate_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_dissociate_argsStandardScheme getScheme() {
        return new bm_mc_node_dissociate_argsStandardScheme();
      }
    }

    private static class bm_mc_node_dissociate_argsStandardScheme extends StandardScheme<bm_mc_node_dissociate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_dissociate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MGRP_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mgrp_handle = iprot.readI32();
                struct.setMgrp_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // L1_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.l1_handle = iprot.readI32();
                struct.setL1_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_dissociate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MGRP_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.mgrp_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(L1_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.l1_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_dissociate_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_dissociate_argsTupleScheme getScheme() {
        return new bm_mc_node_dissociate_argsTupleScheme();
      }
    }

    private static class bm_mc_node_dissociate_argsTupleScheme extends TupleScheme<bm_mc_node_dissociate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_dissociate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetMgrp_handle()) {
          optionals.set(1);
        }
        if (struct.isSetL1_handle()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetMgrp_handle()) {
          oprot.writeI32(struct.mgrp_handle);
        }
        if (struct.isSetL1_handle()) {
          oprot.writeI32(struct.l1_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_dissociate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mgrp_handle = iprot.readI32();
          struct.setMgrp_handleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.l1_handle = iprot.readI32();
          struct.setL1_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_dissociate_result implements org.apache.thrift.TBase<bm_mc_node_dissociate_result, bm_mc_node_dissociate_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_dissociate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_dissociate_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_dissociate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_dissociate_resultTupleSchemeFactory());
    }

    public InvalidMcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_dissociate_result.class, metaDataMap);
    }

    public bm_mc_node_dissociate_result() {
    }

    public bm_mc_node_dissociate_result(
      InvalidMcOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_dissociate_result(bm_mc_node_dissociate_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidMcOperation(other.ouch);
      }
    }

    public bm_mc_node_dissociate_result deepCopy() {
      return new bm_mc_node_dissociate_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidMcOperation getOuch() {
      return this.ouch;
    }

    public bm_mc_node_dissociate_result setOuch(InvalidMcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_dissociate_result)
        return this.equals((bm_mc_node_dissociate_result)that);
      return false;
    }

    public boolean equals(bm_mc_node_dissociate_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_dissociate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_dissociate_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_dissociate_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_dissociate_resultStandardScheme getScheme() {
        return new bm_mc_node_dissociate_resultStandardScheme();
      }
    }

    private static class bm_mc_node_dissociate_resultStandardScheme extends StandardScheme<bm_mc_node_dissociate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_dissociate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_dissociate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_dissociate_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_dissociate_resultTupleScheme getScheme() {
        return new bm_mc_node_dissociate_resultTupleScheme();
      }
    }

    private static class bm_mc_node_dissociate_resultTupleScheme extends TupleScheme<bm_mc_node_dissociate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_dissociate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_dissociate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidMcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_destroy_args implements org.apache.thrift.TBase<bm_mc_node_destroy_args, bm_mc_node_destroy_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_destroy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_destroy_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField L1_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("l1_handle", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_destroy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_destroy_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int l1_handle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      L1_HANDLE((short)2, "l1_handle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // L1_HANDLE
            return L1_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __L1_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.L1_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("l1_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcL1Handle")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_destroy_args.class, metaDataMap);
    }

    public bm_mc_node_destroy_args() {
    }

    public bm_mc_node_destroy_args(
      int cxt_id,
      int l1_handle)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.l1_handle = l1_handle;
      setL1_handleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_destroy_args(bm_mc_node_destroy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.l1_handle = other.l1_handle;
    }

    public bm_mc_node_destroy_args deepCopy() {
      return new bm_mc_node_destroy_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setL1_handleIsSet(false);
      this.l1_handle = 0;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mc_node_destroy_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getL1_handle() {
      return this.l1_handle;
    }

    public bm_mc_node_destroy_args setL1_handle(int l1_handle) {
      this.l1_handle = l1_handle;
      setL1_handleIsSet(true);
      return this;
    }

    public void unsetL1_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __L1_HANDLE_ISSET_ID);
    }

    /** Returns true if field l1_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetL1_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __L1_HANDLE_ISSET_ID);
    }

    public void setL1_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __L1_HANDLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case L1_HANDLE:
        if (value == null) {
          unsetL1_handle();
        } else {
          setL1_handle((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case L1_HANDLE:
        return getL1_handle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case L1_HANDLE:
        return isSetL1_handle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_destroy_args)
        return this.equals((bm_mc_node_destroy_args)that);
      return false;
    }

    public boolean equals(bm_mc_node_destroy_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_l1_handle = true;
      boolean that_present_l1_handle = true;
      if (this_present_l1_handle || that_present_l1_handle) {
        if (!(this_present_l1_handle && that_present_l1_handle))
          return false;
        if (this.l1_handle != that.l1_handle)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_l1_handle = true;
      list.add(present_l1_handle);
      if (present_l1_handle)
        list.add(l1_handle);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_destroy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetL1_handle()).compareTo(other.isSetL1_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetL1_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l1_handle, other.l1_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_destroy_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("l1_handle:");
      sb.append(this.l1_handle);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_destroy_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_destroy_argsStandardScheme getScheme() {
        return new bm_mc_node_destroy_argsStandardScheme();
      }
    }

    private static class bm_mc_node_destroy_argsStandardScheme extends StandardScheme<bm_mc_node_destroy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_destroy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // L1_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.l1_handle = iprot.readI32();
                struct.setL1_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_destroy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(L1_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.l1_handle);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_destroy_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_destroy_argsTupleScheme getScheme() {
        return new bm_mc_node_destroy_argsTupleScheme();
      }
    }

    private static class bm_mc_node_destroy_argsTupleScheme extends TupleScheme<bm_mc_node_destroy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_destroy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetL1_handle()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetL1_handle()) {
          oprot.writeI32(struct.l1_handle);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_destroy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.l1_handle = iprot.readI32();
          struct.setL1_handleIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_destroy_result implements org.apache.thrift.TBase<bm_mc_node_destroy_result, bm_mc_node_destroy_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_destroy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_destroy_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_destroy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_destroy_resultTupleSchemeFactory());
    }

    public InvalidMcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_destroy_result.class, metaDataMap);
    }

    public bm_mc_node_destroy_result() {
    }

    public bm_mc_node_destroy_result(
      InvalidMcOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_destroy_result(bm_mc_node_destroy_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidMcOperation(other.ouch);
      }
    }

    public bm_mc_node_destroy_result deepCopy() {
      return new bm_mc_node_destroy_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidMcOperation getOuch() {
      return this.ouch;
    }

    public bm_mc_node_destroy_result setOuch(InvalidMcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_destroy_result)
        return this.equals((bm_mc_node_destroy_result)that);
      return false;
    }

    public boolean equals(bm_mc_node_destroy_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_destroy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_destroy_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_destroy_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_destroy_resultStandardScheme getScheme() {
        return new bm_mc_node_destroy_resultStandardScheme();
      }
    }

    private static class bm_mc_node_destroy_resultStandardScheme extends StandardScheme<bm_mc_node_destroy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_destroy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_destroy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_destroy_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_destroy_resultTupleScheme getScheme() {
        return new bm_mc_node_destroy_resultTupleScheme();
      }
    }

    private static class bm_mc_node_destroy_resultTupleScheme extends TupleScheme<bm_mc_node_destroy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_destroy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_destroy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidMcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_update_args implements org.apache.thrift.TBase<bm_mc_node_update_args, bm_mc_node_update_args._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_update_args");

    private static final org.apache.thrift.protocol.TField CXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cxt_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField L1_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("l1_handle", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PORT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("port_map", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_update_argsTupleSchemeFactory());
    }

    public int cxt_id; // required
    public int l1_handle; // required
    public String port_map; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CXT_ID((short)1, "cxt_id"),
      L1_HANDLE((short)2, "l1_handle"),
      PORT_MAP((short)3, "port_map");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CXT_ID
            return CXT_ID;
          case 2: // L1_HANDLE
            return L1_HANDLE;
          case 3: // PORT_MAP
            return PORT_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CXT_ID_ISSET_ID = 0;
    private static final int __L1_HANDLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CXT_ID, new org.apache.thrift.meta_data.FieldMetaData("cxt_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.L1_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("l1_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "BmMcL1Handle")));
      tmpMap.put(_Fields.PORT_MAP, new org.apache.thrift.meta_data.FieldMetaData("port_map", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "BmMcPortMap")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_update_args.class, metaDataMap);
    }

    public bm_mc_node_update_args() {
    }

    public bm_mc_node_update_args(
      int cxt_id,
      int l1_handle,
      String port_map)
    {
      this();
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      this.l1_handle = l1_handle;
      setL1_handleIsSet(true);
      this.port_map = port_map;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_update_args(bm_mc_node_update_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cxt_id = other.cxt_id;
      this.l1_handle = other.l1_handle;
      if (other.isSetPort_map()) {
        this.port_map = other.port_map;
      }
    }

    public bm_mc_node_update_args deepCopy() {
      return new bm_mc_node_update_args(this);
    }

    @Override
    public void clear() {
      setCxt_idIsSet(false);
      this.cxt_id = 0;
      setL1_handleIsSet(false);
      this.l1_handle = 0;
      this.port_map = null;
    }

    public int getCxt_id() {
      return this.cxt_id;
    }

    public bm_mc_node_update_args setCxt_id(int cxt_id) {
      this.cxt_id = cxt_id;
      setCxt_idIsSet(true);
      return this;
    }

    public void unsetCxt_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    /** Returns true if field cxt_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCxt_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CXT_ID_ISSET_ID);
    }

    public void setCxt_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CXT_ID_ISSET_ID, value);
    }

    public int getL1_handle() {
      return this.l1_handle;
    }

    public bm_mc_node_update_args setL1_handle(int l1_handle) {
      this.l1_handle = l1_handle;
      setL1_handleIsSet(true);
      return this;
    }

    public void unsetL1_handle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __L1_HANDLE_ISSET_ID);
    }

    /** Returns true if field l1_handle is set (has been assigned a value) and false otherwise */
    public boolean isSetL1_handle() {
      return EncodingUtils.testBit(__isset_bitfield, __L1_HANDLE_ISSET_ID);
    }

    public void setL1_handleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __L1_HANDLE_ISSET_ID, value);
    }

    public String getPort_map() {
      return this.port_map;
    }

    public bm_mc_node_update_args setPort_map(String port_map) {
      this.port_map = port_map;
      return this;
    }

    public void unsetPort_map() {
      this.port_map = null;
    }

    /** Returns true if field port_map is set (has been assigned a value) and false otherwise */
    public boolean isSetPort_map() {
      return this.port_map != null;
    }

    public void setPort_mapIsSet(boolean value) {
      if (!value) {
        this.port_map = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CXT_ID:
        if (value == null) {
          unsetCxt_id();
        } else {
          setCxt_id((Integer)value);
        }
        break;

      case L1_HANDLE:
        if (value == null) {
          unsetL1_handle();
        } else {
          setL1_handle((Integer)value);
        }
        break;

      case PORT_MAP:
        if (value == null) {
          unsetPort_map();
        } else {
          setPort_map((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CXT_ID:
        return getCxt_id();

      case L1_HANDLE:
        return getL1_handle();

      case PORT_MAP:
        return getPort_map();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CXT_ID:
        return isSetCxt_id();
      case L1_HANDLE:
        return isSetL1_handle();
      case PORT_MAP:
        return isSetPort_map();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_update_args)
        return this.equals((bm_mc_node_update_args)that);
      return false;
    }

    public boolean equals(bm_mc_node_update_args that) {
      if (that == null)
        return false;

      boolean this_present_cxt_id = true;
      boolean that_present_cxt_id = true;
      if (this_present_cxt_id || that_present_cxt_id) {
        if (!(this_present_cxt_id && that_present_cxt_id))
          return false;
        if (this.cxt_id != that.cxt_id)
          return false;
      }

      boolean this_present_l1_handle = true;
      boolean that_present_l1_handle = true;
      if (this_present_l1_handle || that_present_l1_handle) {
        if (!(this_present_l1_handle && that_present_l1_handle))
          return false;
        if (this.l1_handle != that.l1_handle)
          return false;
      }

      boolean this_present_port_map = true && this.isSetPort_map();
      boolean that_present_port_map = true && that.isSetPort_map();
      if (this_present_port_map || that_present_port_map) {
        if (!(this_present_port_map && that_present_port_map))
          return false;
        if (!this.port_map.equals(that.port_map))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cxt_id = true;
      list.add(present_cxt_id);
      if (present_cxt_id)
        list.add(cxt_id);

      boolean present_l1_handle = true;
      list.add(present_l1_handle);
      if (present_l1_handle)
        list.add(l1_handle);

      boolean present_port_map = true && (isSetPort_map());
      list.add(present_port_map);
      if (present_port_map)
        list.add(port_map);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCxt_id()).compareTo(other.isSetCxt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCxt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cxt_id, other.cxt_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetL1_handle()).compareTo(other.isSetL1_handle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetL1_handle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l1_handle, other.l1_handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort_map()).compareTo(other.isSetPort_map());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort_map()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_map, other.port_map);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_update_args(");
      boolean first = true;

      sb.append("cxt_id:");
      sb.append(this.cxt_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("l1_handle:");
      sb.append(this.l1_handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("port_map:");
      if (this.port_map == null) {
        sb.append("null");
      } else {
        sb.append(this.port_map);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_update_argsStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_update_argsStandardScheme getScheme() {
        return new bm_mc_node_update_argsStandardScheme();
      }
    }

    private static class bm_mc_node_update_argsStandardScheme extends StandardScheme<bm_mc_node_update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CXT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cxt_id = iprot.readI32();
                struct.setCxt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // L1_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.l1_handle = iprot.readI32();
                struct.setL1_handleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORT_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.port_map = iprot.readString();
                struct.setPort_mapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CXT_ID_FIELD_DESC);
        oprot.writeI32(struct.cxt_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(L1_HANDLE_FIELD_DESC);
        oprot.writeI32(struct.l1_handle);
        oprot.writeFieldEnd();
        if (struct.port_map != null) {
          oprot.writeFieldBegin(PORT_MAP_FIELD_DESC);
          oprot.writeString(struct.port_map);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_update_argsTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_update_argsTupleScheme getScheme() {
        return new bm_mc_node_update_argsTupleScheme();
      }
    }

    private static class bm_mc_node_update_argsTupleScheme extends TupleScheme<bm_mc_node_update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCxt_id()) {
          optionals.set(0);
        }
        if (struct.isSetL1_handle()) {
          optionals.set(1);
        }
        if (struct.isSetPort_map()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCxt_id()) {
          oprot.writeI32(struct.cxt_id);
        }
        if (struct.isSetL1_handle()) {
          oprot.writeI32(struct.l1_handle);
        }
        if (struct.isSetPort_map()) {
          oprot.writeString(struct.port_map);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cxt_id = iprot.readI32();
          struct.setCxt_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.l1_handle = iprot.readI32();
          struct.setL1_handleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.port_map = iprot.readString();
          struct.setPort_mapIsSet(true);
        }
      }
    }

  }

  public static class bm_mc_node_update_result implements org.apache.thrift.TBase<bm_mc_node_update_result, bm_mc_node_update_result._Fields>, java.io.Serializable, Cloneable, Comparable<bm_mc_node_update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bm_mc_node_update_result");

    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bm_mc_node_update_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bm_mc_node_update_resultTupleSchemeFactory());
    }

    public InvalidMcOperation ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bm_mc_node_update_result.class, metaDataMap);
    }

    public bm_mc_node_update_result() {
    }

    public bm_mc_node_update_result(
      InvalidMcOperation ouch)
    {
      this();
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bm_mc_node_update_result(bm_mc_node_update_result other) {
      if (other.isSetOuch()) {
        this.ouch = new InvalidMcOperation(other.ouch);
      }
    }

    public bm_mc_node_update_result deepCopy() {
      return new bm_mc_node_update_result(this);
    }

    @Override
    public void clear() {
      this.ouch = null;
    }

    public InvalidMcOperation getOuch() {
      return this.ouch;
    }

    public bm_mc_node_update_result setOuch(InvalidMcOperation ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((InvalidMcOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bm_mc_node_update_result)
        return this.equals((bm_mc_node_update_result)that);
      return false;
    }

    public boolean equals(bm_mc_node_update_result that) {
      if (that == null)
        return false;

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(bm_mc_node_update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bm_mc_node_update_result(");
      boolean first = true;

      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bm_mc_node_update_resultStandardSchemeFactory implements SchemeFactory {
      public bm_mc_node_update_resultStandardScheme getScheme() {
        return new bm_mc_node_update_resultStandardScheme();
      }
    }

    private static class bm_mc_node_update_resultStandardScheme extends StandardScheme<bm_mc_node_update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bm_mc_node_update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new InvalidMcOperation();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bm_mc_node_update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bm_mc_node_update_resultTupleSchemeFactory implements SchemeFactory {
      public bm_mc_node_update_resultTupleScheme getScheme() {
        return new bm_mc_node_update_resultTupleScheme();
      }
    }

    private static class bm_mc_node_update_resultTupleScheme extends TupleScheme<bm_mc_node_update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOuch()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bm_mc_node_update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ouch = new InvalidMcOperation();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

}
