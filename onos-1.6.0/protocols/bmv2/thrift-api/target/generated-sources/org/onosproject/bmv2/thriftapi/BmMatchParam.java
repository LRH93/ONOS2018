/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.onosproject.bmv2.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-14")
public class BmMatchParam implements org.apache.thrift.TBase<BmMatchParam, BmMatchParam._Fields>, java.io.Serializable, Cloneable, Comparable<BmMatchParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BmMatchParam");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXACT_FIELD_DESC = new org.apache.thrift.protocol.TField("exact", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LPM_FIELD_DESC = new org.apache.thrift.protocol.TField("lpm", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TERNARY_FIELD_DESC = new org.apache.thrift.protocol.TField("ternary", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BmMatchParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BmMatchParamTupleSchemeFactory());
  }

  /**
   * 
   * @see BmMatchParamType
   */
  public BmMatchParamType type; // required
  public BmMatchParamExact exact; // optional
  public BmMatchParamLPM lpm; // optional
  public BmMatchParamTernary ternary; // optional
  public BmMatchParamValid valid; // optional
  public BmMatchParamRange range; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see BmMatchParamType
     */
    TYPE((short)1, "type"),
    EXACT((short)2, "exact"),
    LPM((short)3, "lpm"),
    TERNARY((short)4, "ternary"),
    VALID((short)5, "valid"),
    RANGE((short)6, "range");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // EXACT
          return EXACT;
        case 3: // LPM
          return LPM;
        case 4: // TERNARY
          return TERNARY;
        case 5: // VALID
          return VALID;
        case 6: // RANGE
          return RANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.EXACT,_Fields.LPM,_Fields.TERNARY,_Fields.VALID,_Fields.RANGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BmMatchParamType.class)));
    tmpMap.put(_Fields.EXACT, new org.apache.thrift.meta_data.FieldMetaData("exact", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMatchParamExact.class)));
    tmpMap.put(_Fields.LPM, new org.apache.thrift.meta_data.FieldMetaData("lpm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMatchParamLPM.class)));
    tmpMap.put(_Fields.TERNARY, new org.apache.thrift.meta_data.FieldMetaData("ternary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMatchParamTernary.class)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMatchParamValid.class)));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmMatchParamRange.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BmMatchParam.class, metaDataMap);
  }

  public BmMatchParam() {
  }

  public BmMatchParam(
    BmMatchParamType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BmMatchParam(BmMatchParam other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetExact()) {
      this.exact = new BmMatchParamExact(other.exact);
    }
    if (other.isSetLpm()) {
      this.lpm = new BmMatchParamLPM(other.lpm);
    }
    if (other.isSetTernary()) {
      this.ternary = new BmMatchParamTernary(other.ternary);
    }
    if (other.isSetValid()) {
      this.valid = new BmMatchParamValid(other.valid);
    }
    if (other.isSetRange()) {
      this.range = new BmMatchParamRange(other.range);
    }
  }

  public BmMatchParam deepCopy() {
    return new BmMatchParam(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.exact = null;
    this.lpm = null;
    this.ternary = null;
    this.valid = null;
    this.range = null;
  }

  /**
   * 
   * @see BmMatchParamType
   */
  public BmMatchParamType getType() {
    return this.type;
  }

  /**
   * 
   * @see BmMatchParamType
   */
  public BmMatchParam setType(BmMatchParamType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public BmMatchParamExact getExact() {
    return this.exact;
  }

  public BmMatchParam setExact(BmMatchParamExact exact) {
    this.exact = exact;
    return this;
  }

  public void unsetExact() {
    this.exact = null;
  }

  /** Returns true if field exact is set (has been assigned a value) and false otherwise */
  public boolean isSetExact() {
    return this.exact != null;
  }

  public void setExactIsSet(boolean value) {
    if (!value) {
      this.exact = null;
    }
  }

  public BmMatchParamLPM getLpm() {
    return this.lpm;
  }

  public BmMatchParam setLpm(BmMatchParamLPM lpm) {
    this.lpm = lpm;
    return this;
  }

  public void unsetLpm() {
    this.lpm = null;
  }

  /** Returns true if field lpm is set (has been assigned a value) and false otherwise */
  public boolean isSetLpm() {
    return this.lpm != null;
  }

  public void setLpmIsSet(boolean value) {
    if (!value) {
      this.lpm = null;
    }
  }

  public BmMatchParamTernary getTernary() {
    return this.ternary;
  }

  public BmMatchParam setTernary(BmMatchParamTernary ternary) {
    this.ternary = ternary;
    return this;
  }

  public void unsetTernary() {
    this.ternary = null;
  }

  /** Returns true if field ternary is set (has been assigned a value) and false otherwise */
  public boolean isSetTernary() {
    return this.ternary != null;
  }

  public void setTernaryIsSet(boolean value) {
    if (!value) {
      this.ternary = null;
    }
  }

  public BmMatchParamValid getValid() {
    return this.valid;
  }

  public BmMatchParam setValid(BmMatchParamValid valid) {
    this.valid = valid;
    return this;
  }

  public void unsetValid() {
    this.valid = null;
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return this.valid != null;
  }

  public void setValidIsSet(boolean value) {
    if (!value) {
      this.valid = null;
    }
  }

  public BmMatchParamRange getRange() {
    return this.range;
  }

  public BmMatchParam setRange(BmMatchParamRange range) {
    this.range = range;
    return this;
  }

  public void unsetRange() {
    this.range = null;
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean isSetRange() {
    return this.range != null;
  }

  public void setRangeIsSet(boolean value) {
    if (!value) {
      this.range = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((BmMatchParamType)value);
      }
      break;

    case EXACT:
      if (value == null) {
        unsetExact();
      } else {
        setExact((BmMatchParamExact)value);
      }
      break;

    case LPM:
      if (value == null) {
        unsetLpm();
      } else {
        setLpm((BmMatchParamLPM)value);
      }
      break;

    case TERNARY:
      if (value == null) {
        unsetTernary();
      } else {
        setTernary((BmMatchParamTernary)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((BmMatchParamValid)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((BmMatchParamRange)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case EXACT:
      return getExact();

    case LPM:
      return getLpm();

    case TERNARY:
      return getTernary();

    case VALID:
      return getValid();

    case RANGE:
      return getRange();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case EXACT:
      return isSetExact();
    case LPM:
      return isSetLpm();
    case TERNARY:
      return isSetTernary();
    case VALID:
      return isSetValid();
    case RANGE:
      return isSetRange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BmMatchParam)
      return this.equals((BmMatchParam)that);
    return false;
  }

  public boolean equals(BmMatchParam that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_exact = true && this.isSetExact();
    boolean that_present_exact = true && that.isSetExact();
    if (this_present_exact || that_present_exact) {
      if (!(this_present_exact && that_present_exact))
        return false;
      if (!this.exact.equals(that.exact))
        return false;
    }

    boolean this_present_lpm = true && this.isSetLpm();
    boolean that_present_lpm = true && that.isSetLpm();
    if (this_present_lpm || that_present_lpm) {
      if (!(this_present_lpm && that_present_lpm))
        return false;
      if (!this.lpm.equals(that.lpm))
        return false;
    }

    boolean this_present_ternary = true && this.isSetTernary();
    boolean that_present_ternary = true && that.isSetTernary();
    if (this_present_ternary || that_present_ternary) {
      if (!(this_present_ternary && that_present_ternary))
        return false;
      if (!this.ternary.equals(that.ternary))
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (!this.valid.equals(that.valid))
        return false;
    }

    boolean this_present_range = true && this.isSetRange();
    boolean that_present_range = true && that.isSetRange();
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (!this.range.equals(that.range))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_exact = true && (isSetExact());
    list.add(present_exact);
    if (present_exact)
      list.add(exact);

    boolean present_lpm = true && (isSetLpm());
    list.add(present_lpm);
    if (present_lpm)
      list.add(lpm);

    boolean present_ternary = true && (isSetTernary());
    list.add(present_ternary);
    if (present_ternary)
      list.add(ternary);

    boolean present_valid = true && (isSetValid());
    list.add(present_valid);
    if (present_valid)
      list.add(valid);

    boolean present_range = true && (isSetRange());
    list.add(present_range);
    if (present_range)
      list.add(range);

    return list.hashCode();
  }

  @Override
  public int compareTo(BmMatchParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExact()).compareTo(other.isSetExact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exact, other.exact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLpm()).compareTo(other.isSetLpm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLpm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpm, other.lpm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTernary()).compareTo(other.isSetTernary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTernary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ternary, other.ternary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BmMatchParam(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetExact()) {
      if (!first) sb.append(", ");
      sb.append("exact:");
      if (this.exact == null) {
        sb.append("null");
      } else {
        sb.append(this.exact);
      }
      first = false;
    }
    if (isSetLpm()) {
      if (!first) sb.append(", ");
      sb.append("lpm:");
      if (this.lpm == null) {
        sb.append("null");
      } else {
        sb.append(this.lpm);
      }
      first = false;
    }
    if (isSetTernary()) {
      if (!first) sb.append(", ");
      sb.append("ternary:");
      if (this.ternary == null) {
        sb.append("null");
      } else {
        sb.append(this.ternary);
      }
      first = false;
    }
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      if (this.valid == null) {
        sb.append("null");
      } else {
        sb.append(this.valid);
      }
      first = false;
    }
    if (isSetRange()) {
      if (!first) sb.append(", ");
      sb.append("range:");
      if (this.range == null) {
        sb.append("null");
      } else {
        sb.append(this.range);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (exact != null) {
      exact.validate();
    }
    if (lpm != null) {
      lpm.validate();
    }
    if (ternary != null) {
      ternary.validate();
    }
    if (valid != null) {
      valid.validate();
    }
    if (range != null) {
      range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BmMatchParamStandardSchemeFactory implements SchemeFactory {
    public BmMatchParamStandardScheme getScheme() {
      return new BmMatchParamStandardScheme();
    }
  }

  private static class BmMatchParamStandardScheme extends StandardScheme<BmMatchParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BmMatchParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.onosproject.bmv2.thriftapi.BmMatchParamType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exact = new BmMatchParamExact();
              struct.exact.read(iprot);
              struct.setExactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LPM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lpm = new BmMatchParamLPM();
              struct.lpm.read(iprot);
              struct.setLpmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TERNARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ternary = new BmMatchParamTernary();
              struct.ternary.read(iprot);
              struct.setTernaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.valid = new BmMatchParamValid();
              struct.valid.read(iprot);
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.range = new BmMatchParamRange();
              struct.range.read(iprot);
              struct.setRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BmMatchParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.exact != null) {
        if (struct.isSetExact()) {
          oprot.writeFieldBegin(EXACT_FIELD_DESC);
          struct.exact.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lpm != null) {
        if (struct.isSetLpm()) {
          oprot.writeFieldBegin(LPM_FIELD_DESC);
          struct.lpm.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ternary != null) {
        if (struct.isSetTernary()) {
          oprot.writeFieldBegin(TERNARY_FIELD_DESC);
          struct.ternary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.valid != null) {
        if (struct.isSetValid()) {
          oprot.writeFieldBegin(VALID_FIELD_DESC);
          struct.valid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.range != null) {
        if (struct.isSetRange()) {
          oprot.writeFieldBegin(RANGE_FIELD_DESC);
          struct.range.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BmMatchParamTupleSchemeFactory implements SchemeFactory {
    public BmMatchParamTupleScheme getScheme() {
      return new BmMatchParamTupleScheme();
    }
  }

  private static class BmMatchParamTupleScheme extends TupleScheme<BmMatchParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BmMatchParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetExact()) {
        optionals.set(1);
      }
      if (struct.isSetLpm()) {
        optionals.set(2);
      }
      if (struct.isSetTernary()) {
        optionals.set(3);
      }
      if (struct.isSetValid()) {
        optionals.set(4);
      }
      if (struct.isSetRange()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetExact()) {
        struct.exact.write(oprot);
      }
      if (struct.isSetLpm()) {
        struct.lpm.write(oprot);
      }
      if (struct.isSetTernary()) {
        struct.ternary.write(oprot);
      }
      if (struct.isSetValid()) {
        struct.valid.write(oprot);
      }
      if (struct.isSetRange()) {
        struct.range.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BmMatchParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.type = org.onosproject.bmv2.thriftapi.BmMatchParamType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exact = new BmMatchParamExact();
        struct.exact.read(iprot);
        struct.setExactIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lpm = new BmMatchParamLPM();
        struct.lpm.read(iprot);
        struct.setLpmIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ternary = new BmMatchParamTernary();
        struct.ternary.read(iprot);
        struct.setTernaryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.valid = new BmMatchParamValid();
        struct.valid.read(iprot);
        struct.setValidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.range = new BmMatchParamRange();
        struct.range.read(iprot);
        struct.setRangeIsSet(true);
      }
    }
  }

}

