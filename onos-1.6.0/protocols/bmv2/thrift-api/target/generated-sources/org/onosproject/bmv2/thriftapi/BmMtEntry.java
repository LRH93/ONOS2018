/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.onosproject.bmv2.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-14")
public class BmMtEntry implements org.apache.thrift.TBase<BmMtEntry, BmMtEntry._Fields>, java.io.Serializable, Cloneable, Comparable<BmMtEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BmMtEntry");

  private static final org.apache.thrift.protocol.TField MATCH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("match_key", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("entry_handle", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ACTION_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("action_entry", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BmMtEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BmMtEntryTupleSchemeFactory());
  }

  public List<BmMatchParam> match_key; // required
  public BmAddEntryOptions options; // required
  public long entry_handle; // required
  public BmActionEntry action_entry; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MATCH_KEY((short)1, "match_key"),
    OPTIONS((short)2, "options"),
    ENTRY_HANDLE((short)3, "entry_handle"),
    ACTION_ENTRY((short)4, "action_entry");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MATCH_KEY
          return MATCH_KEY;
        case 2: // OPTIONS
          return OPTIONS;
        case 3: // ENTRY_HANDLE
          return ENTRY_HANDLE;
        case 4: // ACTION_ENTRY
          return ACTION_ENTRY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENTRY_HANDLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MATCH_KEY, new org.apache.thrift.meta_data.FieldMetaData("match_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "BmMatchParams")));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmAddEntryOptions.class)));
    tmpMap.put(_Fields.ENTRY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("entry_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "BmEntryHandle")));
    tmpMap.put(_Fields.ACTION_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("action_entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BmActionEntry.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BmMtEntry.class, metaDataMap);
  }

  public BmMtEntry() {
  }

  public BmMtEntry(
    List<BmMatchParam> match_key,
    BmAddEntryOptions options,
    long entry_handle,
    BmActionEntry action_entry)
  {
    this();
    this.match_key = match_key;
    this.options = options;
    this.entry_handle = entry_handle;
    setEntry_handleIsSet(true);
    this.action_entry = action_entry;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BmMtEntry(BmMtEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMatch_key()) {
      this.match_key = other.match_key;
    }
    if (other.isSetOptions()) {
      this.options = new BmAddEntryOptions(other.options);
    }
    this.entry_handle = other.entry_handle;
    if (other.isSetAction_entry()) {
      this.action_entry = new BmActionEntry(other.action_entry);
    }
  }

  public BmMtEntry deepCopy() {
    return new BmMtEntry(this);
  }

  @Override
  public void clear() {
    this.match_key = null;
    this.options = null;
    setEntry_handleIsSet(false);
    this.entry_handle = 0;
    this.action_entry = null;
  }

  public int getMatch_keySize() {
    return (this.match_key == null) ? 0 : this.match_key.size();
  }

  public java.util.Iterator<BmMatchParam> getMatch_keyIterator() {
    return (this.match_key == null) ? null : this.match_key.iterator();
  }

  public void addToMatch_key(BmMatchParam elem) {
    if (this.match_key == null) {
      this.match_key = new ArrayList<BmMatchParam>();
    }
    this.match_key.add(elem);
  }

  public List<BmMatchParam> getMatch_key() {
    return this.match_key;
  }

  public BmMtEntry setMatch_key(List<BmMatchParam> match_key) {
    this.match_key = match_key;
    return this;
  }

  public void unsetMatch_key() {
    this.match_key = null;
  }

  /** Returns true if field match_key is set (has been assigned a value) and false otherwise */
  public boolean isSetMatch_key() {
    return this.match_key != null;
  }

  public void setMatch_keyIsSet(boolean value) {
    if (!value) {
      this.match_key = null;
    }
  }

  public BmAddEntryOptions getOptions() {
    return this.options;
  }

  public BmMtEntry setOptions(BmAddEntryOptions options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public long getEntry_handle() {
    return this.entry_handle;
  }

  public BmMtEntry setEntry_handle(long entry_handle) {
    this.entry_handle = entry_handle;
    setEntry_handleIsSet(true);
    return this;
  }

  public void unsetEntry_handle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
  }

  /** Returns true if field entry_handle is set (has been assigned a value) and false otherwise */
  public boolean isSetEntry_handle() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID);
  }

  public void setEntry_handleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRY_HANDLE_ISSET_ID, value);
  }

  public BmActionEntry getAction_entry() {
    return this.action_entry;
  }

  public BmMtEntry setAction_entry(BmActionEntry action_entry) {
    this.action_entry = action_entry;
    return this;
  }

  public void unsetAction_entry() {
    this.action_entry = null;
  }

  /** Returns true if field action_entry is set (has been assigned a value) and false otherwise */
  public boolean isSetAction_entry() {
    return this.action_entry != null;
  }

  public void setAction_entryIsSet(boolean value) {
    if (!value) {
      this.action_entry = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MATCH_KEY:
      if (value == null) {
        unsetMatch_key();
      } else {
        setMatch_key((List<BmMatchParam>)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((BmAddEntryOptions)value);
      }
      break;

    case ENTRY_HANDLE:
      if (value == null) {
        unsetEntry_handle();
      } else {
        setEntry_handle((Long)value);
      }
      break;

    case ACTION_ENTRY:
      if (value == null) {
        unsetAction_entry();
      } else {
        setAction_entry((BmActionEntry)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MATCH_KEY:
      return getMatch_key();

    case OPTIONS:
      return getOptions();

    case ENTRY_HANDLE:
      return getEntry_handle();

    case ACTION_ENTRY:
      return getAction_entry();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MATCH_KEY:
      return isSetMatch_key();
    case OPTIONS:
      return isSetOptions();
    case ENTRY_HANDLE:
      return isSetEntry_handle();
    case ACTION_ENTRY:
      return isSetAction_entry();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BmMtEntry)
      return this.equals((BmMtEntry)that);
    return false;
  }

  public boolean equals(BmMtEntry that) {
    if (that == null)
      return false;

    boolean this_present_match_key = true && this.isSetMatch_key();
    boolean that_present_match_key = true && that.isSetMatch_key();
    if (this_present_match_key || that_present_match_key) {
      if (!(this_present_match_key && that_present_match_key))
        return false;
      if (!this.match_key.equals(that.match_key))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_entry_handle = true;
    boolean that_present_entry_handle = true;
    if (this_present_entry_handle || that_present_entry_handle) {
      if (!(this_present_entry_handle && that_present_entry_handle))
        return false;
      if (this.entry_handle != that.entry_handle)
        return false;
    }

    boolean this_present_action_entry = true && this.isSetAction_entry();
    boolean that_present_action_entry = true && that.isSetAction_entry();
    if (this_present_action_entry || that_present_action_entry) {
      if (!(this_present_action_entry && that_present_action_entry))
        return false;
      if (!this.action_entry.equals(that.action_entry))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_match_key = true && (isSetMatch_key());
    list.add(present_match_key);
    if (present_match_key)
      list.add(match_key);

    boolean present_options = true && (isSetOptions());
    list.add(present_options);
    if (present_options)
      list.add(options);

    boolean present_entry_handle = true;
    list.add(present_entry_handle);
    if (present_entry_handle)
      list.add(entry_handle);

    boolean present_action_entry = true && (isSetAction_entry());
    list.add(present_action_entry);
    if (present_action_entry)
      list.add(action_entry);

    return list.hashCode();
  }

  @Override
  public int compareTo(BmMtEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMatch_key()).compareTo(other.isSetMatch_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatch_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.match_key, other.match_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntry_handle()).compareTo(other.isSetEntry_handle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntry_handle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry_handle, other.entry_handle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction_entry()).compareTo(other.isSetAction_entry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction_entry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_entry, other.action_entry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BmMtEntry(");
    boolean first = true;

    sb.append("match_key:");
    if (this.match_key == null) {
      sb.append("null");
    } else {
      sb.append(this.match_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entry_handle:");
    sb.append(this.entry_handle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("action_entry:");
    if (this.action_entry == null) {
      sb.append("null");
    } else {
      sb.append(this.action_entry);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (options != null) {
      options.validate();
    }
    if (action_entry != null) {
      action_entry.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BmMtEntryStandardSchemeFactory implements SchemeFactory {
    public BmMtEntryStandardScheme getScheme() {
      return new BmMtEntryStandardScheme();
    }
  }

  private static class BmMtEntryStandardScheme extends StandardScheme<BmMtEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BmMtEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MATCH_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.match_key = new ArrayList<BmMatchParam>(_list18.size);
                BmMatchParam _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new BmMatchParam();
                  _elem19.read(iprot);
                  struct.match_key.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setMatch_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.options = new BmAddEntryOptions();
              struct.options.read(iprot);
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRY_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entry_handle = iprot.readI64();
              struct.setEntry_handleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.action_entry = new BmActionEntry();
              struct.action_entry.read(iprot);
              struct.setAction_entryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BmMtEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.match_key != null) {
        oprot.writeFieldBegin(MATCH_KEY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.match_key.size()));
          for (BmMatchParam _iter21 : struct.match_key)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.options != null) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        struct.options.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENTRY_HANDLE_FIELD_DESC);
      oprot.writeI64(struct.entry_handle);
      oprot.writeFieldEnd();
      if (struct.action_entry != null) {
        oprot.writeFieldBegin(ACTION_ENTRY_FIELD_DESC);
        struct.action_entry.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BmMtEntryTupleSchemeFactory implements SchemeFactory {
    public BmMtEntryTupleScheme getScheme() {
      return new BmMtEntryTupleScheme();
    }
  }

  private static class BmMtEntryTupleScheme extends TupleScheme<BmMtEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BmMtEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMatch_key()) {
        optionals.set(0);
      }
      if (struct.isSetOptions()) {
        optionals.set(1);
      }
      if (struct.isSetEntry_handle()) {
        optionals.set(2);
      }
      if (struct.isSetAction_entry()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMatch_key()) {
        {
          oprot.writeI32(struct.match_key.size());
          for (BmMatchParam _iter22 : struct.match_key)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetOptions()) {
        struct.options.write(oprot);
      }
      if (struct.isSetEntry_handle()) {
        oprot.writeI64(struct.entry_handle);
      }
      if (struct.isSetAction_entry()) {
        struct.action_entry.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BmMtEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.match_key = new ArrayList<BmMatchParam>(_list23.size);
          BmMatchParam _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new BmMatchParam();
            _elem24.read(iprot);
            struct.match_key.add(_elem24);
          }
        }
        struct.setMatch_keyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.options = new BmAddEntryOptions();
        struct.options.read(iprot);
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entry_handle = iprot.readI64();
        struct.setEntry_handleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.action_entry = new BmActionEntry();
        struct.action_entry.read(iprot);
        struct.setAction_entryIsSet(true);
      }
    }
  }

}

