/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.onosproject.bmv2.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-14")
public class BmConfig implements org.apache.thrift.TBase<BmConfig, BmConfig._Fields>, java.io.Serializable, Cloneable, Comparable<BmConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BmConfig");

  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField THRIFT_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("thrift_port", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NOTIFICATIONS_SOCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("notifications_socket", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ELOGGER_SOCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("elogger_socket", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEBUGGER_SOCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("debugger_socket", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BmConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BmConfigTupleSchemeFactory());
  }

  public int device_id; // required
  public int thrift_port; // required
  public String notifications_socket; // optional
  public String elogger_socket; // optional
  public String debugger_socket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_ID((short)1, "device_id"),
    THRIFT_PORT((short)2, "thrift_port"),
    NOTIFICATIONS_SOCKET((short)3, "notifications_socket"),
    ELOGGER_SOCKET((short)4, "elogger_socket"),
    DEBUGGER_SOCKET((short)5, "debugger_socket");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_ID
          return DEVICE_ID;
        case 2: // THRIFT_PORT
          return THRIFT_PORT;
        case 3: // NOTIFICATIONS_SOCKET
          return NOTIFICATIONS_SOCKET;
        case 4: // ELOGGER_SOCKET
          return ELOGGER_SOCKET;
        case 5: // DEBUGGER_SOCKET
          return DEBUGGER_SOCKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEVICE_ID_ISSET_ID = 0;
  private static final int __THRIFT_PORT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NOTIFICATIONS_SOCKET,_Fields.ELOGGER_SOCKET,_Fields.DEBUGGER_SOCKET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THRIFT_PORT, new org.apache.thrift.meta_data.FieldMetaData("thrift_port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTIFICATIONS_SOCKET, new org.apache.thrift.meta_data.FieldMetaData("notifications_socket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ELOGGER_SOCKET, new org.apache.thrift.meta_data.FieldMetaData("elogger_socket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBUGGER_SOCKET, new org.apache.thrift.meta_data.FieldMetaData("debugger_socket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BmConfig.class, metaDataMap);
  }

  public BmConfig() {
  }

  public BmConfig(
    int device_id,
    int thrift_port)
  {
    this();
    this.device_id = device_id;
    setDevice_idIsSet(true);
    this.thrift_port = thrift_port;
    setThrift_portIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BmConfig(BmConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.device_id = other.device_id;
    this.thrift_port = other.thrift_port;
    if (other.isSetNotifications_socket()) {
      this.notifications_socket = other.notifications_socket;
    }
    if (other.isSetElogger_socket()) {
      this.elogger_socket = other.elogger_socket;
    }
    if (other.isSetDebugger_socket()) {
      this.debugger_socket = other.debugger_socket;
    }
  }

  public BmConfig deepCopy() {
    return new BmConfig(this);
  }

  @Override
  public void clear() {
    setDevice_idIsSet(false);
    this.device_id = 0;
    setThrift_portIsSet(false);
    this.thrift_port = 0;
    this.notifications_socket = null;
    this.elogger_socket = null;
    this.debugger_socket = null;
  }

  public int getDevice_id() {
    return this.device_id;
  }

  public BmConfig setDevice_id(int device_id) {
    this.device_id = device_id;
    setDevice_idIsSet(true);
    return this;
  }

  public void unsetDevice_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICE_ID_ISSET_ID);
  }

  /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice_id() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICE_ID_ISSET_ID);
  }

  public void setDevice_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICE_ID_ISSET_ID, value);
  }

  public int getThrift_port() {
    return this.thrift_port;
  }

  public BmConfig setThrift_port(int thrift_port) {
    this.thrift_port = thrift_port;
    setThrift_portIsSet(true);
    return this;
  }

  public void unsetThrift_port() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THRIFT_PORT_ISSET_ID);
  }

  /** Returns true if field thrift_port is set (has been assigned a value) and false otherwise */
  public boolean isSetThrift_port() {
    return EncodingUtils.testBit(__isset_bitfield, __THRIFT_PORT_ISSET_ID);
  }

  public void setThrift_portIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THRIFT_PORT_ISSET_ID, value);
  }

  public String getNotifications_socket() {
    return this.notifications_socket;
  }

  public BmConfig setNotifications_socket(String notifications_socket) {
    this.notifications_socket = notifications_socket;
    return this;
  }

  public void unsetNotifications_socket() {
    this.notifications_socket = null;
  }

  /** Returns true if field notifications_socket is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifications_socket() {
    return this.notifications_socket != null;
  }

  public void setNotifications_socketIsSet(boolean value) {
    if (!value) {
      this.notifications_socket = null;
    }
  }

  public String getElogger_socket() {
    return this.elogger_socket;
  }

  public BmConfig setElogger_socket(String elogger_socket) {
    this.elogger_socket = elogger_socket;
    return this;
  }

  public void unsetElogger_socket() {
    this.elogger_socket = null;
  }

  /** Returns true if field elogger_socket is set (has been assigned a value) and false otherwise */
  public boolean isSetElogger_socket() {
    return this.elogger_socket != null;
  }

  public void setElogger_socketIsSet(boolean value) {
    if (!value) {
      this.elogger_socket = null;
    }
  }

  public String getDebugger_socket() {
    return this.debugger_socket;
  }

  public BmConfig setDebugger_socket(String debugger_socket) {
    this.debugger_socket = debugger_socket;
    return this;
  }

  public void unsetDebugger_socket() {
    this.debugger_socket = null;
  }

  /** Returns true if field debugger_socket is set (has been assigned a value) and false otherwise */
  public boolean isSetDebugger_socket() {
    return this.debugger_socket != null;
  }

  public void setDebugger_socketIsSet(boolean value) {
    if (!value) {
      this.debugger_socket = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_ID:
      if (value == null) {
        unsetDevice_id();
      } else {
        setDevice_id((Integer)value);
      }
      break;

    case THRIFT_PORT:
      if (value == null) {
        unsetThrift_port();
      } else {
        setThrift_port((Integer)value);
      }
      break;

    case NOTIFICATIONS_SOCKET:
      if (value == null) {
        unsetNotifications_socket();
      } else {
        setNotifications_socket((String)value);
      }
      break;

    case ELOGGER_SOCKET:
      if (value == null) {
        unsetElogger_socket();
      } else {
        setElogger_socket((String)value);
      }
      break;

    case DEBUGGER_SOCKET:
      if (value == null) {
        unsetDebugger_socket();
      } else {
        setDebugger_socket((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_ID:
      return getDevice_id();

    case THRIFT_PORT:
      return getThrift_port();

    case NOTIFICATIONS_SOCKET:
      return getNotifications_socket();

    case ELOGGER_SOCKET:
      return getElogger_socket();

    case DEBUGGER_SOCKET:
      return getDebugger_socket();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_ID:
      return isSetDevice_id();
    case THRIFT_PORT:
      return isSetThrift_port();
    case NOTIFICATIONS_SOCKET:
      return isSetNotifications_socket();
    case ELOGGER_SOCKET:
      return isSetElogger_socket();
    case DEBUGGER_SOCKET:
      return isSetDebugger_socket();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BmConfig)
      return this.equals((BmConfig)that);
    return false;
  }

  public boolean equals(BmConfig that) {
    if (that == null)
      return false;

    boolean this_present_device_id = true;
    boolean that_present_device_id = true;
    if (this_present_device_id || that_present_device_id) {
      if (!(this_present_device_id && that_present_device_id))
        return false;
      if (this.device_id != that.device_id)
        return false;
    }

    boolean this_present_thrift_port = true;
    boolean that_present_thrift_port = true;
    if (this_present_thrift_port || that_present_thrift_port) {
      if (!(this_present_thrift_port && that_present_thrift_port))
        return false;
      if (this.thrift_port != that.thrift_port)
        return false;
    }

    boolean this_present_notifications_socket = true && this.isSetNotifications_socket();
    boolean that_present_notifications_socket = true && that.isSetNotifications_socket();
    if (this_present_notifications_socket || that_present_notifications_socket) {
      if (!(this_present_notifications_socket && that_present_notifications_socket))
        return false;
      if (!this.notifications_socket.equals(that.notifications_socket))
        return false;
    }

    boolean this_present_elogger_socket = true && this.isSetElogger_socket();
    boolean that_present_elogger_socket = true && that.isSetElogger_socket();
    if (this_present_elogger_socket || that_present_elogger_socket) {
      if (!(this_present_elogger_socket && that_present_elogger_socket))
        return false;
      if (!this.elogger_socket.equals(that.elogger_socket))
        return false;
    }

    boolean this_present_debugger_socket = true && this.isSetDebugger_socket();
    boolean that_present_debugger_socket = true && that.isSetDebugger_socket();
    if (this_present_debugger_socket || that_present_debugger_socket) {
      if (!(this_present_debugger_socket && that_present_debugger_socket))
        return false;
      if (!this.debugger_socket.equals(that.debugger_socket))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_device_id = true;
    list.add(present_device_id);
    if (present_device_id)
      list.add(device_id);

    boolean present_thrift_port = true;
    list.add(present_thrift_port);
    if (present_thrift_port)
      list.add(thrift_port);

    boolean present_notifications_socket = true && (isSetNotifications_socket());
    list.add(present_notifications_socket);
    if (present_notifications_socket)
      list.add(notifications_socket);

    boolean present_elogger_socket = true && (isSetElogger_socket());
    list.add(present_elogger_socket);
    if (present_elogger_socket)
      list.add(elogger_socket);

    boolean present_debugger_socket = true && (isSetDebugger_socket());
    list.add(present_debugger_socket);
    if (present_debugger_socket)
      list.add(debugger_socket);

    return list.hashCode();
  }

  @Override
  public int compareTo(BmConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThrift_port()).compareTo(other.isSetThrift_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThrift_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thrift_port, other.thrift_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifications_socket()).compareTo(other.isSetNotifications_socket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifications_socket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifications_socket, other.notifications_socket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElogger_socket()).compareTo(other.isSetElogger_socket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElogger_socket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elogger_socket, other.elogger_socket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebugger_socket()).compareTo(other.isSetDebugger_socket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugger_socket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugger_socket, other.debugger_socket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BmConfig(");
    boolean first = true;

    sb.append("device_id:");
    sb.append(this.device_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thrift_port:");
    sb.append(this.thrift_port);
    first = false;
    if (isSetNotifications_socket()) {
      if (!first) sb.append(", ");
      sb.append("notifications_socket:");
      if (this.notifications_socket == null) {
        sb.append("null");
      } else {
        sb.append(this.notifications_socket);
      }
      first = false;
    }
    if (isSetElogger_socket()) {
      if (!first) sb.append(", ");
      sb.append("elogger_socket:");
      if (this.elogger_socket == null) {
        sb.append("null");
      } else {
        sb.append(this.elogger_socket);
      }
      first = false;
    }
    if (isSetDebugger_socket()) {
      if (!first) sb.append(", ");
      sb.append("debugger_socket:");
      if (this.debugger_socket == null) {
        sb.append("null");
      } else {
        sb.append(this.debugger_socket);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BmConfigStandardSchemeFactory implements SchemeFactory {
    public BmConfigStandardScheme getScheme() {
      return new BmConfigStandardScheme();
    }
  }

  private static class BmConfigStandardScheme extends StandardScheme<BmConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BmConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.device_id = iprot.readI32();
              struct.setDevice_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THRIFT_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thrift_port = iprot.readI32();
              struct.setThrift_portIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTIFICATIONS_SOCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifications_socket = iprot.readString();
              struct.setNotifications_socketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ELOGGER_SOCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.elogger_socket = iprot.readString();
              struct.setElogger_socketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEBUGGER_SOCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debugger_socket = iprot.readString();
              struct.setDebugger_socketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BmConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
      oprot.writeI32(struct.device_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THRIFT_PORT_FIELD_DESC);
      oprot.writeI32(struct.thrift_port);
      oprot.writeFieldEnd();
      if (struct.notifications_socket != null) {
        if (struct.isSetNotifications_socket()) {
          oprot.writeFieldBegin(NOTIFICATIONS_SOCKET_FIELD_DESC);
          oprot.writeString(struct.notifications_socket);
          oprot.writeFieldEnd();
        }
      }
      if (struct.elogger_socket != null) {
        if (struct.isSetElogger_socket()) {
          oprot.writeFieldBegin(ELOGGER_SOCKET_FIELD_DESC);
          oprot.writeString(struct.elogger_socket);
          oprot.writeFieldEnd();
        }
      }
      if (struct.debugger_socket != null) {
        if (struct.isSetDebugger_socket()) {
          oprot.writeFieldBegin(DEBUGGER_SOCKET_FIELD_DESC);
          oprot.writeString(struct.debugger_socket);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BmConfigTupleSchemeFactory implements SchemeFactory {
    public BmConfigTupleScheme getScheme() {
      return new BmConfigTupleScheme();
    }
  }

  private static class BmConfigTupleScheme extends TupleScheme<BmConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BmConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDevice_id()) {
        optionals.set(0);
      }
      if (struct.isSetThrift_port()) {
        optionals.set(1);
      }
      if (struct.isSetNotifications_socket()) {
        optionals.set(2);
      }
      if (struct.isSetElogger_socket()) {
        optionals.set(3);
      }
      if (struct.isSetDebugger_socket()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDevice_id()) {
        oprot.writeI32(struct.device_id);
      }
      if (struct.isSetThrift_port()) {
        oprot.writeI32(struct.thrift_port);
      }
      if (struct.isSetNotifications_socket()) {
        oprot.writeString(struct.notifications_socket);
      }
      if (struct.isSetElogger_socket()) {
        oprot.writeString(struct.elogger_socket);
      }
      if (struct.isSetDebugger_socket()) {
        oprot.writeString(struct.debugger_socket);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BmConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.device_id = iprot.readI32();
        struct.setDevice_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.thrift_port = iprot.readI32();
        struct.setThrift_portIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notifications_socket = iprot.readString();
        struct.setNotifications_socketIsSet(true);
      }
      if (incoming.get(3)) {
        struct.elogger_socket = iprot.readString();
        struct.setElogger_socketIsSet(true);
      }
      if (incoming.get(4)) {
        struct.debugger_socket = iprot.readString();
        struct.setDebugger_socketIsSet(true);
      }
    }
  }

}

