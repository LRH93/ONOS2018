/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.onosproject.bmv2.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-14")
public class BmMtIndirectWsGroup implements org.apache.thrift.TBase<BmMtIndirectWsGroup, BmMtIndirectWsGroup._Fields>, java.io.Serializable, Cloneable, Comparable<BmMtIndirectWsGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BmMtIndirectWsGroup");

  private static final org.apache.thrift.protocol.TField GRP_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_handle", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MBR_HANDLES_FIELD_DESC = new org.apache.thrift.protocol.TField("mbr_handles", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BmMtIndirectWsGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BmMtIndirectWsGroupTupleSchemeFactory());
  }

  public int grp_handle; // required
  public List<Integer> mbr_handles; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GRP_HANDLE((short)1, "grp_handle"),
    MBR_HANDLES((short)2, "mbr_handles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GRP_HANDLE
          return GRP_HANDLE;
        case 2: // MBR_HANDLES
          return MBR_HANDLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GRP_HANDLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GRP_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("grp_handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "BmGroupHandle")));
    tmpMap.put(_Fields.MBR_HANDLES, new org.apache.thrift.meta_data.FieldMetaData("mbr_handles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "BmMemberHandle"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BmMtIndirectWsGroup.class, metaDataMap);
  }

  public BmMtIndirectWsGroup() {
  }

  public BmMtIndirectWsGroup(
    int grp_handle,
    List<Integer> mbr_handles)
  {
    this();
    this.grp_handle = grp_handle;
    setGrp_handleIsSet(true);
    this.mbr_handles = mbr_handles;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BmMtIndirectWsGroup(BmMtIndirectWsGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    this.grp_handle = other.grp_handle;
    if (other.isSetMbr_handles()) {
      List<Integer> __this__mbr_handles = new ArrayList<Integer>(other.mbr_handles.size());
      for (Integer other_element : other.mbr_handles) {
        __this__mbr_handles.add(other_element);
      }
      this.mbr_handles = __this__mbr_handles;
    }
  }

  public BmMtIndirectWsGroup deepCopy() {
    return new BmMtIndirectWsGroup(this);
  }

  @Override
  public void clear() {
    setGrp_handleIsSet(false);
    this.grp_handle = 0;
    this.mbr_handles = null;
  }

  public int getGrp_handle() {
    return this.grp_handle;
  }

  public BmMtIndirectWsGroup setGrp_handle(int grp_handle) {
    this.grp_handle = grp_handle;
    setGrp_handleIsSet(true);
    return this;
  }

  public void unsetGrp_handle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
  }

  /** Returns true if field grp_handle is set (has been assigned a value) and false otherwise */
  public boolean isSetGrp_handle() {
    return EncodingUtils.testBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID);
  }

  public void setGrp_handleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRP_HANDLE_ISSET_ID, value);
  }

  public int getMbr_handlesSize() {
    return (this.mbr_handles == null) ? 0 : this.mbr_handles.size();
  }

  public java.util.Iterator<Integer> getMbr_handlesIterator() {
    return (this.mbr_handles == null) ? null : this.mbr_handles.iterator();
  }

  public void addToMbr_handles(int elem) {
    if (this.mbr_handles == null) {
      this.mbr_handles = new ArrayList<Integer>();
    }
    this.mbr_handles.add(elem);
  }

  public List<Integer> getMbr_handles() {
    return this.mbr_handles;
  }

  public BmMtIndirectWsGroup setMbr_handles(List<Integer> mbr_handles) {
    this.mbr_handles = mbr_handles;
    return this;
  }

  public void unsetMbr_handles() {
    this.mbr_handles = null;
  }

  /** Returns true if field mbr_handles is set (has been assigned a value) and false otherwise */
  public boolean isSetMbr_handles() {
    return this.mbr_handles != null;
  }

  public void setMbr_handlesIsSet(boolean value) {
    if (!value) {
      this.mbr_handles = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GRP_HANDLE:
      if (value == null) {
        unsetGrp_handle();
      } else {
        setGrp_handle((Integer)value);
      }
      break;

    case MBR_HANDLES:
      if (value == null) {
        unsetMbr_handles();
      } else {
        setMbr_handles((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GRP_HANDLE:
      return getGrp_handle();

    case MBR_HANDLES:
      return getMbr_handles();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GRP_HANDLE:
      return isSetGrp_handle();
    case MBR_HANDLES:
      return isSetMbr_handles();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BmMtIndirectWsGroup)
      return this.equals((BmMtIndirectWsGroup)that);
    return false;
  }

  public boolean equals(BmMtIndirectWsGroup that) {
    if (that == null)
      return false;

    boolean this_present_grp_handle = true;
    boolean that_present_grp_handle = true;
    if (this_present_grp_handle || that_present_grp_handle) {
      if (!(this_present_grp_handle && that_present_grp_handle))
        return false;
      if (this.grp_handle != that.grp_handle)
        return false;
    }

    boolean this_present_mbr_handles = true && this.isSetMbr_handles();
    boolean that_present_mbr_handles = true && that.isSetMbr_handles();
    if (this_present_mbr_handles || that_present_mbr_handles) {
      if (!(this_present_mbr_handles && that_present_mbr_handles))
        return false;
      if (!this.mbr_handles.equals(that.mbr_handles))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_grp_handle = true;
    list.add(present_grp_handle);
    if (present_grp_handle)
      list.add(grp_handle);

    boolean present_mbr_handles = true && (isSetMbr_handles());
    list.add(present_mbr_handles);
    if (present_mbr_handles)
      list.add(mbr_handles);

    return list.hashCode();
  }

  @Override
  public int compareTo(BmMtIndirectWsGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGrp_handle()).compareTo(other.isSetGrp_handle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrp_handle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_handle, other.grp_handle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMbr_handles()).compareTo(other.isSetMbr_handles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMbr_handles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbr_handles, other.mbr_handles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BmMtIndirectWsGroup(");
    boolean first = true;

    sb.append("grp_handle:");
    sb.append(this.grp_handle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mbr_handles:");
    if (this.mbr_handles == null) {
      sb.append("null");
    } else {
      sb.append(this.mbr_handles);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BmMtIndirectWsGroupStandardSchemeFactory implements SchemeFactory {
    public BmMtIndirectWsGroupStandardScheme getScheme() {
      return new BmMtIndirectWsGroupStandardScheme();
    }
  }

  private static class BmMtIndirectWsGroupStandardScheme extends StandardScheme<BmMtIndirectWsGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BmMtIndirectWsGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GRP_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grp_handle = iprot.readI32();
              struct.setGrp_handleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MBR_HANDLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.mbr_handles = new ArrayList<Integer>(_list34.size);
                int _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = iprot.readI32();
                  struct.mbr_handles.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setMbr_handlesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BmMtIndirectWsGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GRP_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.grp_handle);
      oprot.writeFieldEnd();
      if (struct.mbr_handles != null) {
        oprot.writeFieldBegin(MBR_HANDLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mbr_handles.size()));
          for (int _iter37 : struct.mbr_handles)
          {
            oprot.writeI32(_iter37);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BmMtIndirectWsGroupTupleSchemeFactory implements SchemeFactory {
    public BmMtIndirectWsGroupTupleScheme getScheme() {
      return new BmMtIndirectWsGroupTupleScheme();
    }
  }

  private static class BmMtIndirectWsGroupTupleScheme extends TupleScheme<BmMtIndirectWsGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BmMtIndirectWsGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGrp_handle()) {
        optionals.set(0);
      }
      if (struct.isSetMbr_handles()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetGrp_handle()) {
        oprot.writeI32(struct.grp_handle);
      }
      if (struct.isSetMbr_handles()) {
        {
          oprot.writeI32(struct.mbr_handles.size());
          for (int _iter38 : struct.mbr_handles)
          {
            oprot.writeI32(_iter38);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BmMtIndirectWsGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.grp_handle = iprot.readI32();
        struct.setGrp_handleIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mbr_handles = new ArrayList<Integer>(_list39.size);
          int _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readI32();
            struct.mbr_handles.add(_elem40);
          }
        }
        struct.setMbr_handlesIsSet(true);
      }
    }
  }

}

